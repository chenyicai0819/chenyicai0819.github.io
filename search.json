[{"title":"最近一段时间的学习总结","url":"/2021/08/20/2021-08-20-最近一段时间的学习总结/","content":"\n# 最近一段时间的学习总结\n\n## 项目部分\n\n1. 完成了学生宿舍系统的答辩\n2. 成功将学生宿舍为系统部署到了服务器上\n3. 准备进行学生宿舍系统的小程序的设计，但是实在是没有时间\n4. 完成了国医堂小程序的开发(React+Taro+Taro UI)\n5. 完成了小程序API的开发(Vue+SpringBoot+MyBatis-Plus)\n6. 国医堂小程序后台开发完毕(VUE+SpringBoot+MyBatis-Plus+Element-UI)\n7. 准备进行中医药门户或者桂林医学院报修系统开发环境的搭建\n\n## 框架部分\n\n1. 学习了SpringSecurity，并完成了Session以及Token两种情况下的应用Demo\n2. MyBatis-Plus逆向工程(代码生成器)\n3. Shiro的基本使用\n4. 入门Activiti(工作流)\n5. 准备学些RabbitMQ、\n6. MyBatis-Plus逆向工程3.5.0版本之之前是setting模式，之后是building模式\n7. 入门了React以及Vue两个有名的前端框架的使用\n8. ElementUI，LayUI，Bootstrap等UI的使用\n\n## 基础知识\n\n1. 复习了下AOP思想，并准备使用到日志中\n2. HashMap和HashTable的区别\n\n## 服务器\n\n1. 手动将web项目部署到阿里云服务器上\n2. 复习了Linux的指令\n\n## 备注\n\n看到同学面试京东所回答的问题，以及其他同学所总结的知识点，感觉自己和别人相比有很大的进步空间","tags":["学习总结"]},{"title":"shiro安全框架","url":"/2021/08/01/2021-08-01-shiro安全框架/","content":"\n# shiro安全框架\n\n## 1、简述\nshiro是apache公司所出品的开源安全框架\n其可以用于：\n1. 处理身份认证\n2. 授权\n3. 企业会话管理和加密\n\n相对于Spring security来说更加简单，使用也更加灵活\n\n在使用shiro的时候可以不依赖于任何容器，既可以在javaSE下使用，同样可以在JavaEE下使用\n\n## 2、架构\n\n1. 使用用户的登录信息构建令牌\n```java\nUsernamePasswordToken token = new UsernamePasswordToken(username, password);\n\n```\ntoken可以理解为一个用户令牌，等于的过程可以理解为shiro检验用户令牌是否具有合法的身份以及相关的权限\n2. 执行登录\n\n```java\nSecurityUtils.setSecurityManager(securityManager); // 注入SecurityManager\nSubject subject = SecurityUtils.getSubject(); // 获取Subject单例对象\nsubject.login(token); // 执行登录\n```\nshiro中最核心的部分就是securityManger，它主要负责安全认证和授权。当我们在使用这个框架的时候，shiro已经将一切的操作封装成一个盒子了，我们在使用的时候可以把它当成一个黑盒来进行使用。SecurityUtils对象，本质上就是一个工厂类似Spring中的ApplicationContext。Subject，翻译过来就是项目的意思，他是一个需要通过shiro保护的一个抽象概念。\n通过1令牌和项目的登录关系，保证了我们的安全。\n\n3. 判断用户\n\n这一步中的内容shiro无法帮我们进行实现，我们只有通过最原始的手段来实现登录用户的判断，就是查询数据库。\n\n例如：\n```java\nif (!token.getUsername().equals(name)) {\n  //shiro底层会抛出一个异常\n    return null;\n}\n//判断密码\nreturn new SimpleAuthenticationInfo(\"\", password, \"\");\n```\n第一个if语句中首先会判断数据库中查到的name于输入的用户名2是否一致，如果不一致，则会抛出一个异常\n然后SimpleAuthenticationInfo中可以用于判断密码的正确性，同样是从数据库查出来的数据做对比。\n\n## 3、实现Realm\n\n1. 创建一个Realm\n\nRealm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息，但是Realm并不止局限于数据的存取，其中还有很多认证授权校验相关的代码  \n我们可以自定义一个MyRealm，用于我们的项目之中，但是前提是这个类必须继承于AuthorizingRealm父类，然后实现两个方法  \nAuthorizationInfo doGetAuthorizationInfo以及AuthenticationInfo doGetAuthenticationInfo  \nAuthenticationInfo代表了用户的角色信息集合，AuthorizationInfo代表了角色的权限信息集合。如此一来，当设计人员对项目中的某一个url路径设置了只允许某个角色或具有某种权限才可以访问的控制约束的时候，Shiro就可以通过以上两个对象来判断。\n\n我们也可以简单看作：  \n**doGetAuthenticationInfo()** 方法：用来验证当前登录的用户，获取认证信息。  \n**doGetAuthorizationInfo()** 方法：为当前登录成功的用户授予权限和分配角色。\n\n2. 从数据库查询数据\n\n在数据库中查询登陆人信息的时候，仅仅需要查询用户的id，这时还未涉及到密码，也就是说即使用户输入的密码不正确，照样可以查询出该用户。\n然后，将该用户的相关信息封装到authcInfo中并返回给Shiro接下来就该Shiro上场了，将封装的用户信息与用户的输入信息（用户名、密码）进行对比、校验（注意，这里对密码也要进行校验）。校验通过则允许用户登录，否则跳转到指定页面。\n\n## 4、Shiro配置\n\n1. 在ShiroConfig中配置Realm\n\n```java\n@Bean(name=\"MyRealm\")\n  public MyRealm myRealm() {\n    return new MyRealm();\n  }\n```\n2. 配置安全管理器SecurityManager\n\n```java\n@Bean(name=\"securityManager\")\n  public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(\"MyRealm\") MyRealm myRealm) {\n    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();\n    //关联Realm\n    securityManager.setRealm(myRealm);\n    return securityManager;\n  }\n```\n当我们配置安全管理器的时候，需要将前面的Realm添加进来，这样子才可以访问到Realm\n\n3. 配置Shiro过滤器\n\nshiro中自带好了配置的过滤器，我们在使用之前需要将其进行导入\n\n```java\nShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();\n//设置安全管理器\nshiroFilterFactoryBean.setSecurityManager(securityManager);\n//添加Shiro内置过滤器\n/*\nShiro内置过滤器，可以实现权限相关的拦截器\n常用的有：\nanon：无需认证就能访问\nauthc：必须认证才能访问\nuser：必须拥有 “记住我” 功能才能使用\nperms：拥有对某个资源的权限才能访问\nrole： 拥有对某个角色权限才能访问\n*/\nLinkedHashMap<String, String> filterMap = new LinkedHashMap<String,String>();\n//这里我们要将不进行拦截的放在前面\nfilterMap.put(\"/login\", \"anon\");\nfilterMap.put(\"/*\", \"authc\");\n\n//最后设置验证失败的时候所跳转的界面\nshiroFilterFactoryBean.setLoginUrl(\"/toLogin\");\n```\n此时当我们未登陆的时候，点击被拦截的模块，就会跳到我们所指定的网页，而没有拦截的网页则可以正常显示。","tags":["shiro"]},{"title":"过滤器(Filter)在Web中的应用","url":"/2021/07/01/2021-07-01-过滤器(Filter)在Web中的应用/","content":"\n# Java Web之过滤器(Filter)\n\n## 过滤器(Filter)\n\n过滤器，从字面意思上理解，就是用于过滤作用的工具。\n在Java web中，过滤器的作用是对Web资源进行拦截，经过处理之后，再交给下一步进行处理；而下一步可以是一个新的过滤器，也可以是一个service\n\n"},{"title":"算法学习_罗马数字转整数","url":"/2021/06/28/2021-06-28-算法学习_罗马数字转整数/","content":"\n# 罗马数字转整数\n\n## 题目\n[lettcode-13题](https://leetcode-cn.com/problems/roman-to-integer/) \n难度：简单\n![]( https://i.bmp.ovh/imgs/2021/06/ed551dd42d8355cf.png )\n\n## 解题思路\n对于每个罗马符号所对应的数值，我们可以将其用一个HashMap存起来，将其字符作为key，以及数值为相应的value\n\n在方法中对输入的字符串的所有字符进行遍历，get到所对应的值，并拿到它的后一位数的值，如果当前符号的值大于后一位符号的值，则进行＋运算，否则-运算。\n\n## 具体代码\n```java\n//leetcode项目\nclass Solution {\n    Map<Character,Integer> map=new HashMap<Character,Integer>();\n    public int romanToInt(String s) {\n        map.put('I',1);\n        map.put('V',5);\n        map.put('X',10);\n        map.put('L',50);\n        map.put('C',100);\n        map.put('D',500);\n        map.put('M',1000);\n        int ans = 0;\n        int n = s.length();\n        for (int i = 0; i < n; ++i) {\n            int value = map.get(s.charAt(i));\n            if (i < n - 1 && value < map.get(s.charAt(i + 1))) {\n                ans -= value;\n            } else {\n                ans += value;\n            }\n        }\n        return ans;\n    }\n}\n```","tags":["算法","HashMap"]},{"title":"记录博客主页的搭建(二)","url":"/2021/06/24/2021-06-24-记录博客主页的搭建(二)/","content":"\n# 记录博客主页的搭建(二)\n\n## 完成上篇文章的所有步骤\n主题是个性化个人博客的很重要的一个模块，当然hexo默认也有一个主题，但是我们可以到[hexo的主题商城](https://hexo.io/themes/)中下载更多我们喜欢的主题。\n\n![]( https://ftp.bmp.ovh/imgs/2021/06/e2ca448dcc957f2e.jpg )\n\n## 选择想要的主题\n\n点击大图可以进行预览，点击名称就可以进入主题的GitHub仓库，就可以进行clone了\n\n然后在本地clone主题的仓库，放到hexo目录的themes文件夹中，再去修改_config.yml文件，就可以应用这个主题了\n\n将theme后面的名称改为刚才clone的文件夹名称，就可以应用主题了\n```\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: hexo-theme-aircloud\n```\n\n## 创建标签以及存档\n\n默认的主题是不带有标签和介绍的，这时候需要在博客根目录的source文件夹下建立tags文件夹和about文件夹。\n\n*注：建议不要直接新建文件，而是采用 hexo 的 hexo new page tags 和 hexo new page about 的方式新建文件，这样可以被 hexo 索引到。*\n\n创建好之后在两个文件夹的index.md中分别输入以下内容\n```\n---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n```\n```\n---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ncomments: true\n---\n```\n再次打开主页就会看到生成了两个新的列表\n\n## 更换头像以及网站logo\n\n在博客根目录的 source 文件夹下建立 img 文件夹\n*采用 hexo 的 hexo new page img *\n\n然后并将头像文件命名为avatar.jpg，logo文件命名为favicon.ico\n\n然后修改_config.yml文件，增加以下内容\n```\nsidebar-avatar: img/avatar.jpg\n```\n就可以了\n\n## 网站标题\n在 _config.yml 文件中，增加以下内容\n```\nSEOTitle: George'blog\n```\n冒号后面修改成你想要的名字就可以了\n\n## 签名\n比如最顶端的签名，我们同样可以自定义\n\n![]( https://ftp.bmp.ovh/imgs/2021/06/89d7894724475826.jpg )\n\n只要在_config.yml文件，修改以下内容即可\n```\nsubtitle: 你想要的签名\n```\n\n## 搜索功能\n\n搜索功能同样是不自带的，我们在安装搜索功能之前，首先要安装一个插件\n在git中输入以下命令进行安装\n```\nnpm i hexo-generator-search --save\n```\n\n然后在_config.yml文件中增加以下内容即可\n```\nsearch:\n  path: search.json\n  field: post\n```\n\n## 社交网络\n底部的社交网络我们可以自行修改，但是只能在官方限制的范围内进行修改\n编辑根目录的 _config.yml 文件，增加：\n```\n# SNS settings\n# 一些社交平台地址，支持以下几种：\nweibo_username:     5676314204\nzhihu_username:     swaggy-chen\ngithub_username:    chenyicai0819\ntwitter_username:   George chan\n```\n*还有一些其他的社交网络可以参考官方文档*\n\n## 赞赏功能\n\n我们同样可以在我们的博客中添加一个赞赏功能\n只要在img文件夹中增加收款码图片，并命名为donate.jpg\n然后在 _config.yml 文件中增加以下内容，即可在在每篇文章下面增加一个赞赏功能\n```\ndonate:\n  img: img/donate.jpg\n  content: 感谢鼓励\n```\n\n## 修改用户名\n只需修改 _config.yml 文件，中以下内容，即可修改用户名\n```\nauthor: 你的用户名\n```\n\n## 完成主题更换\n\n至此，基本的冤死就已经设置完毕了，基本上只要修改 _config.yml 文件，就可以控制网站中所有的元素了，而官方的帮助文档也写的很清楚如何对各个模块进行设置\n\n我的这篇文章只是针对我的设置进行了一个记录，所以需要更多资料的可以去参考官方的文档，基本上是写的非常明白了\n\n## 部署到GitHub\n\n跟之前一样，完成修改之后要部署到github，只需要以下几行命令\n```\nhexo clean  //清除缓存文件db.json和已生成的静态文件public\nhexo g   //生成网站静态文件到默认设置的public文件夹\nhexo d   //部署网站到设定的仓库\n```\n\n部署完成之后稍等一会，就可以看到修改之后的内容了\n\n## 相关链接\n\n[官方文档](https://hexo.io/zh-cn/docs/)\n\n[主题商城](https://hexo.io/themes/)\n\n","tags":["Hexo","记录"]},{"title":"记录博客主页的搭建(一)","url":"/2021/06/24/2021-06-24-记录博客主页的搭建(一)/","content":"\n# 记录博客主页的搭建(一)\n\n## 1.心血来潮\n有一个自己的网站，是我心中一直存在的一个想法，因最近学业压力不是很大，碰巧看到阿里云的域名首年特惠只要一元，就顺便买了一个域名，准备着手搭建个人网站，在此之前，我对博客网站几乎是没有过了解，所以在查阅了一些资料之后，以Hexo+Github Page的方式进行我的网站的搭建，以下就是具体的过程。\n\n## 2.搭建过程\n\n**相关的搭建过程网上随便一找就有很多，我这里只是对我建站的过程进行记录，具有一定参考价值。**\n\n### 2.1 下载node.js以及git并安装\n在使用[Hexo](https://hexo.io/zh-cn/)框架进行搭建网站之前，首先要下载安装[node.js](https://nodejs.org/zh-cn/)和[git](https://git-scm.com/)，以便于安装Hexo以及代码的管理。\n\n*具体的安装注意事项*\n1. Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本\n2. 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选）\n3. 对于中国大陆地区用户，可以前往官网或者淘宝Git for Windows镜像下载 git 安装包（仅针对Windows）\n4. 安装完毕以上两个软件之后就可以进行Hexo的安装了\n### 2.2 安装Hexo\n在想要安装Hexo的位置右键打开**Git Bash Here**通过命令行来进行安装，输入以下命令\n```\nnpm install -g hexo-cli\n```\n点击回车即可进行安装，然后安装完成之后进行一下初始化\n```\nhexo init\nnpm install\n```\n分别输入以上两句并回车，就会生成初始的菜单，大概的目录是这样子的\n```\n.\n├── _config.yml\n├── package.json\n├── scaffolds\n├── source\n|   ├── _drafts\n|   └── _posts\n└── themes\n```\n下面是各个目录的具体功能：\n\n**config.yml**\n网站的配置信息，可以在此配置大部分的参数。后面发布到github上面时，有用到这个文件；\n**package.json**\n应用程序的信息\n**source**\n是网站中一下资源的文件夹，博客内容也都放在这里\n**themes**\n网站主题的放置的位置\n\n*其他更具体的介绍可以参考[官方文档](https://hexo.io/zh-cn/docs/)*\n\n### 2.3 预览Hexo博客\n此时就可以预览自己搭建的博客了，但是所有东西都是初始的，输入以下的命令即可\n```\nnpm install hexo-server --save\nhexo server\n```\n*以上命令同样是在Git Bash Here中输入*\n然后在浏览器网址栏输入**localhost:4000**\n如果以上项目能启动就说明成功了，接下来将项目搭建到GitHub上面\n\n### 2.4 将项目部署到GitHub\n1. 在GitHub中新建一个仓库，然后命名为**用户名.github.io**，只有这样子GitHub才会将其设置为用户的博客![]( https://ftp.bmp.ovh/imgs/2021/06/bd90f51e057bd717.jpg )\n\n*因为我已经有一个库了，所以显示错误*\n\n2. **将本地搭建好的hexo发布到github上**\n\n首先输入以下代码安装一个插件\n```\nnpm install hexo-deployer-git --save\n```\n\n修改网站配置文件_config.yml,添加deploy信息\n\n```\ndeploy:\n  type: git \n  repo: git@github.com:用户名/用户名.github.io.git \n  branch: master(也就是想要上传的分支)\n```\n\n3. **生成SSH key**\n\n在git中输入以下命令\n```\nssh-keygen -t rsa -C \"your_email@example.com\"\n```\n然后会提示输入passphrase（本步骤可以跳过），相当于设置一个密码，之后跟github进行操作时都会要求输入密码，避免误操作\n然后将新生成的key添加到ssh-agent中\n```\nssh-add ~/.ssh/id_rsa\n```\n就可以在上面的路径下找到ssh的文件了![]( https://ftp.bmp.ovh/imgs/2021/06/1536b7e2cd20e1b1.jpg )\n\n4. **将ssh添加到GitHub中**\n\n打开id_rsa.pub文件将一整串公钥拷贝下来\n打开GitHub的个人设置界面，按照以下图片的步骤进行添加ssh\n![]( https://ftp.bmp.ovh/imgs/2021/06/f27d25e0e14f55ce.jpg )\n\ntitle随意，key填id_rsa.pub文件中内容，然后保存即可。\n至此，就成功将ssh添加到github中了\n\n5. **测试是否连接成功**\n\n输入以下命令\n```\nssh -T git@github.com\n```\n如果出现以下文字就说明连接成功了\n```\nHi wispyoureyes! You've successfully authenticated, but GitHub does not provide shell access.\n```\n\n6. 上传静态文件\n\n成功与GitHub建立连接之后，就可以生成静态文件上传到github中了\n\n```\nhexo clean  //清除缓存文件db.json和已生成的静态文件public\nhexo g   //生成网站静态文件到默认设置的public文件夹\nhexo d   //部署网站到设定的仓库\n```\n然后再网址栏输入GitHub仓库的名称就可以访问了\n\n## 3.绑定域名\n\n1. 首先到阿里云或者其他的云服务商购买一个域名\n2. 然后进行域名解析\n3. 登陆阿里云控制台，选择域名选项，添加两条CNAME解析\n4. 然后在GitHub的仓库设置中，下滑找到Github Pages ，点击进去，在Custom domain里填入你的域名，然后点击Save，稍等一会就好了。\n5. 然后就可以通过你的域名来进入博客了\n\n*关于备案，如果要部署到国内的服务器上面需要进行备案，从哪里买的域名就从哪里备案GitHub属于国外的服务器，是不用进行备案的*\n\n\n\n## 4.相关链接\n\n[生成ssh](https://www.jianshu.com/p/31cbbbc5f9fa/)\n\n[Hexo官方文档](https://hexo.io/zh-cn/docs/)\n\n[阿里云](https://www.aliyun.com/?spm=5176.12901015.0.i12901015.ba0e525c2qLtLM)\n\n[淘宝git for windows 镜像](https://npm.taobao.org/mirrors/git-for-windows/)\n\n[淘宝node.js镜像](https://npm.taobao.org/mirrors/node)","tags":["Hexo","记录"]},{"title":"基于Swing的简易点餐系统","url":"/2021/06/21/2021-06-21-基于Swing的简易点餐系统/","content":"\n# 基于Swing的建议点餐系统\n\n## 1. 应用技术\n```\nSwing、JDBC、Oracle数据库、Java基础\n```\n## 2.项目功能\n```\n工作人员：菜品的增删改查、工作人员点餐、为顾客进行排号叫号、利润查询、结账。\n顾客：顾客点餐、查看积分、查看菜单、自助结账。\n```\n## 3.项目历程\n### 3.1 项目准备\n\n总所周知，Swing对于Java来说已经是一个不再使用的技术了，相对于微软的C#语言，Java的优势更在于Web端的应用，但是应教学的要求，主要是为了练习JDBC以及PL/SQL的使用，我们使用了Swing技术配合数据库使用，制作了一个简易的点餐系统，旨在熟悉一个项目的制作流程，从项目需求分析到项目开发到最后的维护发布，我作为小组长，带领了团队一共7位队员在老师的指导之下，完成了项目的开发。\n\n### 3.2 项目开发背景\n\n据了解，学校周围部分餐馆仍处于人工点餐、手工记账的阶段，这样子不仅容易在点餐时出现错记误记的情况，在最后记录时大量的数据也会十分繁琐，计算机软件统一的处理方式可以将以上的过程全都自动化一站式地完成，大大提高了效率；除此之外，使用计算机系统还大大减少了成本。\n发展点餐系统，是一种必然趋势，可以说点餐系统的出现，只是用现在较为成熟的计算机技术去改造传统行业的一个小小例子。这样的系统，将会不断地出现，而且会有力地推动传统行业的不断发展。\n\n### 3.3 项目开发\n\n在开始项目的开发之后，由于队员基础的参差不齐，所以在任务分配时对队员的能力分配了不同的任务，并针对队员能力进行了不同知识点的针对，由于是首次进行团队项目开发，并没有使用到GitHub进行协作开发，所以在最后整合代码时，碰到了较大的问题，jdk版本不统一，代码不能兼容等等问题，最后整合的代码也还有着大量的冗余，开发过程总体来说比较顺利，但是还是有很大的改进，在开发前进行数据库设计时，虽然说没有太多的表，但是对于项目小白的我们还是花费了一点时间。\n\n\n### 3.4 项目源码\n```\nhttps://github.com/chenyicai0819/2020_java_study/tree/main/OrderSystemToSix\n```","tags":["Swing","点餐系统"]},{"title":"我的第一条博客","url":"/2021/06/21/2021-06-21-我的第一条博客/","content":"\n# 这是我的第一条博客\n\n**1.初次接触**\n\n今天是2021年6月21日。我搭建了我的第一个个人博客网站，并发布了我的第一条个人博客，今后我会在上面发布一些自己的学习经历，个人感想等内容。\n"}]