{"meta":{"title":"George's Blog","subtitle":"让我来给你讲讲他的传奇故事吧","description":"","author":"George Chan","url":"http://cyc0819.top","root":"/"},"pages":[{"title":"关于","date":"2021-12-08T13:25:25.814Z","updated":"2021-12-08T13:25:25.814Z","comments":false,"path":"about/index.html","permalink":"http://cyc0819.top/about/index.html","excerpt":"","text":"flag🚩将学到的东西都记录下来📌 个人资料🎫 一个大4️⃣的在校的暂未秃头🤵(以后可能也不秃头)的初级软件工程师💻(高端)来自桂林电子科技大学🏫(清华又称北京小桂电) 业余的java开发,业余的🏀运动员,职业的睡觉💤达人 想写出更多💯文章📄 联系📞我 我的📫： &#99;&#x68;&#101;&#x6e;&#x79;&#105;&#x63;&#x61;&#105;&#48;&#x38;&#x31;&#x39;&#64;&#x66;&#111;&#x78;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109; 我的WeChatℹ：George_Chan0819 我的🐧🐧：2495842975 我的标签🔖"},{"title":"所有分类","date":"2021-12-08T09:08:13.041Z","updated":"2021-12-08T09:08:13.041Z","comments":false,"path":"categories/index.html","permalink":"http://cyc0819.top/categories/index.html","excerpt":"","text":""},{"title":"友链列表","date":"2021-12-08T12:57:26.464Z","updated":"2021-12-08T12:57:26.464Z","comments":false,"path":"friends/index.html","permalink":"http://cyc0819.top/friends/index.html","excerpt":"","text":""},{"title":"img","date":"2021-06-21T15:46:17.000Z","updated":"2021-06-21T15:46:17.510Z","comments":true,"path":"img/index.html","permalink":"http://cyc0819.top/img/index.html","excerpt":"","text":""},{"title":"留言版","date":"2021-10-01T11:16:28.000Z","updated":"2021-10-01T11:17:42.638Z","comments":true,"path":"info/index.html","permalink":"http://cyc0819.top/info/index.html","excerpt":"","text":""},{"title":"","date":"2021-12-08T16:45:52.023Z","updated":"2021-12-08T16:45:52.023Z","comments":false,"path":"photos/index.html","permalink":"http://cyc0819.top/photos/index.html","excerpt":"","text":"2021-12-08 小蓝和他的好朋友们"},{"title":"","date":"2021-09-30T03:08:15.422Z","updated":"2021-09-30T02:50:19.699Z","comments":true,"path":"photos/photos.json","permalink":"http://cyc0819.top/photos/photos.json","excerpt":"","text":"[{\"name\":\"photos\",\"children\":[\"1600.1600 cc.jpeg\",\"2208.2208 i6_12.jpg\",\"2208.2208 i6_template_0.jpg\",\"1242.813 IMG_20191219_012423.jpg\",\"968.961 IMG_20191219_012434.jpg\",\"971.960 IMG_20191219_012436.jpg\",\"971.960 IMG_20191219_012439.jpg\",\"1000.667 IMG_20191219_012506.jpg\",\"1200.800 IMG_20191219_012701.jpg\",\"1620.1080 mmexport1558356254403.bmp\",\"2560.1440 wall_ko8e24-1.jpg\",\"1080.718 微信图片_20190822224807 - 副本 (2).jpg\",\"1920.1080 微信图片_20190822224812.jpg\",\"1920.1080 微信图片_20190822224816.jpg\"]}]"},{"title":"所有标签","date":"2021-12-08T09:08:46.646Z","updated":"2021-12-08T09:08:46.646Z","comments":false,"path":"tags/index.html","permalink":"http://cyc0819.top/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-30T02:50:19.696Z","updated":"2021-09-30T02:50:19.696Z","comments":true,"path":"photos/photosInfo.json","permalink":"http://cyc0819.top/photos/photosInfo.json","excerpt":"","text":"[{\"dirName\":\"photos\",\"fileName\":\"cc.jpeg\",\"iconID\":\"1600.1600 cc.jpeg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"i6_12.jpg\",\"iconID\":\"2208.2208 i6_12.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"i6_template_0.jpg\",\"iconID\":\"2208.2208 i6_template_0.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012423.jpg\",\"iconID\":\"1242.813 IMG_20191219_012423.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012434.jpg\",\"iconID\":\"968.961 IMG_20191219_012434.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012436.jpg\",\"iconID\":\"971.960 IMG_20191219_012436.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012439.jpg\",\"iconID\":\"971.960 IMG_20191219_012439.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012506.jpg\",\"iconID\":\"1000.667 IMG_20191219_012506.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012701.jpg\",\"iconID\":\"1200.800 IMG_20191219_012701.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"mmexport1558356254403.bmp\",\"iconID\":\"1620.1080 mmexport1558356254403.bmp\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"wall_ko8e24-1.jpg\",\"iconID\":\"2560.1440 wall_ko8e24-1.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224807 - 副本 (2).jpg\",\"iconID\":\"1080.718 微信图片_20190822224807 - 副本 (2).jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224812.jpg\",\"iconID\":\"1920.1080 微信图片_20190822224812.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224816.jpg\",\"iconID\":\"1920.1080 微信图片_20190822224816.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}}]"}],"posts":[{"title":"SpringBoot发送微信模板消息","slug":"2021-12-10-SpringBoot发送微信模板消息","date":"2021-12-10T04:54:26.000Z","updated":"2021-12-10T04:55:18.938Z","comments":false,"path":"2021/12/10/2021-12-10-SpringBoot发送微信模板消息/","link":"","permalink":"http://cyc0819.top/2021/12/10/2021-12-10-SpringBoot%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF/","excerpt":"","text":"SpringBoot发送微信模板消息1、环境 jdk 1.8.0_271 Maven 3.6.1 MySQL 8.0 2、工作这段时间在做项目的时候，甲方要求将之前的易班消息推送更换成微信公众号模板消息推送，所以本文就是记录一下使用模板消息的过程， 开发的时候我用的是微信的测试公众账号，但是实际的功能和企业的账号是一样的。 3、准备工作首先我们要知道，模板消息是什么？以下就是公众号模板消息，我们在生活中很多场景都会接触到它。 在进入了测试号的管理后台之后，我们可以在这里设置我们的模板消息的模板 首先我们要在公众平台中设置好我们的模板，然后 java 中根据模板信息来添加相应的内容。 4、java后端编写我们创建一个名为WeChatNotify的工具类，里面存放的是模板消息的设置内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Componentpublic class WeChatNotify &#123; @Autowired private IDictService ds; @Autowired private ParseUtil pu; @Autowired private JdrService js; // 发送模板信息 public String push(String openid,String map, Bxd bxd) &#123; //1，配置 WxMpInMemoryConfigStorage wxStorage = new WxMpInMemoryConfigStorage(); wxStorage.setAppId(&quot;wxacc93d31c5dbd26f&quot;); wxStorage.setSecret(&quot;f8c9e82b590ac71eb12e96f77cf65740&quot;); WxMpService wxMpService = new WxMpServiceImpl(); wxMpService.setWxMpConfigStorage(wxStorage); //2,推送消息 WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder() .toUser(openid)//要推送的用户openid .templateId(&quot;-1pT4MrVw4asKamh0IQMF6c22Ih74dRjxqN8fwhjoQs&quot;)//模版id .url(&quot;https://www.cyc0819.top&quot;)//点击模版消息要访问的网址 .build(); // 获取保修类别 String bxlb=pu.paraseBxlb(bxd.getBxlb()); //3,正式版发送模版消息，这里需要配置你的信息，替换微信公众号上创建的模板内容 templateMessage.addData(new WxMpTemplateData(&quot;map&quot;, map, &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;type&quot;,bxlb, &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;text&quot;, bxd.getXxdd()+bxd.getBxnr(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;time&quot;, bxd.getYysj(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;name&quot;, bxd.getSbr(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;phone&quot;, bxd.getSbrsj(), &quot;#173177&quot;)); try &#123; wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage); return &quot;推送成功&quot;; &#125; catch (Exception e) &#123; System.out.println(&quot;推送失败：&quot; + e.getMessage()); e.printStackTrace(); return &quot;推送失败&quot;; &#125; &#125; // 检查openid是否已经绑定 public String selOpenid(String ybid)&#123; String openid=js.selOpenidForYbid(ybid); if (openid == null)&#123; return null; &#125; return openid; &#125;&#125; 在这里，我们需要公众号的appid,appsecret，以及接收人的openid。 如何获取用户的 openid 可以看以下这篇文章。 SpringBoot+Vue微信授权获取用户openidhttp://cyc0819.top/2021/12/09/2021-12-09-SpringBoot+Vue%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7openid/ 给足所需要的消息，然后在要发送消息的地方调用即可 1234567public String zdpdWeChat(String eid, String bxlb,Bxd bxd)&#123; String ybid=zdpd(eid,bxlb); String map=es.selxxwz(Integer.parseInt(eid)); //调用发送模板信息 wcn.push(&quot;OPENID&quot;,map,bxd); return ybid;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://cyc0819.top/tags/SpringBoot/"}]},{"title":"SpringBoot发送微信模板消息","slug":"2021-12-20-桂林医学院报修系统","date":"2021-12-10T04:54:26.000Z","updated":"2021-12-10T04:55:18.938Z","comments":false,"path":"2021/12/10/2021-12-20-桂林医学院报修系统/","link":"","permalink":"http://cyc0819.top/2021/12/10/2021-12-20-%E6%A1%82%E6%9E%97%E5%8C%BB%E5%AD%A6%E9%99%A2%E6%8A%A5%E4%BF%AE%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"SpringBoot发送微信模板消息1、环境 jdk 1.8.0_271 Maven 3.6.1 MySQL 8.0 2、工作这段时间在做项目的时候，甲方要求将之前的易班消息推送更换成微信公众号模板消息推送，所以本文就是记录一下使用模板消息的过程， 开发的时候我用的是微信的测试公众账号，但是实际的功能和企业的账号是一样的。 3、准备工作首先我们要知道，模板消息是什么？以下就是公众号模板消息，我们在生活中很多场景都会接触到它。 在进入了测试号的管理后台之后，我们可以在这里设置我们的模板消息的模板 首先我们要在公众平台中设置好我们的模板，然后 java 中根据模板信息来添加相应的内容。 4、java后端编写我们创建一个名为WeChatNotify的工具类，里面存放的是模板消息的设置内容 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152@Componentpublic class WeChatNotify &#123; @Autowired private IDictService ds; @Autowired private ParseUtil pu; @Autowired private JdrService js; // 发送模板信息 public String push(String openid,String map, Bxd bxd) &#123; //1，配置 WxMpInMemoryConfigStorage wxStorage = new WxMpInMemoryConfigStorage(); wxStorage.setAppId(&quot;wxacc93d31c5dbd26f&quot;); wxStorage.setSecret(&quot;f8c9e82b590ac71eb12e96f77cf65740&quot;); WxMpService wxMpService = new WxMpServiceImpl(); wxMpService.setWxMpConfigStorage(wxStorage); //2,推送消息 WxMpTemplateMessage templateMessage = WxMpTemplateMessage.builder() .toUser(openid)//要推送的用户openid .templateId(&quot;-1pT4MrVw4asKamh0IQMF6c22Ih74dRjxqN8fwhjoQs&quot;)//模版id .url(&quot;https://www.cyc0819.top&quot;)//点击模版消息要访问的网址 .build(); // 获取保修类别 String bxlb=pu.paraseBxlb(bxd.getBxlb()); //3,正式版发送模版消息，这里需要配置你的信息，替换微信公众号上创建的模板内容 templateMessage.addData(new WxMpTemplateData(&quot;map&quot;, map, &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;type&quot;,bxlb, &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;text&quot;, bxd.getXxdd()+bxd.getBxnr(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;time&quot;, bxd.getYysj(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;name&quot;, bxd.getSbr(), &quot;#173177&quot;)); templateMessage.addData(new WxMpTemplateData(&quot;phone&quot;, bxd.getSbrsj(), &quot;#173177&quot;)); try &#123; wxMpService.getTemplateMsgService().sendTemplateMsg(templateMessage); return &quot;推送成功&quot;; &#125; catch (Exception e) &#123; System.out.println(&quot;推送失败：&quot; + e.getMessage()); e.printStackTrace(); return &quot;推送失败&quot;; &#125; &#125; // 检查openid是否已经绑定 public String selOpenid(String ybid)&#123; String openid=js.selOpenidForYbid(ybid); if (openid == null)&#123; return null; &#125; return openid; &#125;&#125; 在这里，我们需要公众号的appid,appsecret，以及接收人的openid。 如何获取用户的 openid 可以看以下这篇文章。 SpringBoot+Vue微信授权获取用户openidhttp://cyc0819.top/2021/12/09/2021-12-09-SpringBoot+Vue%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7openid/ 给足所需要的消息，然后在要发送消息的地方调用即可 1234567public String zdpdWeChat(String eid, String bxlb,Bxd bxd)&#123; String ybid=zdpd(eid,bxlb); String map=es.selxxwz(Integer.parseInt(eid)); //调用发送模板信息 wcn.push(&quot;OPENID&quot;,map,bxd); return ybid;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://cyc0819.top/tags/SpringBoot/"}]},{"title":"SpringBoot+Vue微信授权获取用户openid","slug":"2021-12-09-SpringBoot+Vue微信授权获取用户openid","date":"2021-12-08T16:16:46.000Z","updated":"2021-12-10T05:01:27.875Z","comments":false,"path":"2021/12/09/2021-12-09-SpringBoot+Vue微信授权获取用户openid/","link":"","permalink":"http://cyc0819.top/2021/12/09/2021-12-09-SpringBoot+Vue%E5%BE%AE%E4%BF%A1%E6%8E%88%E6%9D%83%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7openid/","excerpt":"","text":"SpringBoot+Vue微信授权获取用户openid1、环境 jdk 1.8.0_271 Maven 3.6.1 MySQL 8.0 Vue 3.0 2、需求这几天在做桂林医学院的项目的时候，甲方提出了需求说能不能将消息通知改成微信公众号通知，因为公众号的效率比较高，同时受众也是比较多（原本用的是易班的 api，文档及其不友好，bug 官方也不解决，按照上一届学长的说法，之前发送消息接收人得等两天之后才能收到）。 而如果用到微信的公众号，必须就得接收人主动绑定自己的微信号，我们才能获取他的 openid ，才能对其发送模板消息。 3、微信公众号模板消息开发的时候我用的是微信的测试公众账号，但是实际的功能和企业的账号是一样的。 首先我们要知道，模板消息是什么？以下就是公众号模板消息，我们在生活中很多场景都会接触到它。 在进入了测试号的管理后台之后，我们可以在这里设置我们的模板消息的模板 当然，本文的主题并不是模板消息的发送，而是使用模板消息的时候引发的其他问题，具体的模板消息可以移步我的： SpringBoot发送微信模板消息http://cyc0819.top/2021/12/10/2021-12-10-SpringBoot%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%A8%A1%E6%9D%BF%E6%B6%88%E6%81%AF/ 4、SpringBoot获取openidopenid 是微信用户的唯一标识，就跟人的身份证一样，每个微信号都有一个自己的 openid ，用于识别每个微信，一般情况下，我们无法看到，更无法修改我们的 openid，此时如果需要获取，就需要微信官方给我们提供的接口： 我们点开下图中的蓝色字体,可以进入到网页授权的界面： 里面详细介绍了获取openid，甚至是用户信息的过程： 以下是我通过 java 实现的一些过程，可供参考。 4.1、用户同意授权，获取code根据官方的说法，我们需要请求一个链接来获取到用户的 CODE链接如下：https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIRECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE#wechat_redirect 这里有几个参数，官方文档都有说明，这里重点是把要去上一步中： 最后面的修改那里，将域名改成与 REDIRECT_URI 一致 而此时我们选择的scope是需要用户手动通过授权的snsapi_userinfo 然后我们就有了我们的链接，此时就要去代码中对其进行请求了。 以下就是java代码首先我们在 SpringBoot模块中建一个 WechatOAuth 控制器，用来接受前端发来的请求 1234567891011121314151617181920212223242526@RestController@RequestMapping(&quot;wechat&quot;)public class WechatOAuth &#123; @Autowired private AuthUtil authUtil; @Resource private UserService userService; // 用户同意授权，获取code @RequestMapping(&quot;/oauth&quot;) public void oauth(HttpServletResponse response, String id) throws IOException &#123; // System.out.println(&quot;开始询问用户是否同统一授权&quot;); String appid = &quot;wxac**********d26f&quot;; String path = &quot;http://10.33.73.62:8089/wechat/invoke&quot;; path = URLEncoder.encode(path, &quot;UTF-8&quot;); String url = &quot;https://open.weixin.qq.com/connect/oauth2/authorize?appid=&quot; + appid + &quot;&amp;response_type=code&amp;scope=snsapi_userinfo&amp;redirect_uri=&quot; + path + &quot;&amp;state=&quot; + id + &quot;&amp;connect_redirect=1#wechat_redirect&quot;; //请求转发链接 response.sendRedirect(url); &#125;&#125; 在这里，我们请求链接获得 code ，然后返回我们设置好的回调地址，也就是上面的 path，（注意，此处的地址要和前面我们设置的一致，后面的端口可以改变） 4.2、通过code换取网页授权openid然后我们再写一个转发之后的控制器。也就是上一步中String path = &quot;http://10.33.73.62:8089/wechat/invoke&quot;; 12345678910111213141516171819202122232425262728293031323334// 用户同意授权 @RequestMapping(&quot;/invoke&quot;) public String oauthInvoke(HttpServletRequest request, HttpServletResponse response) &#123; // 获得code System.out.println(&quot;用户同意授权，开始获取openid&quot;); String code = request.getParameter(&quot;code&quot;); String state = request.getParameter(&quot;state&quot;); System.out.println(code); System.out.println(state); // 判断是否绑定过openid String isOpenid=userService.selUser(state).getOpenid(); if (isOpenid!=null)&#123; return &quot;您已经绑定过微信了,如需修改请联系管理员&quot;; &#125; // 通过token获取access_token String appid = &quot;wxacc93d31c5dbd26f&quot;; String secret = &quot;f8c9e82b590ac71eb12e96f77cf65740&quot;; String url = &quot;https://api.weixin.qq.com/sns/oauth2/access_token?appid=&quot; + appid + &quot;&amp;secret=&quot; + secret + &quot;&amp;code=&quot; + code + &quot;&amp;grant_type=authorization_code&quot;; try &#123; JSONObject jsonObject = authUtil.doGetJson(url); String openid= (String) jsonObject.get(&quot;openid&quot;); System.out.println(openid); // 将openid插入到user表中 userService.addOpenid(state,openid); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; return &quot;授权成功,绑定微信成功&quot;; &#125; 此处同样是请求链接，就可以返回一个 json 数据，里面就有我们所需要的数据，如果还需要用户信息的数据，可以继续跟着官方的步骤继续往下做，但是我们这里只需要一个 openid，所以就到这一步。 在这一步中，我们请求该链接，然后用authUtil工具里来解析，将其返回的数据转换为 json 数据，以方便我们的提取使用，转换为 json 数据之后，只要从中通过 key 取出来即可。 此处首先会判断用户的 openid 是否存在，如果存在就弹出提示，不执行以下的操作，否则在查出用户的openid 之后，即可绑定到数据库，弹出提示信息。 以下是此处用到的 authUtil 工具类 1234567891011121314151617181920212223242526@Componentpublic class AuthUtil &#123; public static final String APPID = &quot;wx45c1428e5584fcdb&quot;; public static final String APPSECRET = &quot;98174450eb706ada330f37e646be85d5&quot;; public JSONObject doGetJson(String url) throws ClientProtocolException, IOException &#123; JSONObject jsonObject = null; //首先初始化HttpClient对象 DefaultHttpClient client = new DefaultHttpClient(); //通过get方式进行提交 HttpGet httpGet = new HttpGet(url); //通过HTTPclient的execute方法进行发送请求 HttpResponse response = client.execute(httpGet); //从response里面拿自己想要的结果 HttpEntity entity = response.getEntity(); if(entity != null)&#123; String result = EntityUtils.toString(entity,&quot;UTF-8&quot;); // jsonObject = JSONObject.fromObject(result); jsonObject= JSON.parseObject(result); &#125; //把链接释放掉 httpGet.releaseConnection(); return jsonObject; &#125;&#125; 5、前端请求后端接口我们需要一个能看得过去，能让用户输入账号密码的前端界面，所以以下是我们 vue 的代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;template&gt; &lt;div class=&quot;login&quot;&gt; &lt;div class=&quot;form-login&quot;&gt; &lt;el-form ref=&quot;form&quot; :model=&quot;data.form&quot; &gt; &lt;el-form-item label=&quot;账户&quot;&gt; &lt;el-input v-model=&quot;data.form.name&quot; class=&quot;input-login&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item label=&quot;密码&quot;&gt; &lt;el-input v-model=&quot;data.form.pass&quot; type=&quot;password&quot; class=&quot;input-login&quot;&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-button type=&quot;primary&quot; @click=&quot;Wechatlogin&quot;&gt;微信授权&lt;/el-button&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import &#123;getCurrentInstance, reactive&#125; from &quot;vue&quot;;import qs from &quot;qs&quot;;import router from &quot;../../router&quot;;import &#123; ElLoading &#125; from &#x27;element-plus&#x27;export default &#123; name: &quot;Wechar&quot;, setup()&#123; const &#123;proxy&#125;=getCurrentInstance(); const qs=require(&#x27;qs&#x27;); const data=reactive(&#123; form: &#123; name: &#x27;&#x27;, pass: &#x27;&#x27;, &#125;, &#125;) const Wechatlogin = () =&gt; &#123; const loading = ElLoading.service(&#123; lock: true, text: &#x27;Loading&#x27;, background: &#x27;rgba(0, 0, 0, 0.7)&#x27;, &#125;) proxy.$axios.post(&#x27;user/login&#x27;,qs.stringify(&#123; &quot;userId&quot;:data.form.name,&quot;userPass&quot;:data.form.pass &#125;)).then(res=&gt;&#123; if (&quot;允许登录&quot;==res.data)&#123; window.location.href=&quot;http://10.33.73.62:8089/wechat/oauth?id=&quot;+data.form.name loading.close() &#125;else&#123; loading.close() alert(res.data); &#125; &#125;); &#125; return&#123; data,Wechatlogin, &#125; &#125;&#125;&lt;/script&gt; 这里点击授权的按钮之后，首先会判断用户是否存在以及密码是否正确，然后就去调用后端的接口。 注意此处有一个坑： 可以看到我这里window.location.href=http://10.33.73.62:8089/wechat/oauth?id=+data.form.name使用的是window.location.href请求后端接口。 这里是不能用axios进行请求的，会出现跨域异常（跨域到微信的服务器）。 算是一个逼坑指南。 6、完整流程","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"},{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Vue","slug":"前端/Vue","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/Vue/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot，Vue","slug":"SpringBoot，Vue","permalink":"http://cyc0819.top/tags/SpringBoot%EF%BC%8CVue/"}]},{"title":"json—lib依赖无法下载问题","slug":"2021-12-08-json—lib依赖无法下载问题","date":"2021-12-08T05:53:12.000Z","updated":"2021-12-08T09:32:01.537Z","comments":false,"path":"2021/12/08/2021-12-08-json—lib依赖无法下载问题/","link":"","permalink":"http://cyc0819.top/2021/12/08/2021-12-08-json%E2%80%94lib%E4%BE%9D%E8%B5%96%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E9%97%AE%E9%A2%98/","excerpt":"","text":"json-lib依赖无法下载问题1、环境 jdk 1.8.0_271 Maven 3.6.1 Maven源：阿里云 2、问题昨天在研究微信验证时，需要用到 JSONObject.fromObject(result); 这个方法，所以需要引入 json-lib 的依赖，引入依赖很简单，本以为复制黏贴就可以了，但是不知道为什么阿里云的 maven 仓库却死活无法找到这个依赖的包。后面通过手动引入的方式解决。 3、解决3.1、引入的依赖123456&lt;!-- https://mvnrepository.com/artifact/net.sf.json-lib/json-lib --&gt;&lt;dependency&gt; &lt;groupId&gt;net.sf.json-lib&lt;/groupId&gt; &lt;artifactId&gt;json-lib&lt;/artifactId&gt; &lt;version&gt;2.4&lt;/version&gt;&lt;/dependency&gt; 3.2、报错此时直接进行下载会提示找不到依赖的相关内容 3.3、解决方法一翻阅了网上的说法，说是在依赖后面加上一句：&lt;classifier&gt;jdk15&lt;/classifier&gt; ，因为远程提供了两个包，我试了一下在我这里并不管用。所以，此方法基本放弃。 3.4、解决方法二另一个方法，就是去MAVEN存储库直接下载jar包，但是在我打开网站的时候，点击 jar 包进行下载，却发现，这里的也无法下载了 所以基本上可以判断不是我们自己的问题了。 偶然之间，我发现这个依赖竟然有一个官网：JSON-lib 进去看看官网里应该有 jar 包的下载链接果然，点击下面这个按钮就可以正常下载了 下载完成之后就可以进行手动的导入了我这里选择的是将我们手动下载的 jar 包，放在 maven 本地仓库的相应位置首先，我们需要将后面的 jdk15 去掉，因为我们的依赖里是没有的。 然后根据自己的本地仓库位置，找到 json-lib的本地仓库点击进入 2.4 文件夹,将我们更名之后的 jar 包放到其中最后记得把带有 last 的文件删掉 最后到 java 项目中重新载入一下 maven 就可以了。 4、结束json-lib 相当于 jackson,fastjson这样的 jar 来说，效率不高，所以建议使用后者。 json-lib中的 JSONObject.fromObject(result) 方法可用fastjson中的JSON.parseObject(result);进行替代","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"maven","slug":"java/maven","permalink":"http://cyc0819.top/categories/java/maven/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"maven","slug":"maven","permalink":"http://cyc0819.top/tags/maven/"}]},{"title":"回顾SSM框架整合","slug":"2021-11-30-回顾SSM框架整合","date":"2021-11-30T05:13:21.000Z","updated":"2021-12-08T09:31:52.507Z","comments":false,"path":"2021/11/30/2021-11-30-回顾SSM框架整合/","link":"","permalink":"http://cyc0819.top/2021/11/30/2021-11-30-%E5%9B%9E%E9%A1%BESSM%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/","excerpt":"","text":"回顾SSM框架整合1、环境 jdk 1.8.0_271 Maven 3.6.1 mySQL 8.0 Tomcat 9.0.27 2、创建数据库首先创建一个测试用的数据库 books： 12345678create table books( bid int not null primary key, sname varchar(255) null, bname varchar(255) null, bauthor varchar(255) null, bhome varchar(255) null); 3、创建项目现在创建一个普通的 Maven 项目，并引入所需要的依赖 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101&lt;properties&gt; &lt;maven.compiler.source&gt;8&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;8&lt;/maven.compiler.target&gt; &lt;spring.version&gt;5.2.3.RELEASE&lt;/spring.version&gt;&lt;/properties&gt;&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-core&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-beans&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-context&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-web&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-core&lt;/artifactId&gt; &lt;version&gt;2.9.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt; &lt;version&gt;2.9.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt; &lt;version&gt;2.9.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.17&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.slf4j&lt;/groupId&gt; &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt; &lt;version&gt;1.7.25&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt; &lt;version&gt;1.3.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.zaxxer&lt;/groupId&gt; &lt;artifactId&gt;HikariCP&lt;/artifactId&gt; &lt;version&gt;3.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring-test&lt;/artifactId&gt; &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt; &lt;scope&gt;provided&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;8.0.11&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;com.mchange&lt;/groupId&gt; &lt;artifactId&gt;c3p0&lt;/artifactId&gt; &lt;version&gt;0.9.5.2&lt;/version&gt; &lt;/dependency&gt;&lt;/dependencies&gt; 4、设置资源过滤在 pom.xm 中插入资源过滤的代码 123456789101112131415161718192021&lt;build&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;src/main/resources&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;resource&gt; &lt;directory&gt;src/main/java&lt;/directory&gt; &lt;includes&gt; &lt;include&gt;**/*.xml&lt;/include&gt; &lt;include&gt;**/*.properties&lt;/include&gt; &lt;/includes&gt; &lt;filtering&gt;true&lt;/filtering&gt; &lt;/resource&gt; &lt;/resources&gt;&lt;/build&gt; 5、添加 web 框架支持给我们创建的普通项目添加上框架支持，在项目名上右键，即可添加框架支持。 5、创建 spring 配置文件在刚刚项目的 resources 下面创建配置文件 db.properties ，其中写的是数据库的相关配置 1234jdbc.driver=com.mysql.cj.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF8&amp;userSSL=true&amp;serverTimezone=GMTjdbc.username=chenyicaijdbc.password=cyc1234 以及创建 applicationContext.xml 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 使用连接池，开源的连接池--&gt; &lt;!-- 阿里：druid--&gt; &lt;!-- c3p0--&gt; &lt;!-- hiraki：springboot默认使用的连接池--&gt; &lt;!-- 一个应用最大并发如果有500个，那么为了提高查询效率，预先创建500个连接，并且把500个连接放入连接池（容器）--&gt; &lt;!-- 控制器类的创建交给SpringMVC，不能配置在bean容器中 --&gt; &lt;context:component-scan base-package=&quot;com.chen&quot;&gt;&lt;/context:component-scan&gt; &lt;context:property-placeholder location=&quot;classpath:db.properties&quot;&gt;&lt;/context:property-placeholder&gt; &lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt; &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;jdbc.driver&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;jdbc.url&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;user&quot; value=&quot;$&#123;jdbc.username&#125;&quot;&gt;&lt;/property&gt; &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot;&gt;&lt;/property&gt; &lt;!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3 --&gt; &lt;property name=&quot;initialPoolSize&quot; value=&quot;15&quot;&gt;&lt;/property&gt; &lt;!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 --&gt; &lt;property name=&quot;maxIdleTime&quot; value=&quot;0&quot;&gt;&lt;/property&gt; &lt;!--连接池中保留的最大连接数。默认值: 15 --&gt; &lt;property name=&quot;maxPoolSize&quot; value=&quot;100&quot;&gt;&lt;/property&gt; &lt;!-- 连接池中保留的最小连接数，默认为：3 --&gt; &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;&gt;&lt;/property&gt; &lt;!--c3p0全局的PreparedStatements缓存的大小。如果maxStatements与maxStatementsPerConnection均为0，则缓存不生效，只要有一个不为0，则语句的缓存就能生效。如果默认值: 0 --&gt; &lt;property name=&quot;maxStatements&quot; value=&quot;200&quot;&gt;&lt;/property&gt; &lt;!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 --&gt; &lt;property name=&quot;checkoutTimeout&quot; value=&quot;3000&quot; /&gt; &lt;!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --&gt; &lt;property name=&quot;acquireIncrement&quot; value=&quot;2&quot; /&gt; &lt;!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次 --&gt; &lt;property name=&quot;acquireRetryAttempts&quot; value=&quot;0&quot; /&gt; &lt;!--重新尝试的时间间隔，默认为：1000毫秒 --&gt; &lt;property name=&quot;acquireRetryDelay&quot; value=&quot;5000&quot; /&gt; &lt;!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 --&gt; &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;&gt;&lt;/property&gt; &lt;!--c3p0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将只供c3p0测试使用。默认值: null --&gt; &lt;property name=&quot;automaticTestTable&quot; value=&quot;Test&quot;&gt;&lt;/property&gt; &lt;!--如果为false，则获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常，但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。默认: false --&gt; &lt;property name=&quot;breakAfterAcquireFailure&quot; value=&quot;false&quot;&gt;&lt;/property&gt; &lt;!--每60秒检查所有连接池中的空闲连接。默认值: 0，不检查 --&gt; &lt;property name=&quot;idleConnectionTestPeriod&quot; value=&quot;0&quot;&gt;&lt;/property&gt; &lt;!--maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数。默认值: 0 --&gt; &lt;property name=&quot;maxStatementsPerConnection&quot; value=&quot;10&quot;&gt;&lt;/property&gt; &lt;/bean&gt; &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.chen.entity&quot;&gt;&lt;/property&gt; &lt;/bean&gt;&lt;/beans&gt; 6、编写代码主体现在来编写代码中 entity，controller，service，mapper 层的代码entity：books 1234567891011121314public class Books implements Serializable &#123; private Integer bid; private String sname; private String bname; private String bauthor; private String bhome; private static final long serialVersionUID = 1L; &#125; mapper（此处演示的是传统的 DAO 的方式）:booksDao： 12345678910111213public interface BooksDao &#123; int deleteByPrimaryKey(Integer bid); int insert(Books record); int insertSelective(Books record); Books selectByPrimaryKey(Integer bid); int updateByPrimaryKeySelective(Books record); int updateByPrimaryKey(Books record);&#125; booksDaoImpl： 12345678910111213141516171819202122232425262728293031323334353637@Repositorypublic class BooksDaoImpl implements BooksDao &#123; private SqlSessionFactory sqlSessionFactory; public void setSqlSessionFactory(SqlSessionFactory sqlSessionFactory) &#123; this.sqlSessionFactory = sqlSessionFactory; &#125; @Override public int deleteByPrimaryKey(Integer bid) &#123; SqlSession sqlSession=sqlSessionFactory.openSession(); int out=sqlSession.delete(&quot;deleteByPrimaryKey&quot;,bid); return out; &#125; @Override public int insert(Books record) &#123; SqlSession sqlSession=sqlSessionFactory.openSession(); int out=sqlSession.insert(&quot;insert&quot;,record); return out; &#125; @Override public Books selectByPrimaryKey(Integer bid) &#123; SqlSession sqlSession=sqlSessionFactory.openSession(); Books books=sqlSession.selectOne(&quot;selectByPrimaryKey&quot;,bid); return books; &#125; @Override public int updateByPrimaryKey(Books record) &#123; SqlSession sqlSession=sqlSessionFactory.openSession(); int out = sqlSession.update(&quot;updateByPrimaryKey&quot;,record); return out; &#125;&#125; 然后是 xml 文件，其中是执行的 sql： 12345678910111213141516171819202122232425262728293031&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org/DTD Mapper 3.0&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;user&quot;&gt; &lt;select id=&quot;selectByPrimaryKey&quot; parameterType=&quot;int&quot; resultType=&quot;com.chen.entity.Books&quot;&gt; select * from books where bid = #&#123;bid,jdbcType=INTEGER&#125; &lt;/select&gt; &lt;delete id=&quot;deleteByPrimaryKey&quot; parameterType=&quot;int&quot;&gt; delete from books where bid = #&#123;bid,jdbcType=INTEGER&#125; &lt;/delete&gt; &lt;insert id=&quot;insert&quot; parameterType=&quot;com.chen.entity.Books&quot; useGeneratedKeys=&quot;true&quot;&gt; insert into books (sname, bname, bauthor, bhome) values (#&#123;sname,jdbcType=VARCHAR&#125;, #&#123;bname,jdbcType=VARCHAR&#125;, #&#123;bauthor,jdbcType=VARCHAR&#125;, #&#123;bhome,jdbcType=VARCHAR&#125;) &lt;/insert&gt; &lt;update id=&quot;updateByPrimaryKey&quot; parameterType=&quot;com.chen.entity.Books&quot;&gt; update books set sname = #&#123;sname,jdbcType=VARCHAR&#125;, bname = #&#123;bname,jdbcType=VARCHAR&#125;, bauthor = #&#123;bauthor,jdbcType=VARCHAR&#125;, bhome = #&#123;bhome,jdbcType=VARCHAR&#125; where bid = #&#123;bid,jdbcType=INTEGER&#125; &lt;/update&gt;&lt;/mapper&gt; service 层：BooksService 123456789public interface BooksService &#123; int deleteByPrimaryKey(Integer bid); int insert(Books record); Books selectByPrimaryKey(Integer bid); int updateByPrimaryKey(Books record);&#125; impl： 12345678910111213141516171819202122232425public class BooksServiceImpl implements BooksService &#123; @Autowired private BooksDao booksDao; @Override public int deleteByPrimaryKey(Integer bid) &#123; return booksDao.deleteByPrimaryKey(bid); &#125; @Override public int insert(Books record) &#123; return booksDao.insert(record); &#125; @Override public Books selectByPrimaryKey(Integer bid) &#123; return booksDao.selectByPrimaryKey(bid); &#125; @Override public int updateByPrimaryKey(Books record) &#123; return booksDao.updateByPrimaryKey(record); &#125;&#125; 最后是 Controller 层：BooksController 123456789101112131415161718192021222324252627282930@RestControllerpublic class BooksController &#123; @Autowired private BooksService booksService; public void setBooksService(BooksService booksService) &#123; this.booksService = booksService; &#125; @RequestMapping(&quot;/del&quot;) int deleteByPrimaryKey(Integer bid)&#123; return booksService.deleteByPrimaryKey(bid); &#125; @RequestMapping(&quot;/ins&quot;) int insert(Books record)&#123; return booksService.insert(record); &#125; @RequestMapping(&quot;/sel&quot;) Books selectByPrimaryKey(Integer bid)&#123; return booksService.selectByPrimaryKey(bid); &#125; @RequestMapping(&quot;/up&quot;) int updateByPrimaryKey(Books record)&#123; return booksService.updateByPrimaryKey(record); &#125;&#125; 最后项目的结构如下： 7、现在需要在配置 xml 中编写扫描我们的 bean 的代码加入以下代码： 123456789&lt;bean id=&quot;userDao&quot; class=&quot;com.chen.mapper.impl.BooksDaoImpl&quot;&gt; &lt;property name=&quot;sqlSessionFactory&quot; ref=&quot;sqlSessionFactory&quot;&gt;&lt;/property&gt;&lt;/bean&gt;&lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt; &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt; &lt;property name=&quot;typeAliasesPackage&quot; value=&quot;com.chen.entity&quot;&gt;&lt;/property&gt; &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:mapper/BooksMapper.xml&quot;&gt;&lt;/property&gt;&lt;/bean&gt; 如图： 8、web 配置在 web.xml 中配置以下内容,用于配置dispatcherServlet中心控制器 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;web-app xmlns=&quot;http://xmlns.jcp.org/xml/ns/javaee&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot; version=&quot;4.0&quot;&gt; &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt; &lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;classpath*:applicationContext.xml&lt;/param-value&gt; &lt;/context-param&gt; &lt;!-- 监听器会自动读取applicationContext.xml中的bean的信息，完成bean的初始化--&gt; &lt;listener&gt; &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt; &lt;/listener&gt; &lt;servlet&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;&lt;!-- 前端控制器 --&gt; &lt;load-on-startup&gt;1&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;dispatcher&lt;/servlet-name&gt; &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;!-- 处理所有请求，当然也包含静态资源（js、css、img...） --&gt; &lt;/servlet-mapping&gt;&lt;/web-app&gt; 在创建一个 dispatcher-servlet.xml，用于 MVC 的装配 123456789101112131415161718192021222324&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot; xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt; &lt;!-- 扫描控制器的包，以确定哪些类是控制器类（哪些类上使用了@Controller注解） --&gt; &lt;context:component-scan base-package=&quot;cn.edu.guet.controller&quot;&gt;&lt;/context:component-scan&gt; &lt;!-- 表示：所有的静态资源使用默认的Servlet --&gt; &lt;mvc:default-servlet-handler&gt;&lt;/mvc:default-servlet-handler&gt; &lt;mvc:annotation-driven&gt;&lt;/mvc:annotation-driven&gt; &lt;bean id=&quot;internalResourceViewResolver&quot; class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt; &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/jsp/&quot;&gt;&lt;/property&gt;&lt;!-- 告诉SpringMVC去哪个目录找文件 --&gt; &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;&gt;&lt;/property&gt;&lt;!-- 文件的后缀 --&gt; &lt;/bean&gt; &lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;/&gt; &lt;!--通过处理器适配器AnnotationMethodHandlerAdapter来开启支持@RequestMapping注解--&gt;&lt;/beans&gt; 9、运行测试此时我们用 Tomcat 构建项目。出现以下结果： 如果出现这种情况，我们就需要将 maven 的包手动导入，才能成功启动项目。步骤如下： 打开项目结构。 点击构件，然后点击WEB-INF目录，点击新建文件夹按钮，创建lib文件夹。 然后引入库。 将其全选，然后需要的jar包便全部导入到项目中。 再运行，即可","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"spring","slug":"java/spring","permalink":"http://cyc0819.top/categories/java/spring/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"spring","slug":"spring","permalink":"http://cyc0819.top/tags/spring/"}]},{"title":"eCharts学习笔记","slug":"2021-11-27-eCharts学习笔记","date":"2021-11-27T14:04:25.000Z","updated":"2021-12-08T09:31:43.846Z","comments":false,"path":"2021/11/27/2021-11-27-eCharts学习笔记/","link":"","permalink":"http://cyc0819.top/2021/11/27/2021-11-27-eCharts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"eCharts 学习笔记1、简介eCharts 是百度出品的一款基于 JavaScript 的数据可视化图表库，提供直观，生动，可交互，可个性化定制的数据可视化图表。最开始是由百度团队开源的，后面于2018年交由Apache基金会，称为ASF孵化项目。并于2021年1月26日正式毕业。 2、在 Vue 中使用 首先下载 eCharts：1npm install echarts --save 全局引入 eCharts:1import * as echarts from &#x27;echarts&#x27;; 或者可以按需引入123456789101112131415161718192021222324252627282930// 引入 echarts 核心模块，核心模块提供了 echarts 使用必须要的接口。import * as echarts from &#x27;echarts/core&#x27;;// 引入柱状图图表，图表后缀都为 Chartimport &#123; BarChart &#125; from &#x27;echarts/charts&#x27;;// 引入提示框，标题，直角坐标系，数据集，内置数据转换器组件，组件后缀都为 Componentimport &#123; TitleComponent, TooltipComponent, GridComponent, DatasetComponent, DatasetComponentOption, TransformComponent&#125; from &#x27;echarts/components&#x27;;// 标签自动布局，全局过渡动画等特性import &#123; LabelLayout, UniversalTransition &#125; from &#x27;echarts/features&#x27;;// 引入 Canvas 渲染器，注意引入 CanvasRenderer 或者 SVGRenderer 是必须的一步import &#123; CanvasRenderer &#125; from &#x27;echarts/renderers&#x27;;// 注册必须的组件echarts.use([ TitleComponent, TooltipComponent, GridComponent, DatasetComponent, TransformComponent, BarChart, LabelLayout, UniversalTransition, CanvasRenderer]); 3、基本语法结构 在使用 eCharts 之前，我们需要给它一个 DOM 容器，官方是推荐我们使用具有定义好的长和宽的一个父容器（可以是 div ）。所以我们首先构建一个父容器 div 来存放 eCharts 图表 12&lt;div id=&quot;billreport&quot; :style=&quot;&#123; width: &#x27;95%&#x27;, height: &#x27;500px&#x27; &#125;&quot;&gt;&lt;/div&gt; 由于 eCharts 基于js构建的，所以只要会js的语法，eCharts的语法自然也不在话下。而 eCharts 的基本语法结构为： 123456789101112131415setup()&#123;const data=reactive(&#123; option:&#123; //图表信息 &#125;&#125;)const ech = () =&gt; &#123; //绘制图表的方法 &#125;&#125;onBeforeMount(()=&gt;&#123; //在页面渲染之前加载图表的信息&#125;) 4、图表配置信息图表配置信息，即 option 中的内容，在这一部分，我们将配置一系列的信息，正是这些信息生成了对应的图表。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950option:&#123; title:&#123; text: &quot;收入与支出趋势图&quot;//图表的标题 &#125;, tooltip:&#123;//提示的信息 trigger:&#x27;axis&#x27;//触发方式 &#125;, legend: &#123;//图例 data: [&#123; name: &#x27;收入&#x27;, // 强制设置图形为圆。 icon: &#x27;circle&#x27;, // 设置文本为红色 textStyle: &#123; color: &#x27;red&#x27; &#125; &#125;, &#123; name: &#x27;支出&#x27;, // 强制设置图形为圆。 icon: &#x27;circle&#x27;, // 设置文本为红色 textStyle: &#123; color: &#x27;red&#x27; &#125; &#125;]//图例的标题，分别对应 series 中的数据 &#125;， xAxis: &#123;//配置要在x轴显示的项 type: &#x27;category&#x27;,//&#x27;value&#x27; 数值轴，适用于连续数据。 &#x27;category&#x27; 类目轴，适用于离散的类目数据，为该类型时必须通过 data 设置类目数据。 &#x27;time&#x27; 时间轴，适用于连续的时序数据，与数值轴相比时间轴带有时间的格式化，在刻度计算上也有所不同，例如会根据跨度的范围来决定使用月，星期，日还是小时范围的刻度。 &#x27;log&#x27; 对数轴。适用于对数数据。 boundaryGap: false,// 刻度离纵轴有无间隙，默认true有间距 data: []//横轴坐标的值 &#125;, yAxis: &#123;//配置y轴的项，配置与x轴类似 type: &#x27;value&#x27; &#125;, series: [//系列列表,显示在图表中的内容 &#123; name: &#x27;收入&#x27;,//系列名称 type: &#x27;line&#x27;,//图表类型 stack: &#x27;收入&#x27;,//堆叠，如果有相同名称的会堆叠 data: [] &#125;, &#123; name: &#x27;支出&#x27;, type: &#x27;line&#x27;, stack: &#x27;支出&#x27;, data: [] &#125; ]&#125; 图表类型表： 配置 图表类型 type: ‘bar’ 柱状/条形图 type: ‘line’ 折线/面积图 type: ‘pie’ 饼图 type: ‘scatter’ 散点（气泡）图 type: ‘effectScatter’ 带有涟漪特效动画的散点（气泡） type: ‘radar’ 雷达图 type: ‘tree’ 树型图 type: ‘treemap’ 树型图 type: ‘sunburst’ 旭日图 type: ‘boxplot’ 箱形图 type: ‘candlestick’ K线图 type: ‘heatmap’ 热力图 type: ‘map’ 地图 type: ‘parallel’ 平行坐标系的系列 type: ‘lines’ 线图 type: ‘graph’ 关系图 type: ‘sankey’ 桑基图 type: ‘funnel’ 漏斗图 type: ‘gauge’ 仪表盘 type: ‘pictorialBar’ 象形柱图 type: ‘themeRiver’ 主题河流 type: ‘custom’ 自定义系列 5、x 轴、y 轴x 轴和 y 轴都由轴线、刻度、刻度标签、轴标题四个部分组成。一般情况下，二维的图标结构都会有 x 轴和 y 轴，通常情况下，x 轴会在图表的下方，而 y 轴在图表的左边。而 eCharts 也提供了一些特定的坐标轴的设置选项，如：轴线：我们可以通过 axisLine 来对轴线进行设置，比如轴线两头的箭头，轴线的样式等等，比如： 1234567891011121314151617181920212223option = &#123; xAxis: &#123; axisLine: &#123; show:&#x27;true&#x27; //显示轴线 symbol: &#x27;arrow&#x27;, //轴线两边的箭头 lineStyle: &#123; //轴线的样式，有颜色、宽度、类型等等 type: &#x27;dashed&#x27; // ... &#125; &#125; // ... &#125;, yAxis: &#123; axisLine: &#123; symbol: &#x27;arrow&#x27;, lineStyle: &#123; type: &#x27;dashed&#x27; // ... &#125; &#125; &#125; // ...&#125;; 轴线两边的箭头选项： 坐标轴刻度：ECharts 提供了轴线 axisTick 相关的配置，我们可以根据实际情况调整，例如刻度线的长度，样式等。以下是一个坐标轴刻度的例子： 1234567891011121314151617181920212223242526option = &#123; xAxis: &#123; axisTick: &#123; show:true //开启坐标轴刻度 alignWithLabel:true //使刻度与标签对其（类目轴中在 boundaryGap 为 true 的时候有效） inside:true //刻度线是否朝里（true为朝里） interval：0 //坐标轴刻度的显示间隔,如果设置为 1，表示『隔一个标签显示一个标签』，如果值为 2，表示隔两个标签显示一个标签，以此类推。 length: 6,//刻度线的长度 lineStyle: &#123; //样式设置 type: &#x27;dashed&#x27; // ... &#125; &#125; // ... &#125;, yAxis: &#123; axisTick: &#123; length: 6, lineStyle: &#123; type: &#x27;dashed&#x27; // ... &#125; &#125; &#125; // ...&#125;; 刻度标签：ECharts 提供了轴线 axisLabel 相关的配置，我们可以根据实际情况调整。以下是一个例子：如上图所示，下面的星期就是刻度标签 1234567891011121314151617181920212223option = &#123; xAxis: &#123; axisLabel: &#123; show:true //显示刻度标签 interval:0 //显示刻度，同上 inside:true //标签是否朝里（true朝里） rotate：45 // 标签偏移的角度 margin:5 //标签与轴线的距离 formatter: &#x27;&#123;value&#125; kg&#x27;, //刻度标签的内容格式器，支持字符串模板和回调函数两种形式。 align: &#x27;center&#x27; //文字水平对齐方式，默认自动。可选为：&#x27;left&#x27;,&#x27;center&#x27;,&#x27;right&#x27; // ... &#125; // ... &#125;, yAxis: &#123; axisLabel: &#123; formatter: &#x27;&#123;value&#125; 元&#x27;, align: &#x27;center&#x27; // ... &#125; &#125; // ...&#125;; 标签中的formatter： 123456// 使用字符串模板，模板变量为刻度默认标签 &#123;value&#125;formatter: &#x27;&#123;value&#125; kg&#x27;// 使用函数模板，函数参数分别为刻度数值（类目），刻度的索引formatter: function (value, index) &#123; return value + &#x27;kg&#x27;;&#125; 更多关于 formatter 的内容可以参考官方的 API 6、主题配置在eCharts的内部，内置了两套主题，分别是亮色主题以及暗色主题通过以下的方式，我们可以修改主题 12var chart = echarts.init(dom, &#x27;light&#x27;);var chart = echarts.init(dom, &#x27;dark&#x27;); 或者我们可以通过eCharts的主题编辑器来创建自己的主题 7、数据集（dataset）dataset 组件可以用于单独的数据集声明，从而数据可以单独管理，被多个组件复用，并且可以基于数据指定数据到视觉的映射。 写法一： 1234567891011dataset: &#123; // 提供一份数据。 //第一行对应的是 x 轴 source: [ [&#x27;product&#x27;, &#x27;2015&#x27;, &#x27;2016&#x27;, &#x27;2017&#x27;], [&#x27;Matcha Latte&#x27;, 43.3, 85.8, 93.7], [&#x27;Milk Tea&#x27;, 83.1, 73.4, 55.1], [&#x27;Cheese Cocoa&#x27;, 86.4, 65.2, 82.5], [&#x27;Walnut Brownie&#x27;, 72.4, 53.9, 39.1] ]&#125;, 在 dataset 中管理数据之后，就可以不用在 series 单独进行数据的声明，而是直接在 data 除进行调用 123456// 声明多个柱状图系列，默认情况下，每个系列会自动对应到 dataset 的每一列。series: [ &#123;type: &#x27;bar&#x27;&#125;, &#123;type: &#x27;bar&#x27;&#125;, &#123;type: &#x27;bar&#x27;&#125;] 写法二： 1234567891011dataset: &#123; // 这里指定了维度名的顺序，从而可以利用默认的维度到坐标轴的映射。 // 如果不指定 dimensions，也可以通过指定 series.encode 完成映射，参见后文。 dimensions: [&#x27;product&#x27;, &#x27;2015&#x27;, &#x27;2016&#x27;, &#x27;2017&#x27;], source: [ &#123;product: &#x27;Matcha Latte&#x27;, &#x27;2015&#x27;: 43.3, &#x27;2016&#x27;: 85.8, &#x27;2017&#x27;: 93.7&#125;, &#123;product: &#x27;Milk Tea&#x27;, &#x27;2015&#x27;: 83.1, &#x27;2016&#x27;: 73.4, &#x27;2017&#x27;: 55.1&#125;, &#123;product: &#x27;Cheese Cocoa&#x27;, &#x27;2015&#x27;: 86.4, &#x27;2016&#x27;: 65.2, &#x27;2017&#x27;: 82.5&#125;, &#123;product: &#x27;Walnut Brownie&#x27;, &#x27;2015&#x27;: 72.4, &#x27;2016&#x27;: 53.9, &#x27;2017&#x27;: 39.1&#125; ]&#125;, 8、图例图例是图表中对内容区元素的注释、用不同形状、颜色、文字等来标示不同数据列，通过点击对应数据列的标记，可以显示或隐藏该数据列。图例虽然不是图表中的主要信息、却是了解图表信息的钥匙。以下是一个例子： 123456789101112131415161718192021option = &#123; legend: &#123; type:&#x27;plain&#x27; //图例的类型可选值：&#x27;scroll&#x27;：可滚动翻页的图例。当图例数量较多时可以使用。 // Try &#x27;horizontal&#x27; orient: &#x27;vertical&#x27;, //图例列表的布局朝向。可选：&#x27;horizontal&#x27;水平，&#x27;vertical&#x27;垂直 right: 10, //图例组件离容器右侧的距离。 top: &#x27;center&#x27; //图例组件离容器上侧的距离。 &#125;, dataset: &#123; source: [ [&#x27;product&#x27;, &#x27;2015&#x27;, &#x27;2016&#x27;, &#x27;2017&#x27;], [&#x27;Matcha Latte&#x27;, 43.3, 85.8, 93.7], [&#x27;Milk Tea&#x27;, 83.1, 73.4, 55.1], [&#x27;Cheese Cocoa&#x27;, 86.4, 65.2, 82.5], [&#x27;Walnut Brownie&#x27;, 72.4, 53.9, 39.1] ] &#125;, xAxis: &#123; type: &#x27;category&#x27; &#125;, yAxis: &#123;&#125;, series: [&#123; type: &#x27;bar&#x27; &#125;, &#123; type: &#x27;bar&#x27; &#125;, &#123; type: &#x27;bar&#x27; &#125;]&#125;; 显示内容如下：更多内容参考官方 API","categories":[{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"eCharts","slug":"前端/eCharts","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/eCharts/"}],"tags":[{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"eCharts","slug":"eCharts","permalink":"http://cyc0819.top/tags/eCharts/"}]},{"title":"SpringSecurity+JWT实现的登录认证","slug":"2021-11-20-SpringSecurity+JWT实现的登录认证","date":"2021-11-20T01:39:55.000Z","updated":"2021-12-08T09:37:34.904Z","comments":false,"path":"2021/11/20/2021-11-20-SpringSecurity+JWT实现的登录认证/","link":"","permalink":"http://cyc0819.top/2021/11/20/2021-11-20-SpringSecurity+JWT%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%99%BB%E5%BD%95%E8%AE%A4%E8%AF%81/","excerpt":"","text":"SpringSecurity+JWT实现的登录认证1、简介 Spring Security在 Web 编程开发中，登录安全往往也是很重要的一个部分，而 Spring Security 所做得就是这个工作。在 java 领域，成熟的安全框架解决方案一般有 Apache Shiro、Spring Security 等两种技术选型。Apache Shiro 简单易用也算是一大优势，但其功能还是远不如 Spring Security 强大。后者可以为应用提供声明式的安全访问限制，他提供了一系列的可以由开发者主动配置的 bean ，并利用 Spring IoC和 AOP等功能特性来为应用系统提供声明式的安全访问控制功能，减少了诸多重复工作。 JWTJWT 的全称是：Json Web Token 。是在网路应用中传递信息的一种基于 json 的开发标准，可用于作为 json 对象在不同系统之间进行安全地信息传输。主要使用场景一般是用来在身份提供者和服务提供者间传递被认证的用户身份信息。 2、设计登录认证所用的表本次登录认证需要用到三个表，分别是用户表，身份表以及用户和身份绑定的表。`` 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384SET NAMES utf8mb4;SET FOREIGN_KEY_CHECKS = 0;-- ------------------------------ Table structure for hibernate_sequence-- ----------------------------DROP TABLE IF EXISTS `hibernate_sequence`;CREATE TABLE `hibernate_sequence` ( `next_val` bigint(0) NULL DEFAULT NULL) ENGINE = MyISAM AUTO_INCREMENT = 1 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Fixed;-- ------------------------------ Records of hibernate_sequence-- ----------------------------INSERT INTO `hibernate_sequence` VALUES (1);INSERT INTO `hibernate_sequence` VALUES (1);-- ------------------------------ Table structure for role-- ----------------------------DROP TABLE IF EXISTS `role`;CREATE TABLE `role` ( `id` bigint(0) NOT NULL, `name` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of role-- ----------------------------INSERT INTO `role` VALUES (1, &#x27;ROLE_NORMAL&#x27;);INSERT INTO `role` VALUES (2, &#x27;ROLE_ADMIN&#x27;);-- ------------------------------ Table structure for user-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` ( `id` bigint(0) NOT NULL, `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of user-- ------------------------------ ------------------------------ Table structure for user_roles-- ----------------------------DROP TABLE IF EXISTS `user_roles`;CREATE TABLE `user_roles` ( `user_id` bigint(0) NULL DEFAULT NULL, `roles_id` bigint(0) NULL DEFAULT NULL, INDEX `FKj9553ass9uctjrmh0gkqsmv0d`(`roles_id`) USING BTREE, INDEX `FK55itppkw3i07do3h7qoclqd4k`(`user_id`) USING BTREE, CONSTRAINT `FK55itppkw3i07do3h7qoclqd4k` FOREIGN KEY (`user_id`) REFERENCES `users` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT, CONSTRAINT `FKj9553ass9uctjrmh0gkqsmv0d` FOREIGN KEY (`roles_id`) REFERENCES `role` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of user_roles-- ----------------------------INSERT INTO `user_roles` VALUES (1, 2);INSERT INTO `user_roles` VALUES (1, 1);-- ------------------------------ Table structure for users-- ----------------------------DROP TABLE IF EXISTS `users`;CREATE TABLE `users` ( `id` bigint(0) NOT NULL, `username` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, `password` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL, PRIMARY KEY (`id`) USING BTREE) ENGINE = InnoDB CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;-- ------------------------------ Records of users-- ----------------------------INSERT INTO `users` VALUES (1, &#x27;chenyicai&#x27;, &#x27;$2a$10$hZG8XjmuAcuY.izAj0D7wuQIvPDdwdz.y4KcbGPI18Mri1hx1FWA6&#x27;);SET FOREIGN_KEY_CHECKS = 1; 3、创建新工程并导入依赖及实体类 在创建一个SpringBoot工程之后我们需要引入Security和JWT必须的依赖 12345678910&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt; &lt;artifactId&gt;jjwt&lt;/artifactId&gt; &lt;version&gt;0.9.0&lt;/version&gt;&lt;/dependency&gt; 在配置文件中配置数据库信息 123456789101112131415161718192021222324spring: datasource: driver-class-name: com.mysql.cj.jdbc.Driver url: jdbc:mysql://localhost:3306/jwtdemo?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true username: chenyicai password: cyc1234 ackson: serialization: indent_output: trueserver: port: 8086#日志级别（一般设置为INFO）logging: level: cn: edu: guet: mapper: debug org: springframework: security: infomybatis: type-aliases-package: cn.edu.guet.entity mapper-locations: classpath:mapper/*.xml 创建用户以及身份实体类 Users类：（省略 getset 方法） 此处所创建的 User 类继承了 Spring Security 的 UserDetails 接口，从而成为了一个符合 Security 安全的用户，即通过继承 UserDetails，即可实现 Security 中相关的安全功能。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class User implements UserDetails &#123; private Long id; private String username; private String password; private List&lt;Role&gt; roles; @Override public Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123; List&lt;GrantedAuthority&gt; authorities = new ArrayList&lt;&gt;(); for (Role role : roles) &#123; authorities.add( new SimpleGrantedAuthority( role.getName() ) ); &#125; return authorities; &#125; @Override public String getUsername() &#123; return username; &#125; @Override public String getPassword() &#123; return password; &#125; @Override public boolean isAccountNonExpired() &#123; return true; &#125; @Override public boolean isAccountNonLocked() &#123; return true; &#125; @Override public boolean isCredentialsNonExpired() &#123; return true; &#125; @Override public boolean isEnabled() &#123; return true; &#125;&#125; Role类：（省略 getset 方法） 1234567public class Role &#123; private Long id; private String name;&#125; 4、JWT工具类该工具类主要用于对 JWT Token 进行各项操作，比如生成Token、验证Token、刷新Token 等 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374@Componentpublic class JwtTokenUtils implements Serializable &#123; private static final long serialVersionUID = -5625635588908941275L; private static final String CLAIM_KEY_USERNAME = &quot;sub&quot;; private static final String CLAIM_KEY_CREATED = &quot;created&quot;; private static final String CLAIM_KEY_AUTHORITIES=&quot;authorities&quot;; // 生成token public String generateToken(UserDetails userDetails) &#123; Map&lt;String, Object&gt; claims = new HashMap&lt;&gt;(); claims.put( CLAIM_KEY_USERNAME, userDetails.getUsername()); claims.put(CLAIM_KEY_CREATED, new Date()); return generateToken(claims); &#125; // 验证token public boolean validateToken(String token, UserDetails userDetails) &#123; String username = getUserNameFromToken(token); return !isTokenExpired(token); &#125; // 刷新token public String refreshToken(String token)&#123; Claims claims = getClaimsFromToken(token); claims.put(CLAIM_KEY_CREATED,new Date()); return generateToken(claims); &#125; // 验证token是否失效 public boolean isTokenExpired(String token)&#123; Date expireDate = getExpiredDateFromToken(token); return expireDate.before(new Date()); &#125; // 从token中获取过期时间 public Date getExpiredDateFromToken(String token) &#123; Claims claims = getClaimsFromToken(token); return claims.getExpiration(); &#125; // 从token中获取用户名 public String getUserNameFromToken(String token)&#123; String username; try&#123; Claims claims = getClaimsFromToken(token); username = claims.getSubject(); &#125; catch (Exception e) &#123; username = null; &#125; return username; &#125; // 从token中获取荷载 private Claims getClaimsFromToken(String token)&#123; Claims claims = null; try &#123; claims = Jwts.parser() .setSigningKey(Const.SECRET) .parseClaimsJws(token) .getBody(); &#125; catch (Exception e)&#123; e.printStackTrace(); &#125; return claims; &#125; // 生成过期时间 private Date generateExpirationDate() &#123; return new Date(System.currentTimeMillis()+Const.EXPIRATION_TIME*1000); &#125; // 根据荷载生成token String generateToken(Map&lt;String, Object&gt; claims) &#123; return Jwts.builder() .setClaims(claims) .setExpiration(generateExpirationDate()) .signWith(SignatureAlgorithm.HS512, Const.SECRET ) .compact(); &#125;&#125; 这里还有一个常量类，存储了JWT的一些常量信息 123456789101112public class Const &#123; // 5天(以毫秒ms计) public static final long EXPIRATION_TIME = 432_000_000; // JWT密码 public static final String SECRET = &quot;CodeSheepSecret&quot;; // Token前缀 public static final String TOKEN_PREFIX = &quot;Bearer&quot;; // 存放Token的Header Key public static final String HEADER_STRING = &quot;Authorization&quot;;&#125; 5、Token过滤器用于每次外部对接口请求时的Token处理 1234567891011121314151617181920212223242526272829303132333435363738394041public class JwtFilter extends OncePerRequestFilter &#123; @Autowired private UserDetailsService userDetailsService; @Autowired private JwtTokenUtils jwtTokenUtil; @Override protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException &#123; // 确认是否能根据key拿到value String authHeader = httpServletRequest.getHeader( Const.HEADER_STRING ); if (authHeader == null) &#123; authHeader =Const.TOKEN_PREFIX+&quot; &quot;+httpServletRequest.getHeader(&quot;token&quot;); &#125; // 判断登录用户的token不为空和是Bearer开头的 if (authHeader != null &amp;&amp; authHeader.startsWith( Const.TOKEN_PREFIX )) &#123; // 取到token final String authToken = authHeader.substring( Const.TOKEN_PREFIX.length() ); // 从用户请求携带的token获取用户名，能取到证明token除了时间以外都合法了 String username = jwtTokenUtil.getUserNameFromToken(authToken); System.out.println(username); // token 存在用户名但没有认证的 if (username != null &amp;&amp; SecurityContextHolder.getContext().getAuthentication() == null) &#123; UserDetails userDetails = this.userDetailsService.loadUserByUsername(username); // 根据userDetails验证了token是否有效（验证时间是否过期和当前用户名是否匹配） if (jwtTokenUtil.validateToken(authToken, userDetails)) &#123; // 我们的token，框架是不认识的，token有效就转化构建 UsernamePasswordAuthenticationToken表示认证通过和进行相关授权 UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken( userDetails, null, userDetails.getAuthorities()); authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails( httpServletRequest)); // 设置了认证主体，到UsernamePasswordAuthenticationFilter就不会拦截，因为你应该带有了它的token SecurityContextHolder.getContext().setAuthentication(authentication); &#125; &#125; &#125; // 继续执行其他过滤器 filterChain.doFilter(httpServletRequest, httpServletResponse); &#125;&#125; 6、Service层业务操作主要是登录以及注册的业务 首先是AuthService接口： 1234public interface AuthService &#123; User register( User userToAdd ); String login( String username, String password );&#125; AuthServiceImpl实现类： 123456789101112131415161718192021222324252627282930313233343536373839@Servicepublic class AuthServiceImpl implements AuthService &#123; @Autowired private AuthenticationManager authenticationManager; @Autowired private UserDetailsService userDetailsService; @Autowired private JwtTokenUtil jwtTokenUtil; @Autowired private UserRepository userRepository; // 登录 @Override public String login( String username, String password ) &#123; UsernamePasswordAuthenticationToken upToken = new UsernamePasswordAuthenticationToken( username, password ); final Authentication authentication = authenticationManager.authenticate(upToken); SecurityContextHolder.getContext().setAuthentication(authentication); final UserDetails userDetails = userDetailsService.loadUserByUsername( username ); final String token = jwtTokenUtil.generateToken(userDetails); return token; &#125; // 注册 @Override public User register( User userToAdd ) &#123; final String username = userToAdd.getUsername(); if( userRepository.findByUsername(username)!=null ) &#123; return null; &#125; BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(); final String rawPassword = userToAdd.getPassword(); userToAdd.setPassword( encoder.encode(rawPassword) ); return userRepository.save(userToAdd); &#125;&#125; 然后是 UserService 实现类，它实现了 UserDetailsService，可用于在登录认证时检验用户的身份 123456789101112131415161718192021@Servicepublic class UserService implements UserDetailsService &#123; @Autowired UserMapper userMapper; @Override public UserDetails loadUserByUsername(String s) throws UsernameNotFoundException &#123; User user = userMapper.findByUsername(s); List&lt;Role&gt; roleList =userMapper.findRoleByUsername(s); user.setRoles(roleList); System.out.println(user.getId()); System.out.println(user.getUsername()); System.out.println(user.getPassword()); System.out.println(user.getAuthorities()); System.out.println(user.getRoles()); if (user == null) &#123; throw new UsernameNotFoundException(&quot;用户不存在&quot;); &#125; return user; &#125;&#125; 7、Spring Security配置类编写这是比较重要的一点，这里决定了拦截的页面以及其他的一些操作。这是一个高度综合的配置类，主要是通过重写 WebSecurityConfigurerAdapter 的部分 configure 配置，来实现用户自定义的部分。 123456789101112131415161718192021222324252627282930313233343536373839404142@Configuration@EnableWebSecurity@EnableGlobalMethodSecurity(prePostEnabled=true)public class WebSecurityConfig extends WebSecurityConfigurerAdapter &#123; @Autowired private UserService userService; @Bean public JwtFilter authenticationTokenFilterBean() throws Exception &#123; return new JwtFilter(); &#125; @Bean public AuthenticationManager authenticationManagerBean() throws Exception &#123; return super.authenticationManagerBean(); &#125; @Override protected void configure( AuthenticationManagerBuilder auth ) throws Exception &#123; auth.userDetailsService( userService ).passwordEncoder( new BCryptPasswordEncoder() ); &#125; @Override protected void configure( HttpSecurity httpSecurity ) throws Exception &#123; httpSecurity.csrf().disable() .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and() .authorizeRequests() .antMatchers(HttpMethod.OPTIONS, &quot;/**&quot;).permitAll() // OPTIONS请求全部放行 .antMatchers(HttpMethod.POST, &quot;/authentication/**&quot;).permitAll() //登录和注册的接口放行，其他接口全部接受验证 .antMatchers(HttpMethod.POST).authenticated() .antMatchers(HttpMethod.PUT).authenticated() .antMatchers(HttpMethod.DELETE).authenticated() .antMatchers(HttpMethod.GET).authenticated(); // 使用前文自定义的 Token过滤器 httpSecurity .addFilterBefore(authenticationTokenFilterBean(), UsernamePasswordAuthenticationFilter.class); httpSecurity.headers().cacheControl(); &#125;&#125; 8、接下来编写Controller类进行测试首先是登陆注册的类： 12345678910111213141516171819@RestControllerpublic class JwtAuthController &#123; @Autowired private AuthService authService; // 登录 @RequestMapping(value = &quot;/authentication/login&quot;, method = RequestMethod.POST) public String createToken( String username,String password ) throws AuthenticationException &#123; return authService.login( username, password ); &#125; // 注册 @RequestMapping(value = &quot;/authentication/register&quot;, method = RequestMethod.POST) public User register( @RequestBody User addedUser ) throws AuthenticationException &#123; return authService.register(addedUser); &#125;&#125; 然后是测试权限的类： 1234567891011121314151617@RestControllerpublic class TestController &#123; // 测试普通权限 @PreAuthorize(&quot;hasAuthority(&#x27;ROLE_NORMAL&#x27;)&quot;) @RequestMapping( value=&quot;/normal/test&quot;, method = RequestMethod.GET ) public String test1() &#123; return &quot;ROLE_NORMAL /normal/test接口调用成功！&quot;; &#125; // 测试管理员权限 @PreAuthorize(&quot;hasAuthority(&#x27;ROLE_ADMIN&#x27;)&quot;) @RequestMapping( value = &quot;/admin/test&quot;, method = RequestMethod.GET ) public String test2() &#123; return &quot;ROLE_ADMIN /admin/test接口调用成功！&quot;; &#125;&#125; 9、现在我们进行测试 首先测试能否正常登录并获取到Token可以看到在账号密码正确的情况下，能返回一个Token，接下来只要访问网页时带上这个Token，就可以顺利进行访问 接下来测试能否正常访问网页首先是不带Token的情况：很明显，被拒绝访问了。接下来我们测试一下携带Token的情况：可以成功访问。","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringSecurity","slug":"java/SpringSecurity","permalink":"http://cyc0819.top/categories/java/SpringSecurity/"},{"name":"JWT","slug":"java/JWT","permalink":"http://cyc0819.top/categories/java/JWT/"}],"tags":[{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"http://cyc0819.top/tags/SpringSecurity/"},{"name":"JWT","slug":"JWT","permalink":"http://cyc0819.top/tags/JWT/"}]},{"title":"我们还有必要深入学习jQuery吗","slug":"2021-11-17-我们还有必要深入学习jQuery吗","date":"2021-11-17T15:27:41.000Z","updated":"2021-12-08T09:38:56.041Z","comments":false,"path":"2021/11/17/2021-11-17-我们还有必要深入学习jQuery吗/","link":"","permalink":"http://cyc0819.top/2021/11/17/2021-11-17-%E6%88%91%E4%BB%AC%E8%BF%98%E6%9C%89%E5%BF%85%E8%A6%81%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0jQuery%E5%90%97/","excerpt":"","text":"我们还有必要深入学习 jQuery 吗表达想法前几天在某个视频平台看到一个博主的视频，该博主对于『 我们还有必要深入学习 jQuery 吗？』这个问题做出了一个很肯定的答案：就是没有必要。 而他对于这个结论并也不是空穴来风，同样是做出了一系列的解释。比如说：jQuery 已经过时了、Vue.js以及React.js这样的前端框架能更好地实现jQuery所能实现的功能等等。 当然，作为该博主的个人想法，评论区自然是炸开了锅，有人赞同该博主的言论，而也有人对该博主的言论表示不敢苟同。这里我说说我个人的想法： 我认为 jQuery 虽然是一个多年以前的技术，但是他作为学习路上所必须经历的一段经历，我认为还是有必要进行学习的，但是也不用过度深入，在该阶段花费过多的时间。 jQuery 的开发模式和 Vue.js 等框架的开发模式是不同的两种开发模式，只有体会到两种开发模式的不同之处，我们才能更深入地理解如今所流行的前端框架所流行的原因，以及 jQuery 落后的原因等等。同样在若干年以后，可能会有更多新的前端框架的出现，替代现在地 vue.js、react.js 等等，到时候，经历过 vue.js 时代的我们，是不是又能从一种新的层面看到多种开发模式地区别呢？我们所了解到的是：为什么是这样子？而不是本来就是这样子。永远保持好奇与探索，对一个开发者来说是极其重要的。 而对于 js ，我认为我们应该重点对原生的js进行学习，毕竟 jQuery，vue，react 这些框架都是在js的基础上进行封装的，所以说我们在使用这些框架的时候，实际上我们还是在使用 js ，但是方便就方便在这些框架的一些优秀的封装类帮我们实现了 js 中很多复杂操作，我们只要按照框架所规定的语法进行编写，就能很方便的实现 js 中一些复杂的操作，这也是为什么框架技术能够如此流行的原因之一。 而我们不能只知道使用，而不知原理，这样子是走不远的，但是这并不表示我们就应该去生啃这些框架的源码，而是说我们应该学好 js 的语法，这样子在我们使用时也能很好地理解框架的原理，在使用的过程中，逐步地理解框架。 jQuery 有什么优点？抛开现在流行的 vue 等前端框架不谈，我们来说说 jQuery 时代，他都有哪些有优点。 能很好的操作 DOM有这样一个例子，如果我要修改一个元素的样式，我用原生的js是这样子完成地： 12var dom=document.getElementById(&#x27;test&#x27;)dom.style.color=&#x27;red&#x27; 而我用 jQuery 来替代上面地代码 1$(&#x27;#test&#x27;).css(&#x27;color&#x27;,&#x27;red&#x27;); 相对于原生的 js 来说，我们的代码精简了许多，在 jQuery 中我们用$来替代了原生 js 中的document.getElementById这一行语句，所以代码精简了许多。 极其方便地 ajax 操作在jQuery中，如果我们要使用ajax访问后台的数据，我们可以这样子实现： 123456$.ajax(&#123; url:&#x27;/index&#x27;, success:function(res)&#123; console.log(&quot;请求成功&quot;) &#125;&#125;) 而如果我们要在原生的js中使用 ajax ，那别提有多复杂了，我们首先得创建一个异步对象，然后再设置请求的 url 以及参数，然后发送请求，最后我们需要将其注册到一个事件上，才能进行访问。虽然我们也能将其封装成一个可重复使用的方法，但是对于 jQuery 来说，他还是太麻烦了。 更方便的页面动效通常我们的界面需要用到一些很有趣的画面，我们在 jQuery 中可以这样子实现： 1$(&quot;#test&quot;).animate(&#123;left:&#x27;100px&#x27;&#125;) 以上的这些操作，说实话在 js 中我们都可以实现，而 jQuery 作为一个很好的 js 框架，他所封装的很多函数可以大大方便我们的操作，所以这也就是 jQuery 为什么会流行的原因之一。我们自己也能封装一个这样的代码库，只是我们可能不能做到这么优秀，也不一定有时间和精力来做这样的工作。 MVVM 框架是怎么替代 jQuery 的？现在的 MVVM 框架，他们都引入了几个新的概念：模块化、组件化。并采用了虚拟 DOM 的方式来替代原来的 DOM 操作，在这些框架中，数据和视图实现了分离，对数据的操作不在需要引用响应的 DOM 对象，达到了编程世界中一个共同的目标——解耦。 针对 DOM 操作在 MVVM 框架中，我们基本看不到 DOM 操作的影子，是因为他们采用了一种绑定元素渲染的方式，来绑定我们的视图以及数据。比如说 vue 框架中的v-model。但是 DOM 操作不可能完全不需要，某些特殊情况还是会用到。 针对 ajax 操作在 ajax 操作方面，基本上是被 axios 这样的库给替代了，而且所实现的功能与 ajax 都差不多，而且能更好地契合这些框架。 针对界面动效CSS 3已经能很好地实现界面动态地效果。而且有很多优秀的动效库，能完美适配现在流行的框架，并能更好的实现很多好看的动效。 感想可能在若干年后地某一天，又会出现更新的比现在更好的框架，那时候又会更加方便我们的使用。而我们同样要顺应时代地潮流，去学习这些新的技术，从入了编程这一行开始，我就深知这是一个需要不断学习知识，更新自己的行业，如果停止学习，就会被高速发展的互联网行业抛弃。所以这是一个很『内卷』的行业，我喜欢这种挑战，也渴望能从这种挑战中获得一个不断进步的自己。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/tags/%E9%9A%8F%E7%AC%94/"},{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"Service中包含哪些代码","slug":"2021-11-12-Service中包含哪些代码","date":"2021-11-12T15:49:01.000Z","updated":"2021-12-08T09:31:05.817Z","comments":false,"path":"2021/11/12/2021-11-12-Service中包含哪些代码/","link":"","permalink":"http://cyc0819.top/2021/11/12/2021-11-12-Service%E4%B8%AD%E5%8C%85%E5%90%AB%E5%93%AA%E4%BA%9B%E4%BB%A3%E7%A0%81/","excerpt":"","text":"Service中包含哪些代码1、简介Service层中 = 核心功能(几十行 上百代码) + 额外功能(附加功能) 核心功能业务运算DAO调用 额外功能 不属于业务 可有可无 代码量很小 以及：事务、日志、性能… Service层，作为程序的业务层面，其中最重要的必然是程序的业务流程，只有对程序的业务流程有足够的了解，才能写出优秀的Service层代码。 不冗余，是一个程序员代码水平的一个体现。 2、接口为什么要先写接口？接口的作用是什么？ 这里我引用一句话: 1接口主要用于描述类具有什么功能，而并不给出每个功能的具体实现。一个类可以实现一个或多个接口，并在需要接口的地方，随时使用实现了相应接口的对象。——《Java核心技术卷一》 这句话所描述的是接口的扩展性。简而言就是：接口是一个统一的插座，如果有需要我们就可以直接进行调用，实现了即插即用。 例如：有一个登录功能需要我们去实现，而该系统又有多种登陆方式，我们不可能每种接口都写一个Service代码给Controller进行调用，这样是十分繁琐的。而我们将多种登陆的方式统一成一个接口，然后根据用户的需求来分配最后实际的实现类。此时对于使用者来说，他们只需要关注的是登陆这个方法，整个登陆操作变得十分灵活，根据不同的场景使用不同的方式登陆。 对于开发者来说，接口中清晰地列出了所有地方法，对于后期的维护以及修改也是有极大的方便。 3、Service之间的互相调用Service层之间可以相互调用吗？ 这个问题相信很多人都有过思考，理论上来讲是不应该相互进行调用的，因为Service层的存在的一个很重要的目的就是 解耦 。 将业务层的每一个业务独立出来，以至于他们之间不相互影响，能够实现代码的优化，否则多种业务的代码混在一起，长久之后谁都看不出来代码的逻辑。所以说Service层就实现了这一个很重要的功能。 所以如果Service层之间的代码相互调用，是不是会是一种倒退呢？ 有些人可能会问，有些业务中确实是会使用到其他业务中的代码，那这部分代码怎么办？重新写？那是不可能的，这又犯了冗余这个错误。所以我们该怎么解决呢？ 首先，我们要清楚，这个情况是出于Service间有通用的逻辑，而不是通用的业务，每个Service对应一个业务，业务之间应该有明确的分界，不然会出现业务间的耦合，这是设计的不合理。 既然是通用的逻辑，我们是不是又可以把他们抽象出来，独立成一个工具类，当我们需要的时候直接进行调用这个工具类就可以了呢？ 所以我个人认为Service层之间是不建议相互调用的。 4、需要向Conrtroller层展示业务吗？当我们实现一个登录功能的时候，Controller层，调用Service层，往往我以前的写法是，Service返回登录成功或者失败的代码，然后Controller进行一个判断，判断是否成功登录，然后再向前端返回信息。这样子的写法有个问题，Controller判断的一个过程，算不算是业务？如果算，是不是Controller层又接触到了业务？ 又回到了之前的问题，为什么要有Service层？ 所以说，我们应该让Controller层尽可能少的接触到业务，所以我们的写法可以优化为，再Service层做完所有业务相关的工作，最后返回给Controller层的是一个开箱即用的接口，这样子是不是可以避免Controller层接触到业务相关的代码呢？这就又符合了我们使用Service层的初衷了。 5、最后在看了一些文章之后，个人的一些小小观点。","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"}]},{"title":"算法学习_leetcode设计模块","slug":"2021-10-09-算法学习_leetcode设计模块","date":"2021-10-09T06:39:20.000Z","updated":"2021-12-08T09:30:51.311Z","comments":false,"path":"2021/10/09/2021-10-09-算法学习_leetcode设计模块/","link":"","permalink":"http://cyc0819.top/2021/10/09/2021-10-09-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_leetcode%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%9D%97/","excerpt":"","text":"leetcode设计模块1、子矩形查询题目lettcode-1476题难度：中等 解题思路按照题目的要求，我们需要根据输入的坐标，拿到该坐标的值。以及根据输入的两个坐标和一个值，修改两个坐标之间的值为所给出来的值。所以实现这两个功能首先我们需要一个二维数组。拿到坐标的值并不难。主要是修改两个坐标之间的值。因为输入的两个坐标，假如是(1,1)和(3,4) ,所以可以看出来纵坐标是修改1和4之间的值，然后横坐标是修改1，3之间的值。所以通过遍历可以遍历第一行的1-4列，第二行的1-4列一直循环下去，最终修改所有的值。 具体代码12345678910111213141516171819class SubrectangleQueries &#123; int[][] rectangle; public SubrectangleQueries(int[][] rectangle) &#123; this.rectangle=rectangle; &#125; public void updateSubrectangle(int row1, int col1, int row2, int col2, int newValue) &#123; for (int i=row1;i&lt;=row2;i++)&#123; for (int j=col1;j&lt;=col2;j++)&#123; rectangle[i][j]=newValue; &#125; &#125; &#125; public int getValue(int row, int col) &#123; return rectangle[row][col]; &#125;&#125; 2、TinyURL 的加密与解密题目lettcode-535题难度：中等 解题思路为了加密 URL，我们使用计数器 (ii) ，每遇到一个新的 URL 都加一。我们将 URL 与它的次数 ii 放在哈希表 HashMap 中，这样我们在稍后的解密中可以轻易地获得原本的 URL 具体代码12345678910111213141516public class Codec &#123; Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;(); int i = 0; // Encodes a URL to a shortened URL. public String encode(String longUrl) &#123; map.put(i,longUrl); return &quot;http://tinyurl.com/&quot; + i++; &#125; // Decodes a shortened URL to its original URL. public String decode(String shortUrl) &#123; return map.get(Integer.parseInt(shortUrl.replace(&quot;http://tinyurl.com/&quot;, &quot;&quot;))); &#125;&#125; 3、二叉搜索树迭代器题目lettcode-173题难度：中等 解题思路二叉树，我们可以使用一个TreeNode来实现，其中我们将遍历到的值错放到一个list集合中去。二叉树的中序遍历，遍历顺序是：左节点-中节点-右节点。所以我们在方法中输入一个二叉树，重复进行遍历，即可得到最后中序遍历的结果。 具体代码1234567891011121314151617181920212223242526272829class BSTIterator &#123; private int index; private List&lt;Integer&gt; arr; public BSTIterator(TreeNode root) &#123; index = 0; arr = new ArrayList&lt;Integer&gt;(); inorderTraversal(root, arr); &#125; public int next() &#123; return arr.get(index++); &#125; public boolean hasNext() &#123; return index &lt; arr.size(); &#125; private void inorderTraversal(TreeNode root, List&lt;Integer&gt; arr) &#123; if (root == null) &#123; return; &#125; //实现中序遍历 左-中-右 inorderTraversal(root.left, arr); arr.add(root.val); inorderTraversal(root.right, arr); &#125;&#125; 4、设计一个支持增量操作的栈题目lettcode-1381题难度：中等 解题思路题目要求这个栈需要有一个最大数量，所以我们需要定义一个变量来限制栈的大小。如果没有达到最大数量，就将新元素添加到栈的顶端，否则就不允许添加。当删除栈中元素的时候，首先删除栈顶端的元素，如果栈中没有东西，就返回一个 -1更新栈中的元素的时候首先判断栈中的数量与输入的k的大小关系，如果k大，就将栈中元素数量作为更新的数量，由于index是由0开始的，所以数量就是index+1，否则就是以k作为数量。 具体代码123456789101112131415161718192021222324252627282930313233343536373839class CustomStack &#123; int maxSize; int[] myStack=null; int head=-1; public CustomStack(int maxSize) &#123; myStack=new int[maxSize]; this.maxSize=maxSize; &#125; public void push(int x) &#123; if (head==myStack.length-1)&#123; return; &#125;else &#123; myStack[++head]=x; &#125; &#125; public int pop() &#123; if (head==-1)&#123; return -1; &#125;else&#123; return myStack[head--]; &#125; &#125; public void increment(int k, int val) &#123; int min; if (head&lt;k)&#123; min=head+1; &#125;else&#123; min=k; &#125; for (int i=0;i&lt;min;i++)&#123; myStack[i]+=val; &#125; &#125;&#125; 5、在受污染的二叉树中查找元素题目lettcode-1261题难度：中等 解题思路通过题目我们可以看出，根节点的左子树是2x+1，右子树是2x+2，所以以此类推下去，就能还原出二叉树。首先得判断是否有子节点。然后如果一个节点没有父子树，就说明他是根节点，就将他设为0 具体代码1234567891011121314151617181920212223242526272829303132class FindElements &#123; Set&lt;Integer&gt; set=new HashSet&lt;&gt;(); public FindElements(TreeNode root) &#123; rebuildTree(root, null); &#125; public boolean find(int target) &#123; // 判断 Set 集合是否包含指定的对象 return set.contains(target); &#125; private void rebuildTree(TreeNode root, TreeNode parent) &#123; if (root == null) &#123; return; &#125; // 如果没有父节点，就设为0 // 否则就执行下面的条件 if (parent == null) &#123; root.val = 0; &#125; else &#123; root.val = root == parent.left ? (parent.val &lt;&lt; 1) + 1 : (parent.val &lt;&lt; 1) + 2; &#125; // 将结果添加到set中 set.add(root.val); // 重复执行上面的内容 rebuildTree(root.left, root); rebuildTree(root.right, root); &#125;&#125; 6、扁平化嵌套列表迭代器题目lettcode-341题难度：中等 解题思路从题目上看，题目所输入的数据就是一个嵌套的数组，一个数组中可以存放整数，也可以存放一个新的数组。而当我们进行遍历时需要先遍历完一个数组，然后再遍历后面的数组，相当于把多个数组中的值给摊开成一个只有整数的数组。所以我们在遍历时，将遍历的方法抽成一个独立的方法。如果碰到嵌套数组，我们就再次对遍历的方法进行调用，依次重复多次，就可以实现对多个嵌套数组的遍历。 具体代码123456789101112131415161718192021222324252627282930public class NestedIterator implements Iterator&lt;Integer&gt; &#123; List&lt;Integer&gt; list = new ArrayList&lt;&gt;(); int index=0; public NestedIterator(List&lt;NestedInteger&gt; nestedList) &#123; add(nestedList); &#125; private void add(List&lt;NestedInteger&gt; nestedList) &#123; for (NestedInteger nestedInteger : nestedList) &#123; if (nestedInteger.isInteger()) &#123; list.add(nestedInteger.getInteger()); &#125; else &#123; //重新遍历嵌套的数组 add(nestedInteger.getList()); &#125; &#125; &#125; @Override public Integer next() &#123; return list.get(index++); &#125; @Override public boolean hasNext() &#123; return index&lt;list.size(); &#125;&#125; 7、实现 Trie (前缀树)题目lettcode-208题难度：中等 解题思路前缀树，又叫做字典树。通过阅读题目，这一题我们可以用List数组来实现。其中添加元素可以用add方法来实现，而contains方法可以用来判断数组中书否有该元素。startsWith方法即可用用于判断数组中的元素是否包含某一个值。 具体代码123456789101112131415161718192021222324252627282930public class Trie &#123; private List&lt;String&gt; list; private int index = 0; public Trie() &#123; list = new ArrayList&lt;&gt;(); &#125; public void insert(String word) &#123; list.add(word); &#125; public boolean search(String word) &#123; if (list.contains(word)) &#123; return true; &#125; else &#123; return false; &#125; &#125; public boolean startsWith(String prefix) &#123; for (String lists:list)&#123; if (lists.startsWith(prefix))&#123; return true; &#125; &#125; return false; &#125;&#125; 8、皇位继承顺序题目lettcode-1600题难度：中等 解题思路这题一开始读起来有点晦涩难懂，和后面读起来其实就是类似于我国古代的世袭机制。首先是皇帝，然后长子次子，但是长子之后的皇帝应该是长子的后代，如果长子没有后代了，皇帝才会传给次子。类似这样子循环下去。然后我们需要每个人有一个列表来存储他的后代们。所以可以使用HashMap来实现这一功能。然后该Map的键是String类型，值是一个list类型。所以比如说皇帝A，他的A就是键，他的后代就构成了Map的值list。死亡人员我们可以用一个Set来实现，因为他是不可重复的，一个人也不可能死很多次，所以我们将死亡的人员放到其中。最后是排序。首先判断在set中的人员，将他们删除，然后循环遍历List中的值。首先我们输入皇帝的名字，然后就会遍历皇帝的后代，遍历到皇帝的第一个后代，又会遍历到他的第一个后代的后代，一直到完，就是深度优先遍历。所以我们可以将便利的代码抽成一个独立的方法，以供重复进行调用，实现这个功能。 具体代码12345678910111213141516171819202122232425262728293031323334353637public class ThroneInheritance &#123; private String kingName; private Map&lt;String, List&lt;String&gt;&gt; map = new HashMap&lt;&gt;(); //不可重复 private Set&lt;String&gt; deathSet = new HashSet&lt;&gt;(); public ThroneInheritance(String kingName) &#123; this.kingName=kingName; map.put(kingName,new ArrayList&lt;&gt;()); &#125; public void birth(String parentName, String childName) &#123; map.get(parentName).add(childName); map.put(childName,new ArrayList&lt;&gt;()); &#125; public void death(String name) &#123; deathSet.add(name); &#125; public List&lt;String&gt; getInheritanceOrder() &#123; List&lt;String&gt; list=new ArrayList&lt;&gt;(); add(list,kingName); return list; &#125; public void add(List&lt;String&gt; list, String name)&#123; if (!deathSet.contains(name))&#123; list.add(name); &#125; //遍历该人物的子孙 for (String names:map.get(name))&#123; add(list,names); &#125; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"RabbitMQ入门使用","slug":"2021-10-06-RabbitMQ入门使用","date":"2021-10-06T13:49:01.000Z","updated":"2021-12-08T09:30:44.667Z","comments":false,"path":"2021/10/06/2021-10-06-RabbitMQ入门使用/","link":"","permalink":"http://cyc0819.top/2021/10/06/2021-10-06-RabbitMQ%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","excerpt":"","text":"RabbitMQ入门使用1、同步、异步通信我们服务之间的通信，一般分为同步和异步两种方式。 同步就是：当两个服务间通信时，必须要每一步按照顺序进行之后再进行下一步的内容。看上去同步可以立即得到结果，好像很好。但是这样的通信方式往往就会产生一些问题。 耦合度较高。当我们加入新的需求时，需要修改很多的代码。 性能不好。因为每次都要等待上一个服务完成，所以会消耗很多时间，导致性能下降. 资源浪费。在等待服务完成的时候，不能释放资源，也不能做事情，就导致了资源的浪费。 级联失败。如果服务调用过程中一个环节出现错误，就会导致其他环节跟着出现错误。就像是多米诺骨牌一样。 异步就是：当两个服务间通信时，A将资料传给B的时候，就可以继续去做自己的事情，而不用一直等待B传送消息回来，在B有空的时候处理就可以。同时，异步通信解决了一些同步通信存在的问题：耦合度低，吞吐量提升，故障隔离 ，流量削峰。但是同时也带来了一些新的问题： 依赖于Broker的可靠性、安全性、吞吐能力 架构复杂了，业务没有明显的流程线，不好追踪管理 所以我们在使用的时候，应该根据实际情况来使用异步或者同步通信。 2、消息队列（MQ）简介MQ （MessageQueue），中文是消息队列，字面来看就是存放消息的队列。也就是事件驱动架构中的Broker。 消息队列中间件是分布式系统中重要的组件，主要解决应用耦合、异步消息、流量削锋等问题。实现高性能、高可用、可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。 2.1、常见的MQ以下就是四种我们常用的MQ以及它们之间的对比： 接下来我们就以RabbitMQ来作为我们学习的工具。 2.2、RabbitMQ介绍以及安装RabbitMQ是基于Erlang语言开发的开源消息通信中间件，官网地址：https://www.rabbitmq.com/ 由于它是基于Erlang语言开发的，所以我们必须安装Erlang语言的开发环境。为了省时间，我们这里直接在Dockers里面进行安装并做一个映射。步骤如下： 下载RabbitMQ的镜像1docker pull rabbitmq:3-management 安装mq123456789docker run \\ -e RABBITMQ_DEFAULT_USER=chenyicai \\ -e RABBITMQ_DEFAULT_PASS=123456 \\ --name mq \\ --hostname mq1 \\ -p 15672:15672 \\ -p 5672:5672 \\ -d \\ rabbitmq:3-management 然后我们的RabbitMQ就安装完成了，现在我们可以在浏览器输入服务器地址+15672进入RabbitMQ的控制台账号密码就是我们前面设置好的chenyicai和123456登录之后： 以下是RabbitMQ中的几个基本概念： channel：操作MQ的工具 exchange：路由消息到队列中 queue：缓存消息 virtual host：虚拟主机，是对queue、exchange等资源的逻辑分组 3、常见的消息模型3.1、官方给出的消息模型官方一共给出的五个MQ的Demo，分别对应了几种不同的用法： 基本消息队列（BasicQueue） 工作消息队列（WorkQueue） 发布订阅（Publish、Subscribe），又根据交换机类型不同分为三种： Fanout Exchange：广播 Direct Exchange：路由 Topic Exchange：主题 3.2、Hello World现在我们就在SpringBoot里面实现以下官方示例中的Hello World这个例子。官方的HelloWorld是基于最基础的消息队列模型来实现的，只包括三个角色： publisher：消息发布者，将消息发送到队列queue queue：消息队列，负责接受并缓存消息 consumer：订阅队列，处理队列中的消息 所以我们实现这个例子的步骤如下：基本消息队列的消息发送流程： 建立connection123456789ConnectionFactory factory = new ConnectionFactory();//设置连接参数，分别是：主机名、端口号、vhost、用户名、密码factory.setHost(&quot;8.129.212.155&quot;);factory.setPort(5672);factory.setVirtualHost(&quot;/&quot;);factory.setUsername(&quot;chenyicai&quot;);factory.setPassword(&quot;123456&quot;);//建立连接Connection connection = factory.newConnection(); 创建通道channel1Channel channel = connection.createChannel(); 利用channel声明队列1234//队列名String queueName = &quot;simple.queue&quot;;//队列的属性channel.queueDeclare(queueName, false, false, false, null); 利用channel向队列发送消息123String message = &quot;hello, rabbitmq!&quot;;channel.basicPublish(&quot;&quot;, queueName, null, message.getBytes());System.out.println(&quot;发送消息成功：【&quot; + message + &quot;】&quot;); 基本消息队列的消息接收流程： 建立connection 创建通道channel 利用channel声明队列 定义consumer的消费行为handleDelivery()利用channel将消费者与队列绑定12345678910channel.basicConsume(queueName, true, new DefaultConsumer(channel)&#123; @Override public void handleDelivery(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, byte[] body) throws IOException &#123; // 5.处理消息 String message = new String(body); System.out.println(&quot;接收到消息：【&quot; + message + &quot;】&quot;); &#125; &#125;);System.out.println(&quot;等待接收消息。。。。&quot;); 很显然如果每次使用消息队列都这样开关连接，那么是非常不好的一种现象，所以我们接下来就要使用Spring的一个框架，来更好地帮助我们对消息队列进行使用。 4、SpringAMQP4.1、什么是SpringAMQPSpringAmqp的官方地址：https://spring.io/projects/spring-amqp AMQP：是用于在应用程序之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。 SpringAMQP：是基于AMQP协议定义的一套API规范，提供了模板来发送和接受消息。包含两部分，其中Spring-AMQP是基础抽象，Spring-rabbit是底层的默认实现。 4.2、SpringAMQP实现Hello WorldSpring中已经集成了AMQP的依赖，所以我们只需要引入依赖就可以实现自动注入，具体步骤如下： 引入SpringAMQP的依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;&lt;/dependency&gt; 在publisher中编写一个yml配置文件，添加mq连接的信息1234567spring: rabbitmq: host: 8.129.212.155 # rabbitMQ的ip地址 port: 5672 # 端口 username: chenyicai password: 123456 virtual-host: / 在publisher服务中新建一个测试类，编写测试方法发送消息：12345678910111213@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringAmqpTest &#123; @Autowired private RabbitTemplate rabbitTemplate; @Test public void testSendMessage2SimpleQueue() &#123; String queueName = &quot;simple.queue&quot;; String message = &quot;hello, spring amqp!&quot;; rabbitTemplate.convertAndSend(queueName, message); &#125;&#125; 如果此时我们没有接受信息，信息就会存在mq的缓存区里面，如下: 在consumer中接受消息（consumer中也要创建连接配置文件）1234567@Componentpublic class SpringRabbitListener &#123; @RabbitListener(queues = &quot;simple.queue&quot;) public void listenSimpleQueue(String msg) &#123; System.out.println(&quot;消费者接收到simple.queue的消息：【&quot; + msg + &quot;】&quot;); &#125;&#125; 现在我们就完成了一个Hello World的例子的实现。结果如下：消息队列是阅后即焚的，是一个不可逆的过程。现在我们看看剩下的几个例子。 4.3、Work Queue 工作队列工作队列，可以提高消息处理速度，避免队列消息堆积他的逻辑图如下： 现在我们要来实现一个工作队列 在publisher服务中添加一个测试方法，循环发送50条消息到simple.queue队列12345678910111213141516@RunWith(SpringRunner.class)@SpringBootTestpublic class SpringAmqpTest &#123; @Autowired private RabbitTemplate rabbitTemplate; @Test public void testSendMessage2WorkQueue() throws InterruptedException &#123; String queueName = &quot;simple.queue&quot;; String message = &quot;hello, message__&quot;; for (int i = 1; i &lt;= 50; i++) &#123; rabbitTemplate.convertAndSend(queueName, message + i); Thread.sleep(20); &#125; &#125;&#125; 在consumer服务中添加一个消费者，也监听simple.queue：1234567891011121314@Componentpublic class SpringRabbitListener &#123; @RabbitListener(queues = &quot;simple.queue&quot;) public void listenWorkQueue1(String msg) throws InterruptedException &#123; System.out.println(&quot;消费者1接收到消息：【&quot; + msg + &quot;】&quot; + LocalTime.now()); Thread.sleep(20); &#125; @RabbitListener(queues = &quot;simple.queue&quot;) public void listenWorkQueue2(String msg) throws InterruptedException &#123; System.err.println(&quot;消费者2........接收到消息：【&quot; + msg + &quot;】&quot; + LocalTime.now()); Thread.sleep(200); &#125;&#125; 然后我们修改yml配置文件，添加以下内容12345spring: rabbitmq: listener: simple: prefetch: 1 #每次只能获取一条消息，处理完成才能获取下一个消息 然后我们进行测试，结果如下 两个消费者就会交替获取信息，而睡眠20毫秒的用户会比睡眠200毫秒的用户获取更多的信息。 4.4、发布（ Publish ）、订阅（ Subscribe ）发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了exchange（交换机）。常见exchange类型包括： Fanout：广播 Direct：路由 Topic：话题 注意：exchange负责消息路由，而不是存储，路由失败则消息丢失 4.4.1、发布订阅-Fanout ExchangeFanout Exchange 会将接收到的消息广播到每一个跟其绑定的queue 具体实现步骤如下： 在consumer服务声明Exchange、Queue、Binding在consumer服务常见一个类，添加@Configuration 注解，并声明FanoutExchange、Queue和绑定关系对象Binding123456789101112131415161718192021222324252627282930313233343536@Configurationpublic class FanoutConfig &#123; // itcast.fanout @Bean public FanoutExchange fanoutExchange()&#123; return new FanoutExchange(&quot;itcast.fanout&quot;); &#125; // fanout.queue1 @Bean public Queue fanoutQueue1()&#123; return new Queue(&quot;fanout.queue1&quot;); &#125; // 绑定队列1到交换机 @Bean public Binding fanoutBinding1(Queue fanoutQueue1, FanoutExchange fanoutExchange)&#123; return BindingBuilder .bind(fanoutQueue1) .to(fanoutExchange); &#125; // fanout.queue2 @Bean public Queue fanoutQueue2()&#123; return new Queue(&quot;fanout.queue2&quot;); &#125; // 绑定队列2到交换机 @Bean public Binding fanoutBinding2(Queue fanoutQueue2, FanoutExchange fanoutExchange)&#123; return BindingBuilder .bind(fanoutQueue2) .to(fanoutExchange); &#125;&#125; 在consumer服务的SpringRabbitListener类中，添加两个方法，分别监听fanout.queue1和fanout.queue21234567891011@Componentpublic class SpringRabbitListener &#123; @RabbitListener(queues = &quot;fanout.queue1&quot;) public void listenFanoutQueue1(String msg) &#123; System.out.println(&quot;消费者接收到fanout.queue1的消息：【&quot; + msg + &quot;】&quot;); &#125; @RabbitListener(queues = &quot;fanout.queue2&quot;) public void listenFanoutQueue2(String msg) &#123; System.out.println(&quot;消费者接收到fanout.queue2的消息：【&quot; + msg + &quot;】&quot;); &#125;&#125; 在publisher服务发送消息到FanoutExchange123456789@Test public void testSendFanoutExchange() &#123; // 交换机名称 String exchangeName = &quot;itcast.fanout&quot;; // 消息 String message = &quot;hello, every one!&quot;; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, &quot;&quot;, message); &#125; 测试，此时两个消费者都会受到这条消息 4.4.2、发布订阅-DirectExchangeDirect Exchange 会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（routes）。 每一个Queue都与Exchange设置一个BindingKey 发布者发送消息时，指定消息的RoutingKey Exchange将消息路由到BindingKey与消息RoutingKey一致的队列 具体实现步骤如下： 在consumer服务中，编写两个消费者方法，分别监听direct.queue1和direct.queue2。并利用@RabbitListener声明Exchange、Queue、RoutingKey 1234567891011121314151617@RabbitListener(bindings = @QueueBinding( value = @Queue(name = &quot;direct.queue1&quot;), exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT), key = &#123;&quot;red&quot;, &quot;blue&quot;&#125; )) public void listenDirectQueue1(String msg)&#123; System.out.println(&quot;消费者接收到direct.queue1的消息：【&quot; + msg + &quot;】&quot;); &#125; @RabbitListener(bindings = @QueueBinding( value = @Queue(name = &quot;direct.queue2&quot;), exchange = @Exchange(name = &quot;itcast.direct&quot;, type = ExchangeTypes.DIRECT), key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125; )) public void listenDirectQueue2(String msg)&#123; System.out.println(&quot;消费者接收到direct.queue2的消息：【&quot; + msg + &quot;】&quot;); &#125; 在publisher服务发送消息到DirectExchange123456789@Test public void testSendDirectExchange() &#123; // 交换机名称 String exchangeName = &quot;itcast.direct&quot;; // 消息 String message = &quot;hello, red!&quot;; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, &quot;red&quot;, message); &#125; 测试如下：两个都能收到red的消息，而我们现在换一种发送消息的方式看看，发送一个blue的消息，按照规定direct.queue2应该是没有消息的。确实是这个样子。 4.4.3、发布订阅-TopicExchangeTopicExchange与DirectExchange类似，区别在于routingKey必须是多个单词的列表，并且以 . 分割。Queue与Exchange指定BindingKey时可以使用通配符： #：代指0个或多个单词 *：代指一个单词 实现步骤如下： 在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2。并利用@RabbitListener声明Exchange、Queue、RoutingKey1234567891011121314151617@RabbitListener(bindings = @QueueBinding( value = @Queue(name = &quot;topic.queue1&quot;), exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC), key = &quot;china.#&quot; )) public void listenTopicQueue1(String msg)&#123; System.out.println(&quot;消费者接收到topic.queue1的消息：【&quot; + msg + &quot;】&quot;); &#125; @RabbitListener(bindings = @QueueBinding( value = @Queue(name = &quot;topic.queue2&quot;), exchange = @Exchange(name = &quot;itcast.topic&quot;, type = ExchangeTypes.TOPIC), key = &quot;#.news&quot; )) public void listenTopicQueue2(String msg)&#123; System.out.println(&quot;消费者接收到topic.queue2的消息：【&quot; + msg + &quot;】&quot;); &#125; 在publisher服务发送消息到TopicExchange123456789@Test public void testSendTopicExchange() &#123; // 交换机名称 String exchangeName = &quot;itcast.topic&quot;; // 消息 String message = &quot;中国新闻&quot;; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, &quot;china.news&quot;, message); &#125; 进行测试，此时两个消费者都能接收到消息 如果修改key的值，后面不为news时，topic.queue2将无法收到消息 123456789@Test public void testSendTopicExchange() &#123; // 交换机名称 String exchangeName = &quot;itcast.topic&quot;; // 消息 String message = &quot;中国新闻,一条&quot;; // 发送消息 rabbitTemplate.convertAndSend(exchangeName, &quot;china.new&quot;, message); &#125; 结果如下： 4.5、SpringAMQP-消息转换器在SpringAMQP的发送方法中，接收消息的类型是Object，也就是说我们可以发送任意对象类型的消息，SpringAMQP会帮我们序列化为字节后发送。 我们在consumer中利用@Bean声明一个队列： 1234567@Configurationpublic class FanoutConfig &#123; @Bean public Queue objectQueue()&#123; return new Queue(&quot;object.queue&quot;); &#125;&#125; 在publisher中发送消息以测试: 123456789@Test public void testSendMap() throws InterruptedException &#123; // 准备消息 Map&lt;String,Object&gt; msg = new HashMap&lt;&gt;(); msg.put(&quot;name&quot;, &quot;Jack&quot;); msg.put(&quot;age&quot;, 21); // 发送消息 rabbitTemplate.convertAndSend(&quot;object.queue&quot;, msg); &#125; 会发现在消息队列中我们传过去的是一堆乱码 其实就是java将我们的消息进行了一个序列化来进行传输，但是这样子十分不具有可读性，而且字符串较长，会影响到传输的效率。 Spring的对消息对象的处理是由org.springframework.amqp.support.converter.MessageConverter来处理的。而默认实现是SimpleMessageConverter，基于JDK的ObjectOutputStream完成序列化。如果要修改只需要定义一个MessageConverter 类型的Bean即可。推荐用JSON方式序列化，步骤如下： 首先我们需要引入json的依赖1234&lt;dependency&gt; &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt; &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;&lt;/dependency&gt; publisher服务声明MessageConverter（可以放在启动类上）1234@Bean public MessageConverter messageConverter()&#123; return new Jackson2JsonMessageConverter(); &#125; 然后我们进行测试 此时显示的消息就很有可读性了。 5、总结以上就是我对RabbirMQ入门学习的一个总结，还有很多的内容需要去学习，以后学到了会继续补充。s","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"消息队列","slug":"java/消息队列","permalink":"http://cyc0819.top/categories/java/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"消息队列","slug":"消息队列","permalink":"http://cyc0819.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"}]},{"title":"Swagger3入门使用","slug":"2021-10-05-Swagger3入门使用","date":"2021-10-05T01:57:56.000Z","updated":"2021-12-08T09:30:34.938Z","comments":false,"path":"2021/10/05/2021-10-05-Swagger3入门使用/","link":"","permalink":"http://cyc0819.top/2021/10/05/2021-10-05-Swagger3%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Swagger3入门使用1、Swagger3简介Swagger 是一套基于 OpenAPI 规范（OpenAPI Specification，OAS）构建的开源工具，后来成为了 Open API 标准的主要定义者。对于 Rest API 来说很重要的一部分内容就是文档，Swagger 为我们提供了一套通过代码和注解自动生成文档的方法，这一点对于保证API 文档的及时性将有很大的帮助。 swagger2于17年停止维护，现在最新的版本为17年发布的 Swagger3（Open Api3） 2. Swagger3与Swagger2.x比较 应用主类添加注解@EnableOpenApi (swagger2是@EnableSwagger2) swagger配置类SwaggerProperties.class，与swagger2.xx 版本有差异，具体看下文 自定义一个配置类 SwaggerConfiguration.class,看下文 访问地址：http://localhost:8080/swagger-ui/index.html (swagger2.xx版本访问的地址为http://localhost:8080/swagger-ui.html) 3、SpringBoot整合Swagger33.1、引入依赖12345&lt;dependency&gt; &lt;groupId&gt;io.springfox&lt;/groupId&gt; &lt;artifactId&gt;springfox-boot-starter&lt;/artifactId&gt; &lt;version&gt;3.0.0&lt;/version&gt;&lt;/dependency&gt; 3.2、在Controller类上添加注解Swagger通过几个注解，就能实现api的添加。 @Api ：用在controller类，描述API接口@EnableOpenApi :表示开启SwaggerApi@ApiOperation ：描述接口方法@ApiModel ：描述对象@ApiModelProperty ：描述对象属性@ApiImplicitParams ：描述接口参数@ApiResponses ：描述接口响应@ApiIgnore ：忽略接口方法@ApiParam ：为 Rest 接口参数添加其它元数据 如下所示： 123456789101112131415161718192021222324252627282930@EnableOpenApi // 也可以不写此注解@Api(description=&quot;讲师管理&quot;)@RestController@RequestMapping(&quot;/admin/edu/teacher&quot;)public class MyController &#123; @Autowired private TeacherService teacherService; @ApiOperation(value = &quot;所有讲师列表&quot;) @GetMapping public List&lt;Teacher&gt; list()&#123; return teacherService.list(); &#125; @ApiOperation(value = &quot;根据ID删除讲师&quot;) @DeleteMapping(&quot;&#123;id&#125;&quot;) public boolean removeById( @ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true) @PathVariable String id)&#123; return teacherService.removeById(id); &#125; @ApiOperation(value = &quot;查询某个讲师&quot;) @GetMapping(&quot;/setlct/&#123;id&#125;&quot;) public Teacher teacher(@ApiParam(name = &quot;id&quot;, value = &quot;讲师ID&quot;, required = true) @PathVariable String id)&#123; return teacherService.teacher(id); &#125;&#125; 3.3、自定义一个配置类SwaggerProperties.class1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768@Component@ConfigurationProperties(&quot;swagger&quot;)public class SwaggerProperties &#123; /** * 是否开启swagger，生产环境一般关闭，所以这里定义一个变量 */ private Boolean enable; /** * 项目应用名 */ private String applicationName; /** * 项目版本信息 */ private String applicationVersion; /** * 项目描述信息 */ private String applicationDescription; /** * 接口调试地址 */ private String tryHost; public Boolean getEnable() &#123; return enable; &#125; public void setEnable(Boolean enable) &#123; this.enable = enable; &#125; public String getApplicationName() &#123; return applicationName; &#125; public void setApplicationName(String applicationName) &#123; this.applicationName = applicationName; &#125; public String getApplicationVersion() &#123; return applicationVersion; &#125; public void setApplicationVersion(String applicationVersion) &#123; this.applicationVersion = applicationVersion; &#125; public String getApplicationDescription() &#123; return applicationDescription; &#125; public void setApplicationDescription(String applicationDescription) &#123; this.applicationDescription = applicationDescription; &#125; public String getTryHost() &#123; return tryHost; &#125; public void setTryHost(String tryHost) &#123; this.tryHost = tryHost; &#125;&#125; 3.4、自定义springfox swagger3配置类SwaggerConfiguration.class123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119import io.swagger.models.auth.In;import org.apache.commons.lang3.reflect.FieldUtils;import org.springframework.boot.SpringBootVersion;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ReflectionUtils;import org.springframework.web.servlet.config.annotation.InterceptorRegistration;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;import springfox.documentation.builders.ApiInfoBuilder;import springfox.documentation.builders.PathSelectors;import springfox.documentation.builders.RequestHandlerSelectors;import springfox.documentation.oas.annotations.EnableOpenApi;import springfox.documentation.service.*;import springfox.documentation.spi.DocumentationType;import springfox.documentation.spi.service.contexts.SecurityContext;import springfox.documentation.spring.web.plugins.Docket;import java.lang.reflect.Field;import java.util.*;@Configurationpublic class SwaggerConfiguration implements WebMvcConfigurer &#123; private final SwaggerProperties swaggerProperties; public SwaggerConfiguration(SwaggerProperties swaggerProperties) &#123; this.swaggerProperties = swaggerProperties; &#125; @Bean public Docket createRestApi() &#123; return new Docket(DocumentationType.OAS_30).pathMapping(&quot;/&quot;) // 定义是否开启swagger，false为关闭，可以通过变量控制 .enable(swaggerProperties.getEnable()) // 将api的元信息设置为包含在json ResourceListing响应中。 .apiInfo(apiInfo()) // 接口调试地址 .host(swaggerProperties.getTryHost()) // 选择哪些接口作为swagger的doc发布 .select() .apis(RequestHandlerSelectors.any()) .paths(PathSelectors.any()) .build() // 支持的通讯协议集合 .protocols(newHashSet(&quot;https&quot;, &quot;http&quot;)) // 授权信息设置，必要的header token等认证信息 .securitySchemes(securitySchemes()) // 授权信息全局应用 .securityContexts(securityContexts()); &#125; /** * API 页面上半部分展示信息 */ private ApiInfo apiInfo() &#123; return new ApiInfoBuilder().title(swaggerProperties.getApplicationName() + &quot; Api Doc&quot;) .description(swaggerProperties.getApplicationDescription()) .contact(new Contact(&quot;lighter&quot;, null, &quot;123456@gmail.com&quot;)) .version(&quot;Application Version: &quot; + swaggerProperties.getApplicationVersion() + &quot;, Spring Boot Version: &quot; + SpringBootVersion.getVersion()) .build(); &#125; /** * 设置授权信息 */ private List&lt;SecurityScheme&gt; securitySchemes() &#123; ApiKey apiKey = new ApiKey(&quot;BASE_TOKEN&quot;, &quot;token&quot;, In.HEADER.toValue()); return Collections.singletonList(apiKey); &#125; /** * 授权信息全局应用 */ private List&lt;SecurityContext&gt; securityContexts() &#123; return Collections.singletonList( SecurityContext.builder() .securityReferences(Collections.singletonList(new SecurityReference(&quot;BASE_TOKEN&quot;, new AuthorizationScope[]&#123;new AuthorizationScope(&quot;global&quot;, &quot;&quot;)&#125;))) .build() ); &#125; @SafeVarargs private final &lt;T&gt; Set&lt;T&gt; newHashSet(T... ts) &#123; if (ts.length &gt; 0) &#123; return new LinkedHashSet&lt;&gt;(Arrays.asList(ts)); &#125; return null; &#125; /** * 通用拦截器排除swagger设置，所有拦截器都会自动加swagger相关的资源排除信息 */ @SuppressWarnings(&quot;unchecked&quot;) @Override public void addInterceptors(InterceptorRegistry registry) &#123; try &#123; Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, &quot;registrations&quot;, true); List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry); if (registrations != null) &#123; for (InterceptorRegistration interceptorRegistration : registrations) &#123; interceptorRegistration .excludePathPatterns(&quot;/swagger**/**&quot;) .excludePathPatterns(&quot;/webjars/**&quot;) .excludePathPatterns(&quot;/v3/**&quot;) .excludePathPatterns(&quot;/doc.html&quot;); &#125; &#125; &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 4、测试完成上述的编写之后可以打开下面的地址查看是否成功创建 1http://localhost:8080/swagger-ui/index.html 成功显示如下","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"Swagger","slug":"java/Swagger","permalink":"http://cyc0819.top/categories/java/Swagger/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"Swagger","slug":"Swagger","permalink":"http://cyc0819.top/tags/Swagger/"}]},{"title":"算法学习_最小栈","slug":"2021-10-04-算法学习_最小栈","date":"2021-10-03T16:05:20.000Z","updated":"2021-12-08T09:30:05.039Z","comments":false,"path":"2021/10/04/2021-10-04-算法学习_最小栈/","link":"","permalink":"http://cyc0819.top/2021/10/04/2021-10-04-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E6%9C%80%E5%B0%8F%E6%A0%88/","excerpt":"","text":"最小栈题目lettcode-155题难度：简单 解题思路题目基本上就是要求找出一个栈中最小的值，通过java中内置的栈的方法即可实现这一目标 首先我的想法是通过遍历比较所有的值来找出最小的那个值，但是这样子消耗了较多的时间，而且题目希望是设计一种栈的结构，而不是直接用栈的方法。 所以后面换了一种新的方法，就是使用链表来实现，这样子的效率是较高的，相比于之前的方法，用时整整少了200多毫秒 具体实现方式如下 具体代码(第一种思路)123456789101112131415161718192021222324252627282930class MinStack &#123; Stack&lt;Integer&gt; stack; public MinStack() &#123; stack = new Stack&lt;Integer&gt;(); &#125; public void push(int val) &#123; stack.push(val); &#125; public void pop() &#123; stack.pop(); &#125; public int top() &#123; return stack.peek(); &#125; public int getMin() &#123; int min=stack.get(0);; for (int i=0;i&lt;stack.size();i++)&#123; if (stack.get(i)&lt;min)&#123; min=stack.get(i); &#125; &#125; return min; &#125;&#125; 具体代码(第二种思路)123456789101112131415161718192021222324252627282930313233343536373839class MinStack &#123; private Node head; public void push(int x) &#123; if(head == null) head = new Node(x, x); else head = new Node(x, Math.min(x, head.min), head); &#125; public void pop() &#123; head = head.next; &#125; public int top() &#123; return head.val; &#125; public int getMin() &#123; return head.min; &#125; private class Node &#123; int val; int min; Node next; private Node(int val, int min) &#123; this(val, min, null); &#125; private Node(int val, int min, Node next) &#123; this.val = val; this.min = min; this.next = next; &#125; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法学习_设计hash集合、hash映射","slug":"2021-10-03-算法学习_设计hash集合、hash映射","date":"2021-10-03T14:21:21.000Z","updated":"2021-12-08T09:30:00.187Z","comments":false,"path":"2021/10/03/2021-10-03-算法学习_设计hash集合、hash映射/","link":"","permalink":"http://cyc0819.top/2021/10/03/2021-10-03-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1hash%E9%9B%86%E5%90%88%E3%80%81hash%E6%98%A0%E5%B0%84/","excerpt":"","text":"设计hash集合、hash映射题目1lettcode-705题难度：简单 解题思路既然说是一个HashSet，所以他就是一个不可重复的集合，就意味着在该集合中每个元素只能出现一次。 所以说我们就可以用boolean类型的数组来模拟出这样的一个集合 数组的索引就对应了set的key，数组所对应的布尔值就是set的value，当其为true1时就说明存在，否则就是不存在 具体实现方式如下 具体代码123456789101112131415161718192021222324class MyHashSet &#123; //创建一个boolean类型的数组 boolean[] map=null; public MyHashSet() &#123; map=new boolean[1000001]; &#125; public void add(int key) &#123; map[key]=true; &#125; public void remove(int key) &#123; map[key]=false; &#125; public boolean contains(int key) &#123; if (map[key]==true)&#123; return true; &#125;else &#123; return false; &#125; &#125;&#125; 题目2lettcode-706题难度：简单 解题思路从题目中我们可以看出来跟上一题差不多，无非是一个set一个map的差别 阅读题目要求我们可以知道对应的key和value 都是int 类型的，所以我们可以定义一个int类型的数组来存储数据 取值的时候如果取值为空就返回一个-1 ，所以我做了一个判断，判断是否有值 具体实现方式如下 具体代码12345678910111213141516171819202122232425class MyHashMap &#123; // 创建一个int类型的数组 Integer[] map=null; public MyHashMap() &#123; map=new Integer[1000001]; &#125; public void put(int key, int value) &#123; map[key]=value; &#125; public int get(int key) &#123; if (map[key]!=null)&#123; int value=map[key]; return value; &#125;else&#123; return -1; &#125; &#125; public void remove(int key) &#123; map[key]=null; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"SpringCloud微服务入门","slug":"2021-10-03-SpringCloud微服务入门","date":"2021-10-03T05:44:20.000Z","updated":"2021-12-08T09:30:21.245Z","comments":false,"path":"2021/10/03/2021-10-03-SpringCloud微服务入门/","link":"","permalink":"http://cyc0819.top/2021/10/03/2021-10-03-SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/","excerpt":"","text":"SpringCloud微服务入门1、微服务的发展历程1.1、单体结构简介：将业务的所有功能集中在一个项目中开发，打成一个包部署。我们之前所做的学生管理系统基本都是单体结构优点：结构简单、部署成本低缺点：耦合度高 1.2、分布式结构简介：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。优点：降低服务耦合、有利于服务升级拓展分布式架构的要考虑的问题：服务拆分粒度如何？服务集群地址如何维护？服务之间如何实现远程调用？服务健康状态如何感知？ 1.3、微服务架构简介：微服务是一种经过良好架构设计的分布式架构方案。优点：拆分粒度更小、服务更独立、耦合度更低缺点：架构非常复杂，运维、监控、部署难度提高微服务架构的特征： 单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发 面向服务：微服务对外暴露业务接口 自治：团队独立、技术独立、数据独立、部署独立 隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题 2、使用SpringCloudSpringCloud并不是一个全新的框架，其实他是一个将其他开源的框架集合的一个大篮子得益于SpringBoot框架方便的使用，我们也能很轻松地在SpringBoot上整合SpriongCloud的模块以下是SpringBoot和SpringCloud的版本匹配表，如果不按照这个规则，就有可能出现很多奇怪的问题 2.1、服务拆分当我们使用微服务时，实际上就是相当于把原本在一起的模块拆分成一个一个的小的模块，所以我们在进行服务拆分时必须注意以下几点： 单一职责：不同微服务，不要重复开发相同业务 数据独立：不要访问其它微服务的数据库 面向服务：将自己的业务暴露为接口，供其它微服务调用 2.2、服务调用当我们成功拆分出两个服务的时候，在使用时，肯定会出现A调用B，B调用C的情况出现，而此时我们想到的第一个方法就是根据服务的IP地址和端口进行调用。 但是此时会出现一个问题，实际情况中我们一个服务肯定不只是只有一个地址，可能会有多个一样的服务，作为负载均衡。但是如果每个服务我们都需要通过IP+端口的方式来连接，那么当我们修改一个服务的端口时，就要相应地修改很多个调用他的端口的服务，显然是很麻烦的，而且也不能实现真正的负载均衡。所以我们需要一个注册中心来统一管理我们的所有服务。所以就有了eureka 2.3、eureka注册中心消费者该如何获取服务提供者具体信息？ 服务提供者启动时向eureka注册自己的信息 eureka保存这些信息 消费者根据服务名称向eureka拉取提供者信息 如果有多个服务提供者，消费者该如何选择？ 服务消费者利用负载均衡算法，从服务列表中挑选一个 消费者如何感知服务提供者健康状态？ 服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态 eureka会更新记录服务列表信息，心跳不正常会被剔除 消费者就可以拉取到最新的信息 现在我们来创建一个eureka注册中心： 我们需要创建一个普通的maven项目，然后在其中引入依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; 在启动类上添加@EnableEurekaServer注解 然后创建一个配置文件Application.yml,在其中添加以下内容123456789server: port: 10086 #端口spring: application: name: eurekaserver #服务名称eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka/ # eureka的地址，将自己注册到eureka中 以上就成功创建了一个eureka注册中心，运行打开端口，就可以看到我们创建好的注册中心 注册成功的服务会显示在Instances currently registered with Eureka处 接下来我们将客户端注册到注册中心去 我们在需要加入的服务中添加以下依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 然后再配置文件中添加以下内容1234567spring: application: name: orderserviceeureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka/ 与上面一样，将自己注册到了注册中心中 2.4、eureka服务调用在成功将服务注册到eureka中之后，我们就可以使用服务名来替代端口地址对服务进行调用了 1String url = &quot;http://userservice/user/&quot; + order.getUserId(); 但这不是一个真实有效的地址，是不能直接进行访问的，只能通过eureka进行访问 3、负载均衡3.1、认识负载均衡以下是负载均衡的一个流程图（此流程图也解释了如何通过服务名调用对应的服务） 负载均衡简单来说就是我们有多个同名的服务，他们做的是一样的事情，我们希望所有的请求给他们所有人一起分担，而不是一个人抗下所有的请求，所以这个时候负载均衡就起到了作用，根据不同的规则，负载均衡可以以不同的策略对请求的服务进行管理，可以极大减小服务器的压力。 3.2、负载均衡策略以下就是负载均衡的策略规则 饥饿加载Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载： 在yml配置文件中加入以下内容，就可以开启饥饿加载模式： 1234ribbon: eager-load: enabled: true # 开启饥饿加载 clients: userservice # 指定对userservice这个服务饥饿加载 4、SpringCloud AlibabaSpring Cloud Alibaba 是阿里巴巴提供的微服务开发一站式解决方案，是阿里巴巴开源中间件与 Spring Cloud 体系的融合。 Spring Cloud Alibaba在自身有很多新的组件之外，还可以兼容SpringCloudNetflix的部分组件，如eureka、zuul等等 4.1、注册中心NacosNacos是阿里巴巴的产品，现在是SpringCloud中的一个组件。相比Eureka功能更加丰富，在国内受欢迎程度较高 在使用之前我们得先进行安装首先得去Github上下载Nacos的压缩包,点击跳转下载完成后放到一个没有中文的路径在bin路径处打开cmd，输入以下命令，即可运行Nacos 1startup.cmd -m standalone 以下是运行成功的标志然后我们在浏览器输入地址和端口就可以进入到nacos里面去 可能报错在启动的时候碰到以下错误 1在启动时碰见这个提示：此时不应有 \\nacos&quot;\\logs\\java_heapdump.hprof -XX:-UseLargePages&quot; 此时我们打开自带的编译器，将下面的语句注释掉 1REM if %MODE% == &quot;cluster&quot; ( REM echo &quot;nacos is starting with cluster&quot; REM if %EMBEDDED_STORAGE% == &quot;embedded&quot; ( REM set &quot;NACOS_OPTS=-DembeddedStorage=true&quot; REM ) REM set &quot;NACOS_JVM_OPTS=-server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%BASE_DIR%\\logs\\java_heapdump.hprof -XX:-UseLargePages&quot;REM ) 再次运行即可通过 4.2、将服务注册到Nacos 在微服务的父工程文件中添加以下内容123456&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt; &lt;version&gt;2.2.6.RELEASE&lt;/version&gt; &lt;type&gt;pom&lt;/type&gt; &lt;scope&gt;import&lt;/scope&gt;&lt;/dependency&gt; 注释掉所有的eureka依赖文件 添加Nacos依赖1234&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt; 然后修改yml文件，注释掉eureka的地址，添加上Nacos的地址1234spring: cloud: nacos: server-addr: localhost:8848 # nacos服务地址 启动服务就可以注册到Nacos中了 4.3、服务集群服务调用尽可能选择本地集群的服务，跨集群调用延迟较高本地集群不可访问时，再去访问其它集群 现在我们来设置服务的集群 首先我们在yml文件中添加以下的内容 12345spring: cloud: nacos: discovery: cluster-name: SH #cluster-name就是集群的名称 然后重新运行就可以看到变化 然后在order-service中设置负载均衡的IRule为NacosRule，这个规则优先会寻找与自己同集群的服务 123userservice: ribbon: NFLoadBalancerRuleClassName: com.alibaba.cloud.nacos.ribbon.NacosRule # 负载均衡规则 当本地集群正常运行时，服务就会优先调用本地集群的服务，而随后再考虑远程集群 4.4、环境隔离 - namespaceNacos中服务存储和数据存储的最外层都是一个名为namespace的东西，用来做最外层隔离 在nacos的控制太我们可以创建一个命名空间 填写好命名空间的信息，然后复制命名空间的ID 然后修改yml文件，添加命名空间的配置(添加最后一句) 1234567cloud: nacos: server-addr: localhost:8848 # nacos服务地址 discovery: cluster-name: HZ ephemeral: false namespace: 4d6ce343-9e1b-44df-a90f-2cf2b6b3d177 # dev环境 启动服务就会看到相应的变化 此时不同空间中的服务是不能相互访问的 5、Nacos配置管理5.1、Nacos实现配置的管理Nacos有一个功能，就是可以将为服务的配置管理到自己的注册中心去，然后我们就可以通过远程调用，来使用这些配置在远端的配置文件。但是这又有什么用处呢？用处就是当我们有一些需要修改的开关型配置文件，我们希望修改时不影响到程序的运行，只要我们对程序进行了更改，就会自动进行配置，也叫做热部署。所以Nacos的配置管理就可以实现这样的一个功能。那么要怎么实现呢？ 首先我们进入到Nacos的配置管理界面，打开配置列表，点击右上角的+ 创建新的配置 如下图一样配置好文件，然后可以在下面的黑色输入框以yml 文件的格式输入你想要的配置内容，完成之后点击发布即可 现在我们就可以去java代码中进行配置的拉取了 5.2、配置的拉取创建好了配置文件，我们现在需要去java代码中对其进行拉取。而以往我们运行微服务时直接就会读取 application.yml 这个配置文件，如何在读取他之前先读取Nacos上的配置文件呢？这时，我们就可以添加一个优先级更高的配置文件bootstrap.yml ，在里面编写读取Nacos配置的配置。 首先引入Nacos配置文件的依赖 12345&lt;!--&lt;nacos配置依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;&lt;/dependency&gt; 然后我们创建一个 bootstrap.yml ，里面写的是拉取远程配置的代码 12345678910spring: application: name: userservice profiles: active: dev # 环境 cloud: nacos: server-addr: localhost:8848 # nacos地址 config: file-extension: yaml # 文件后缀名 比如这里我们读取了 userservice-dev.yaml 文件的内容 然后我们检验一下是否能拿到远程的配置，以下是我们的远程配置文件中所包含的内容 12pattern: dateformat: yyyy/MM/dd HH:mm:ss 然后我们在Controller文件中获取一下配置文件，然后输出到屏幕上 1234567@Value(&quot;$&#123;pattern.dateformat&#125;&quot;)private String dateformat;@GetMapping(&quot;now&quot;)public String now()&#123; return LocalDateTime.now().format(DateTimeFormatter.ofPattern(dateformat));&#125; 如果读取成功屏幕上就会按照前面的格式输出时间 5.3、配置热更新有了配置文件之后，我们现在要来配置热更新了。最简单的方法就是通过注解的方式来进行添加，就是以下的这种方法 在 @Value 注入的变量所在类上添加注解 @RefreshScope 另一种方法就是使用 @ConfigurationProperties 注解来实现。 首先我们创建一个 PatternProperties 类，然后在上面标上 @ConfigurationProperties(prefix = &quot;pattern&quot;) ,@Component ,@Data 等注解。然后在类中创建一个私有成员变量private String dateformat; ，然后其他的控制器中对其进行注入并调用，就可以实现热更新。 5.4、多环境配置共享 而在不同微服务之间可以共享配置文件，可以通过下面的两种方式来指定： 方式一123456789101112spring: application: name: userservice # 服务名称 profiles: active: dev # 环境， cloud: nacos: server-addr: localhost:8848 # Nacos地址 config: file-extension: yaml # 文件后缀名 shared-configs: # 多微服务间共享的配置列表 - dataId: common.yaml # 要共享的配置文件id 方式二12345678910111213spring: application: name: userservice # 服务名称 profiles: active: dev # 环境， cloud: nacos: server-addr: localhost:8848 # Nacos地址 config: file-extension: yaml # 文件后缀名 extends-configs: # 多微服务间共享的配置列表 - dataId: extend.yaml # 要共享的配置文件id 5.5、Nacos集群搭建以下是教程中所要搭建的集群结构 三个nacos节点的地址： 节点 ip port nacos1 192.168.150.1 8845 nacos2 192.168.150.1 8846 nacos3 192.168.150.1 8847 然后我们现在开始搭建我们的集群 搭建集群的基本步骤： 搭建数据库，初始化数据库表结构 下载nacos安装包 配置nacos 启动nacos集群 nginx反向代理 初始化数据库 我们在我们的数据库中创建好一个我们所需要的数据库 然后安装包我们已经下载过了，就可以直接跳过，然后配置一下nacos 进入nacos的conf目录，修改配置文件cluster.conf.example，重命名为cluster.conf： 然后添加以下三个地址 然后修改application.properties文件，添加数据库配置 12345spring.datasource.platform=mysqldb.num=1db.url.0=jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTCdb.user.0=rootdb.password.0=123 启动 将nacos文件夹复制三份，分别命名为：nacos1、nacos2、nacos3 然后分别修改三个文件夹中的 application.properties ， nacos1: 1server.port=8845 nacos2: 1server.port=8846 nacos3: 1server.port=8847 然后分别启动三个nacos节点： 1startup.cmd Nginx反向代理 安装好nginx之后，打开文件夹。修改conf/nginx.conf文件，配置如下： 1234567891011121314upstream nacos-cluster &#123; server 127.0.0.1:8845; server 127.0.0.1:8846; server 127.0.0.1:8847;&#125;server &#123; listen 80; server_name localhost; location /nacos &#123; proxy_pass http://nacos-cluster; &#125;&#125; 然后在浏览器访问：http://localhost/nacos即可。 代码中application.yml文件配置如下： 1234spring: cloud: nacos: server-addr: localhost:80 # Nacos地址 6、客户端FeignFeign是一个声明式的http客户端，官方地址：https://github.com/OpenFeign/feign其作用就是帮助我们优雅的实现http请求的发送 6.1、使用 引入依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt; &lt;/dependency&gt; 在order-service的启动类添加注解开启Feign的功能： 编写feign客户端 12345@FeignClient(&quot;userservice&quot;)public interface UserClient &#123; @GetMapping(&quot;/user/&#123;id&#125;&quot;) User findById(@PathVariable(&quot;id&quot;) Long id);&#125; 主要是基于SpringMVC的注解来声明远程调用的信息，比如： 服务名称：userservice 请求方式：GET 请求路径：/user/{id} 请求参数：Long id 返回值类型：User 使用这种方式就可以很方便地代替之前的url的调用方式，代码变得更加清晰简洁。以下就是调用的内容 调用 6.2、自定义Feign的配置Feign运行自定义配置来覆盖默认配置，可以修改的配置如下： 一般情况下我们会修改日志级别,最好用basic或none 6.3、配置Feign的日志配置日志时我们也有两种方式，一种是配置文件的方式，另一种是java代码的方式 配置文件方式 12345feign: client: config: default: # 这里用default就是全局配置，如果是写服务名称，则是针对某个微服务的配置 loggerLevel: FULL # 日志级别 java代码方式 首先我们声明一个Bean 123456public class FeignClientConfiguration &#123; @Bean public Logger.Level feignLogLevel()&#123; return Logger.Level.BASIC; &#125;&#125; 然后如果是全局配置，我们就放到 @EnableFeignClients 这个注解中 1@EnableFeignClients(defaultConfiguration = FeignClientConfiguration.class) 如果是局部配置，我们就放到 @FeignClient 这个注解中 1@FeignClient(value = &quot;userservice&quot;, configuration = FeignClientConfiguration.class) 6.4、性能优化Feign底层发起http请求，依赖于其它的框架。其底层客户端实现包括： URLConnection：默认实现，不支持连接池 Apache HttpClient ：支持连接池 OKHttp：支持连接池 因此提高Feign的性能主要手段就是使用连接池代替默认的URLConnection。这里我们用Apache的HttpClient来演示。 引入依赖在order-service的pom文件中引入Apache的HttpClient依赖：12345&lt;!--httpClient的依赖 --&gt;&lt;dependency&gt; &lt;groupId&gt;io.github.openfeign&lt;/groupId&gt; &lt;artifactId&gt;feign-httpclient&lt;/artifactId&gt;&lt;/dependency&gt; 配置连接池123456789feign: client: config: default: # default全局的配置 loggerLevel: BASIC # 日志级别，BASIC就是基本的请求和响应信息 httpclient: enabled: true # 开启feign对HttpClient的支持 max-connections: 200 # 最大的连接数 max-connections-per-route: 50 # 每个路径的最大连接数 优化总结总结，Feign的优化： 1.日志级别尽量用basic2.使用HttpClient或OKHttp代替URLConnection① 引入feign-httpClient依赖② 配置文件开启httpClient功能，设置连接池参数 6.5、最佳实践所谓最近实践，就是使用过程中总结的经验，最好的一种使用方式。自习观察可以发现，Feign的客户端与服务提供者的controller代码非常相似：feign客户端：UserController： 我们有两种方法来优化重复的代码编写 继承方式 抽取方式 首先来说一下继承方式：一样的代码可以通过继承来共享：1）定义一个API接口，利用定义方法，并基于SpringMVC注解做声明。2）Feign客户端和Controller都集成这个接口 优点： 简单 实现了代码共享 缺点： 服务提供方、服务消费方紧耦合 参数列表中的注解映射并不会继承，因此Controller中必须再次声明方法、参数列表、注解 然后是抽取的方式将Feign的Client抽取为独立模块，并且把接口有关的POJO、默认的Feign配置都放到这个模块中，提供给所有消费者使用。例如，将UserClient、User、Feign的默认配置都抽取到一个feign-api包中，所有微服务引用该依赖包，即可直接使用 6.6、基于抽取的最佳实践 首先创建一个公共类 feign-api 在这个类中引入依赖1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;&lt;/dependency&gt; 然后，order-service中编写的UserClient、User、DefaultFeignConfiguration都复制到feign-api项目中 在order-service中使用feign-api（引入api的依赖）12345&lt;dependency&gt; &lt;groupId&gt;cn.itcast.demo&lt;/groupId&gt; &lt;artifactId&gt;feign-api&lt;/artifactId&gt; &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt; 修改order-service中的所有与上述三个组件有关的导包部分，改成导入feign-api中的包 此时当我们重启测试的时候，就会发现出错了，出错内容如下 这是因为UserClient现在在cn.itcast.feign.clients包下，而order-service的@EnableFeignClients注解是在cn.itcast.order包下，不在同一个包，无法扫描到UserClient。7. 解决扫描包问题 有两种方法，一种是：指定Feign应该扫描的包 1@EnableFeignClients(basePackages = &quot;cn.itcast.feign.clients&quot;) 一种是指定要加载的Client的接口 1@EnableFeignClients(clients = &#123;UserClient.class&#125;) 至此，就设置完毕了 7、Gateway网关为什么需要网关？网关用来干嘛网关可以用于： 身份认证和权限校验 服务路由、负载均衡 请求限流 在SpringCloud中有两种网关服务，一种是Gateway，另一种是Zuul而两者的差别是：Zuul是基于Servlet的实现，属于阻塞式编程。而SpringCloudGateway则是基于Spring5中提供的WebFlux，属于响应式编程的实现，具备更好的性能。 7.1、搭建一个Gateway网关我们需要创建一个网关的类来搭建一个网关，具体步骤如下： 创建新的module，引入SpringCloudGateway的依赖和nacos的服务发现依赖 12345678910&lt;!--网关依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-gateway&lt;/artifactId&gt;&lt;/dependency&gt;&lt;!--nacos服务发现依赖--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;&lt;/dependency&gt; 然后在网关的yml文件中编写路由配置及nacos地址 123456789101112131415server: port: 10010 # 网关端口spring: application: name: gateway # 服务名称 cloud: nacos: server-addr: localhost:8848 # nacos地址 gateway: routes: # 网关路由配置 - id: user-service # 路由id，自定义，只要唯一即可 # uri: http://127.0.0.1:8081 # 路由的目标地址 http就是固定地址 uri: lb://userservice # 路由的目标地址 lb就是负载均衡，后面跟服务名称 predicates: # 路由断言，也就是判断请求是否符合路由规则的条件 - Path=/user/** # 这个是按照路径匹配，只要以/user/开头就符合要求 此时，如果我们在控制台输入nacos的地址，以及加上断言中配置好的路径进行访问，就会被网关带到制定好的位置。比如说我访问localhost:8848/user/now，就会被带到userservice的now方法去，这就是网关的服务路由功能，是使用断言来实现的。 7.2、断言工厂在yml文件中有这样一个配置： 1predicates：路由断言，判断请求是否符合要求，符合则转发到路由目的地 我们在配置文件中写的断言规则只是字符串，这些字符串会被Predicate Factory读取并处理，转变为路由判断的条件例如 Path=/user/**是按照路径匹配，这个规则是由org.springframework.cloud.gateway.handler.predicate.PathRoutePredicateFactory 类来处理的像这样的断言工厂在SpringCloudGateway还有十几个 Spring给我们提供了很多种Predicate工厂但是我们一般用的比较多的还是 Path 这种方式. 7.3、路由过滤器/过滤器工厂GatewayFilter是网关中提供的一种过滤器，可以对进入网关的请求和微服务返回的响应做处理： Spring提供了31种不同的路由过滤器工厂,例如： 现在我们通过一个简单的例子，实际应用一下这个功能：给所有的userservice添加一个请求头 12345678910spring: cloud: gateway: routes: # 网关路由配置 - id: user-service uri: lb://userservice predicates: - Path=/user/** filters: # 过滤器 - AddRequestHeader=Truth, GUET is freaking awesome! # 添加请求头 此时所有的userservice的请求都加上了Truth, GUET is freaking awesome!这个请求头。 而此时其他的不受影响，那么怎么样才能修改所有的请求头呢？有一个简单的方法，就是使用 default-filters例子如下： 123456789101112131415161718spring: application: name: gateway # 服务名称 cloud: nacos: server-addr: localhost:8848 # nacos地址 gateway: routes: # 网关路由配置 - id: user-service uri: lb://userservice predicates: - Path=/user/** - id: order-service uri: lb://orderservice predicates: - Path=/order/** default-filters: # 默认过滤器，会对所有的路由请求都生效 - AddRequestHeader=Truth, GUET is freaking awesome! # 添加请求头 此时，过滤器并没有指定加载哪一个服务上面，而是加在了routes的同一级上，包括了所有的service服务，所以他的含义就是为所有的服务都统一添加了这样的一个请求头 7.4、全局过滤器全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。区别在于GatewayFilter通过配置定义，处理逻辑是固定的。而GlobalFilter的逻辑需要自己写代码实现。定义方式是实现GlobalFilter接口。 下面我们以一个案例来说明： 需求：定义全局过滤器，拦截请求，判断请求的参数是否满足下面条件： 参数中是否有 authorization， authorization 参数值是否为admin 如果同时满足则放行，否则拦截.我们现在自定义一个类，实现FlobalFilter接口 12345678910111213141516171819202122@Order(-1)@Componentpublic class AuthorizeFilter implements GlobalFilter &#123; @Override public Mono&lt;Void&gt; filter(ServerWebExchange exchange, GatewayFilterChain chain) &#123; // 1.获取请求参数 MultiValueMap&lt;String, String&gt; params = exchange.getRequest().getQueryParams(); // 2.获取authorization参数 String auth = params.getFirst(&quot;authorization&quot;); // 3.校验 if (&quot;admin&quot;.equals(auth)) &#123; // 放行 return chain.filter(exchange); &#125; // 4.拦截 // 4.1.禁止访问 exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN); // 4.2.结束处理 return exchange.getResponse().setComplete(); &#125;&#125; 注意一点，在Order注解中，包含的值越小，优先级越高 接下来我们看看过滤器的执行顺序： 每一个过滤器都必须指定一个int类型的order值，order值越小，优先级越高，执行顺序越靠前。 GlobalFilter通过实现Ordered接口，或者添加@Order注解来指定order值，由我们自己指定 路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增。 当过滤器的order值一样时，会按照 defaultFilter &gt; 路由过滤器 &gt; GlobalFilter的顺序执行。 7.5、Cors跨域跨域：域名不一致就是跨域，主要包括：域名不同： www.taobao.com 和 www.taobao.org 和 www.jd.com 和 miaosha.jd.com域名相同，端口不同：localhost:8080和localhost8081跨域问题：浏览器禁止请求的发起者与服务端发生跨域ajax请求，请求被浏览器拦截的问题解决方案：CORS 只需要简单配置即可实现，如下所示： 12345678910111213141516171819spring: cloud: gateway: globalcors: # 全局的跨域处理 add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题 corsConfigurations: &#x27;[/**]&#x27;: allowedOrigins: # 允许哪些网站的跨域请求 - &quot;http://localhost:8090&quot; - &quot;http://www.leyou.com&quot; allowedMethods: # 允许的跨域ajax的请求方式 - &quot;GET&quot; - &quot;POST&quot; - &quot;DELETE&quot; - &quot;PUT&quot; - &quot;OPTIONS&quot; allowedHeaders: &quot;*&quot; # 允许在请求中携带的头信息 allowCredentials: true # 是否允许携带cookie maxAge: 360000 # 这次跨域检测的有效期 java代码就会根据上面配置的内容执行跨域的请求。","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringCloud","slug":"java/SpringCloud","permalink":"http://cyc0819.top/categories/java/SpringCloud/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://cyc0819.top/tags/SpringCloud/"}]},{"title":"算法学习_栈实现队列、队列实现栈","slug":"2021-10-01-算法学习_栈实现队列、队列实现栈","date":"2021-10-01T03:22:43.000Z","updated":"2021-12-08T09:29:50.776Z","comments":false,"path":"2021/10/01/2021-10-01-算法学习_栈实现队列、队列实现栈/","link":"","permalink":"http://cyc0819.top/2021/10/01/2021-10-01-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E3%80%81%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/","excerpt":"","text":"栈实现队列、队列实现栈题目1、用栈来实现队列lettcode-232题难度：简单 1.1、 解题思路栈是一个先进后出的数据结构，而队列是一个先进先出的数据结构，所以我们想要用栈来实现队列，就必须要用到两个栈，第一个栈出栈到第二个栈中，第二个栈再进行出栈，就可以实现队列先进先出的功能。 具体代码如下 1.2、具体代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class MyQueue &#123; private Stack&lt;Integer&gt; a; private Stack&lt;Integer&gt; b; public MyQueue() &#123; a=new Stack&lt;&gt;(); b=new Stack&lt;&gt;(); &#125; /** * 入栈 * @param x */ public void push(int x) &#123; a.push(x); &#125; /** * 出栈 * @return */ public int pop() &#123; if(b.isEmpty())&#123; while (!a.isEmpty())&#123; b.push(a.pop()); &#125; &#125; return b.pop(); &#125; /** * 返回栈顶元素 * @return */ public int peek() &#123; if(b.isEmpty())&#123; while (!a.isEmpty())&#123; b.push(a.pop()); &#125; &#125; return b.peek(); &#125; /** * 判断栈空 * @return */ public boolean empty() &#123; return a.isEmpty()&amp;&amp;b.isEmpty(); &#125;&#125; 题目2、用队列来实现栈lettcode-225题难度：简单 2.1、解题思路与上一题相同，我们需要用两个队列来实现一个栈 利用队列中的基本方法们就可以实现栈的先进后出的操作 代码如下： 2.2、具体代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class MyStack &#123; private Queue&lt;Integer&gt; a; private Queue&lt;Integer&gt; b; public MyStack() &#123; a=new LinkedList&lt;&gt;(); b=new LinkedList&lt;&gt;(); &#125; /** * 入栈 * @param x */ public void push(int x) &#123; a.offer(x); // 将b队列中元素全部转给a队列 while(!b.isEmpty()) &#123; a.offer(b.poll()); &#125; // 交换a和b,使得a队列没有在push()的时候始终为空队列 Queue temp = a; a = b; b = temp; &#125; /** * 出栈 * @return */ public int pop() &#123; return b.poll(); &#125; /** * 返回栈顶元素 * @return */ public int top() &#123; return b.peek(); &#125; /** * 判断栈是否为空 * @return */ public boolean empty() &#123; return b.isEmpty(); &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法学习_最近的请求次数","slug":"2021-10-01-算法学习_最近的请求次数","date":"2021-10-01T02:53:20.000Z","updated":"2021-12-08T09:29:52.431Z","comments":false,"path":"2021/10/01/2021-10-01-算法学习_最近的请求次数/","link":"","permalink":"http://cyc0819.top/2021/10/01/2021-10-01-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E6%9C%80%E8%BF%91%E7%9A%84%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/","excerpt":"","text":"最近的请求次数题目lettcode-933题难度：简单 解题思路从题目上来看，一时半会看不出来是什么意思。 其实所输入的数字t就是一个毫秒数，根据这个数来判断3000毫秒之前的数，如果小于3000毫秒之前的就删除小于的那个。 所以当我们输入3002时，3000-3000=2，而1小于2，所以1就会被删除。 所以说这个题是一个先进先出的方式，所以我们可以使用队列来实现。 具体实现方式如下 具体代码1234567891011121314151617181920class RecentCounter &#123; //构造一个队列，LinkedList的队列 Queue&lt;Integer&gt; queue; public RecentCounter() &#123; queue=new LinkedList&lt;&gt;(); &#125; public int ping(int t) &#123; //将输入的数值入队 queue.add(t); //判断栈顶元素是否小于t-3000 //如果小于t-3000，将其出队 while (queue.peek()&lt;t-3000)&#123; queue.poll(); &#125; //返回队列的长度 return queue.size(); &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Redis使用注解实现二级缓存","slug":"2021-09-29-Redis使用注解实现二级缓存","date":"2021-09-29T09:34:06.000Z","updated":"2021-12-08T09:29:34.134Z","comments":false,"path":"2021/09/29/2021-09-29-Redis使用注解实现二级缓存/","link":"","permalink":"http://cyc0819.top/2021/09/29/2021-09-29-Redis%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/","excerpt":"","text":"Redis使用注解实现二级缓存1、介绍上一篇文章中，我们实现二级缓存的方式是通过java代码判断Redis是否存在缓存，然后决定从何处取数据，但是这种方法在我们有大量的需要用到缓存的地方的时候，会产生大量的冗余代码，而且有大量的判断语句，让我们的代码不能够专注于业务上面，这样子是不太好的。 所以在Spring的3.1版本之后就引入了对注解的支持，我们可以通过在类上、方法上标记注解来实现二级缓存的存取 其三个注解分别为：Cacheable ，CacheEvict，CachePut 下面我会将三个注解分别展开进行简单解释 2、Cacheable注解 @Cacheable可以标记在一个方法上，也可以标记在一个类上。 对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。 Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果。 至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。 需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。 @Cacheable可以指定三个属性，value、key和condition。 2.1、value属性value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。如下例子所示： 123456@RequestMapping(&quot;selectForAll&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper::AllStudent&quot;)public List&lt;Student&gt; selectStudentForAll() &#123; List&lt;Student&gt; studentList = studentService.selectStudentForAll(); return studentList;&#125; 2.2、key属性 key属性是用来指定Spring缓存方法的返回结果时对应的key的。 该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。 定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。如下例子所示：123456@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper&quot;, key = &quot;#sId&quot;)public Student selectStudentForOne(@PathVariable int sId) &#123; Student student = studentService.selectStudentForOne(sId); return student;&#125; 此时，如果我查询了一个sId为1800710318的学生那么上面的方法中最后缓存的键为：MYBATIS:com.chen.mysqlredisdemo.StudentMapper::1800710318 2.3、condition属性 condition属性可以用于指定缓存发生的条件。 有的时候我们可能并不希望缓存一个方法所有的返回结果，这时候通过condition属性可以实现这一功能。 condition属性默认为空，表示将缓存所有的调用情形。 其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下例子所示：123456@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper&quot;, key = &quot;#sId&quot;,condition = &quot;#sId&gt;1800710301&quot;)public Student selectStudentForOne(@PathVariable int sId) &#123; Student student = studentService.selectStudentForOne(sId); return student;&#125; 上面的例子就表示当查询的sId大于1800710318的时候才会执行缓存的操作 3、CachePut注解 在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。 @CachePut也可以声明一个方法支持缓存功能。 与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。 @CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。 简而言之就是CachePut只会往缓存中写数据，不会从缓存中拿数据 4、CacheEvict注解 @CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。 @CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。 其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件。 与前面不同的不同的是有了两个多出来的属性：allEntries和beforeInvocation 4.1、allEntries属性 allEntries是boolean类型，表示是否需要清除缓存中的所有元素。 默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。 有的时候我们需要Cache一下清除所有的元素，这比一个一个清除元素更有效率。 4.2、beforeInvocation属性 清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。 使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。 5、Caching注解@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。 其例子如下 1234 @Caching(cacheable = @Cacheable(&quot;users&quot;), evict = &#123; @CacheEvict(&quot;cache2&quot;), @CacheEvict(value = &quot;cache3&quot;, allEntries = true) &#125;)public User find(Integer id) &#123; returnnull;&#125; 上面的例子通过一个Caching注解，实现了三种注解同事的配置，相当于一个大集合 6、总结SpringBoot中大量使用了注解、替代了原有的配置文件。大大减少了冗余代码，方便地实现了注解中所设置好的功能。使得我们的代码简洁易懂。除了官方默认的注解，同时我们还可以自定义很多注解，极大方便了我们的使用。","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"redis","slug":"java/redis","permalink":"http://cyc0819.top/categories/java/redis/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://cyc0819.top/tags/redis/"}]},{"title":"Redis入门使用","slug":"2021-09-29-Redis的入门使用","date":"2021-09-28T17:01:06.000Z","updated":"2021-12-08T09:29:20.075Z","comments":false,"path":"2021/09/29/2021-09-29-Redis的入门使用/","link":"","permalink":"http://cyc0819.top/2021/09/29/2021-09-29-Redis%E7%9A%84%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Redis入门使用1、Redis简介 简介Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 优势 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 2、Redis安装2.1、window安装下载地址：https://github.com/tporadowski/redis/releases。** 根据自己电脑是32位或者64位的下载相对应得版本，就可以进行安装使用 **解压文件夹之后进入文件夹得目录下打开cmd输入以下命令，就可以运行redisredis-server.exe redis.windows.conf重新打开一个cmd，输入以下命令就可以进行数据库操作redis-cli.exe -h 127.0.0.1 -p 6379 2.2、Linux安装下载地址：http://redis.io/download 下载最新稳定版本。在linux中对压缩包进行解压之后进入解压后的文件夹进行make操作 1234# wget http://download.redis.io/releases/redis-6.0.8.tar.gz# tar xzf redis-6.0.8.tar.gz# cd redis-6.0.8# make make之后，src目录下面就会出现一个redis-server的文件，可以用来启动Redis，如下 12# cd src# ./redis-server 除此之外，Redis还给我们提供了一个配置文件，可以修改Redis的配置文件，并运行，如下 12# cd src# ./redis-server ../redis.conf 2.3、Ubuntu apt 命令安装Ubuntu系统不像其他的linux系统，它可以通过命令来在线安装在 Ubuntu 系统安装 Redis 可以使用以下命令: 12# sudo apt update# sudo apt install redis-server 然后可以启动 1# redis-server 3、Redis的数据类型3.1、String类型字符串类型，是一种我们平常最常见到的一种数据类型之一我们使用set和get存取数据时，一般就是String的类型，如下 1234redis 127.0.0.1:6379&gt; SET name &quot;陈益财&quot;OKredis 127.0.0.1:6379&gt; GET name&quot;陈益财&quot; 其中，name就是key，”陈益财”就是所对应的值 3.2、Hash类型Redis hash 是一个键值(key=&gt;value)对集合。Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象例子如下： 123456redis 127.0.0.1:6379&gt; HMSET names name1 &quot;chenyicai&quot; name1 &quot;George&quot;&quot;OK&quot;redis 127.0.0.1:6379&gt; HGET names name1&quot;Hello&quot;redis 127.0.0.1:6379&gt; HGET names name1&quot;World&quot; 3.3、List类型Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。例子如下： 1234567891011redis 127.0.0.1:6379&gt; lpush chen redis(integer) 1redis 127.0.0.1:6379&gt; lpush chen mongodb(integer) 2redis 127.0.0.1:6379&gt; lpush chen rabbitmq(integer) 3redis 127.0.0.1:6379&gt; lrange chen 0 101) &quot;rabbitmq&quot;2) &quot;mongodb&quot;3) &quot;redis&quot;redis 127.0.0.1:6379&gt; 其中lpush表示存数据，而lrange表示取数据 3.4、set类型Redis 的 Set 是 string 类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。例子如下： 12345678910111213redis 127.0.0.1:6379&gt; sadd chen redis(integer) 1redis 127.0.0.1:6379&gt; sadd chen mongodb(integer) 1redis 127.0.0.1:6379&gt; sadd chen rabbitmq(integer) 1redis 127.0.0.1:6379&gt; sadd chen rabbitmq(integer) 0redis 127.0.0.1:6379&gt; smembers chen1) &quot;redis&quot;2) &quot;rabbitmq&quot;3) &quot;mongodb&quot; 其中sadd表示添加数据，smembers表示取出数据注意：以上实例中 rabbitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略 3.5、zset类型Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。例子·如下： 123456789101112redis 127.0.0.1:6379&gt; zadd chen 0 redis(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 mongodb(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 rabbitmq(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 rabbitmq(integer) 0redis 127.0.0.1:6379&gt; ZRANGEBYSCORE chen 0 10001) &quot;mongodb&quot;2) &quot;rabbitmq&quot;3) &quot;redis&quot; 其中zadd表示存数据，ZRANGEBYSCORE表示取数据且虽然存了两次相同的字符，但是也是只会保留一个 4、在java中使用Redis使用Redis更多的情况是在java环境下面使用，所以需要掌握如何在java中对Redis进行操作Redis官方给我们提供了很方便的工具来进行Redis的操作：Jedis 首先你需要下载驱动包 下载 jedis.jar，确保下载最新驱动包。 4.1、连接到Redis配置完成之后我们就可以连接到Redis了。例子如下： 12345678910111213import redis.clients.jedis.Jedis; public class RedisJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); // 如果 Redis 服务设置了密码，需要下面这行，没有就不需要 // jedis.auth(&quot;123456&quot;); System.out.println(&quot;连接成功&quot;); //查看服务是否运行 System.out.println(&quot;服务正在运行: &quot;+jedis.ping()); &#125;&#125; 如果是可以连接成功的，就会返回一个PONG表示回应 4.2、String类型的存储12345678910111213import redis.clients.jedis.Jedis; public class RedisStringJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); System.out.println(&quot;连接成功&quot;); //设置 redis 字符串数据 jedis.set(&quot;name&quot;, &quot;chenyicai&quot;); // 获取存储的数据并输出 System.out.println(&quot;redis 存储的字符串为: &quot;+ jedis.get(&quot;name&quot;)); &#125;&#125; 成功之后控制台就会显示name所对应的值：chenyicai 4.3、List类型的存储12345678910111213141516171819import java.util.List;import redis.clients.jedis.Jedis; public class RedisListJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); System.out.println(&quot;连接成功&quot;); //存储数据到列表中 jedis.lpush(&quot;site-list&quot;, &quot;Baidu&quot;); jedis.lpush(&quot;site-list&quot;, &quot;Google&quot;); jedis.lpush(&quot;site-list&quot;, &quot;Taobao&quot;); // 获取存储的数据并输出 List&lt;String&gt; list = jedis.lrange(&quot;site-list&quot;, 0 ,2); for(int i=0; i&lt;list.size(); i++) &#123; System.out.println(&quot;列表项为: &quot;+list.get(i)); &#125; &#125;&#125; 成功之后控制台就会返回信息 123列表项为: Taobao列表项为: Google列表项为: Baidu 5、在SpringBoot中使用Redis一般在SpringBoot中使用Redis时我们会用来做Mysql数据库的二级缓存，这样子在我们获取数据的时候就不需要每次都到数据库进行查询，如果缓存中有数据就可以直接从缓存中拿，大大提高了查询的效率。 首先我们需要在maven中引入我们所需要的依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 然后在yml配置文件中，配置Redis的相关配置文件 123456789101112spring: redis: database: 0 host: localhost port: 6379 password: timeout: 500 pool: max-active: 8 max-idle: 8 min-idle: 0 max-wait: -1 我们还需要一个Config类来处理数据的序列化，否则双方可能会出现乱码的情况 1234567891011121314151617181920212223242526272829303132333435363738@Configurationpublic class RedisConfig &#123; private RedisConnectionFactory redisConnectionFactory; public RedisConfig(RedisConnectionFactory redisConnectionFactory) &#123; this.redisConnectionFactory = redisConnectionFactory; &#125; /** * redisTemplate 序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类 * * @return */ @Bean public RedisTemplate&lt;Object, Object&gt; redisTemplate() &#123; RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory); // 使用Jackson2JsonRedisSerialize 替换默认序列化 Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(objectMapper); // 设置value的序列化规则和 key的序列化规则 redisTemplate.setKeySerializer(new StringRedisSerializer()); redisTemplate.setValueSerializer(jackson2JsonRedisSerializer); redisTemplate.setHashKeySerializer(new StringRedisSerializer()); redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer); redisTemplate.afterPropertiesSet(); return redisTemplate; &#125;&#125; 创建一个cache的实现类用于将查出来的数据添加到缓存中，并设置一些缓存的配置,里面包括了一些有关增删改的配置方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121public class MybatisRedisCache implements Cache &#123; private Object key; private String id; private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(); private RedisTemplate&lt;Object, Object&gt; redisTemplate; private final String COMMON_CACHE_KEY = &quot;MYBATIS:&quot;; /** * 默认缓存对象的缓存时间为 1 分钟 **/ private static final long EXPRIRE_TIME_IN_MINUT = 30; public MybatisRedisCache(String id) &#123; if (id == null) &#123; throw new IllegalArgumentException(&quot;缓存对象id是不能为空的&quot;); &#125; this.id = id; &#125; private RedisTemplate&lt;Object, Object&gt; getRedisTemplate() &#123; if (redisTemplate == null) &#123; redisTemplate = ApplicationContextHolder.getBean(&quot;redisTemplate&quot;); &#125; return redisTemplate; &#125; @Override public String getId() &#123; return id; &#125; @Override public void putObject(Object key, Object value) &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); //使用redisTemplate得到值操作对象 ValueOperations operation = redisTemplate.opsForValue(); //使用值操作对象operation设置缓存对象 operation.set(getKey(key), value, EXPRIRE_TIME_IN_MINUT, TimeUnit.MINUTES);// System.out.println(&quot;缓存对象保存成功&quot;); &#125; catch (Throwable t) &#123; System.err.println(&quot;缓存对象保存失败&quot; + t); &#125; &#125; public Object getKey() &#123; return key; &#125; public void setKey(Object key) &#123; this.key = key; &#125; @Override public Object getObject(Object key) &#123; try &#123; setKey(key); RedisTemplate redisTemplate = getRedisTemplate(); ValueOperations operations = redisTemplate.opsForValue(); Object result = operations.get(getKey(key));// System.out.println(&quot;获取缓存对象成功&quot;); return result; &#125; catch (Throwable t) &#123; System.err.println(&quot;缓存对象获取失败&quot; + t); return null; &#125; &#125; @Override public Object removeObject(Object key) &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); redisTemplate.delete(getKey(key));// System.out.println(&quot;删除缓存对象成功！&quot;+key); &#125; catch (Throwable t) &#123; System.err.println(&quot;删除缓存对象失败！&quot; + t); &#125; return null; &#125; @Override public void clear() &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); Set&lt;String&gt; keys = redisTemplate.keys(getKeys()); redisTemplate.delete(keys); System.out.println(&quot;出现新增、修改、删除操作，清空对应Mapper缓存======&gt;&quot; + keys.size()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * 按照一定规则标识key */ private String getKey(Object key) &#123; String k=COMMON_CACHE_KEY + this.id + &quot;:&quot; + DigestUtils.md5DigestAsHex(String.valueOf(key).getBytes()); return k; &#125; /** * 所有key */ private String getKeys() &#123; return COMMON_CACHE_KEY + this.id + &quot;:*&quot;; &#125; @Override public int getSize() &#123; Long size = getRedisTemplate().boundHashOps(getId()).size(); return size == null ? 0 : size.intValue(); &#125; @Override public ReadWriteLock getReadWriteLock() &#123; return readWriteLock; &#125;&#125; 然后我们在数据库查询的mapper.xml上添加上以下的配置，表示开启了数据库的二级缓存 1&lt;cache type=&quot;com.chen.mysqlredisdemo.cache.MybatisRedisCache&quot;&gt;&lt;/cache&gt; 然后在Controller文件中注入刚才写好的方法 1234@AutowiredStringRedisTemplate stringRedisTemplate;@AutowiredRedisTemplate redisTemplate; 最后在方法中判断Redis中是否有缓存，如果有就从Redis中取数据，否则就到数据库进行查找 123456789101112131415@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;) public Student selectStudentForOne(@PathVariable int sId)&#123; String key = &quot;MYBATIS:&quot; + &quot;com.chen.mysqlredisdemo.StudentMapper:&quot;+sId; ValueOperations&lt;String, Student&gt; operations = redisTemplate.opsForValue(); boolean hasKey = redisTemplate.hasKey(key); if (hasKey) &#123; System.out.println(&quot;缓存输出&quot;); Student student = operations.get(key); return student; &#125;else &#123; Student student = studentService.selectStudentForOne(sId); operations.set(key, student);//把数据放入缓存 return student; &#125; &#125;","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"redis","slug":"java/redis","permalink":"http://cyc0819.top/categories/java/redis/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://cyc0819.top/tags/redis/"}]},{"title":"算法学习_设计有序流","slug":"2021-09-26-算法学习_设计有序流","date":"2021-09-26T13:47:00.000Z","updated":"2021-12-08T09:29:11.997Z","comments":false,"path":"2021/09/26/2021-09-26-算法学习_设计有序流/","link":"","permalink":"http://cyc0819.top/2021/09/26/2021-09-26-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1%E6%9C%89%E5%BA%8F%E6%B5%81/","excerpt":"","text":"设计有序流题目lettcode-1656题难度：简单 解题思路既然是一个有序流，那么我们就可以将其存储到一个数组中，然后通过数组下标对所在的值进行访问。所以我们首先创建一个长度为n+1的数组，将value的值存在其中。将下标指针的值设置为1，然后在执行时进行循环加1 接下来就是循环读取的过程：当我们在数组中插入一个数据的时候，就判断一个数组下标是否小于n，以及当前下标处的value值是否不为空，如果不为空我们就进入循环，将其存到一个新的集合中，并将其输出。如果为空的时候就不执行方法，继续往数组中添加value直到下标不小于n为止 具体代码1234567891011121314151617181920212223242526272829class OrderedStream &#123; private String[] arr; private int n; private int ptr; // 构造函数 public OrderedStream(int n) &#123; //因为数组的下标n从0开始，所以数组的长度为n+1 this.arr=new String[n+1]; this.n=n; this.ptr=1; &#125; public List&lt;String&gt; insert(int idKey, String value) &#123; //将value存到数组中 arr[idKey]=value; //创建一个新的数组 List&lt;String&gt; res=new ArrayList&lt;&gt;(); //循环读取arr数组，将其中的值写到res数组中 //当arr[]为null时，不进入循环 while (ptr&lt;=n&amp;&amp;arr[ptr]!=null)&#123; res.add(arr[ptr]); ptr++; &#125; return res; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法学习_设计停车系统","slug":"2021-09-26-算法学习_设计停车系统","date":"2021-09-26T06:06:30.000Z","updated":"2021-12-08T09:29:00.477Z","comments":false,"path":"2021/09/26/2021-09-26-算法学习_设计停车系统/","link":"","permalink":"http://cyc0819.top/2021/09/26/2021-09-26-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1%E5%81%9C%E8%BD%A6%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"设计停车系统题目lettcode-1603题难度：简单 解题思路每种车都有每种车所对应的一个车位，而且不能停到其他车的车位上面去，所以说我们需要三个变量将每种车的车位数量存起来。然后在有新车进来时，判断车辆的类型，然后查找相应的停车位，如果有车位就返回一个true，相当于停车成功，然后该类型的车位减去一个，如果车位为0，则不允许停车，返回false 具体代码1234567891011121314151617181920212223242526272829303132class ParkingSystem &#123; int big; int medium; int small; // 构造函数 public ParkingSystem(int big, int medium, int small) &#123; this.big=big; this.medium=medium; this.small=small; &#125; public boolean addCar(int carType) &#123; if (carType==1)&#123; if (this.big&gt;0)&#123; this.big--; return true; &#125; &#125;else if (carType==2)&#123; if (this.medium&gt;0)&#123; this.medium--; return true; &#125; &#125;else if (carType==3)&#123; if (this.small&gt;0)&#123; this.small--; return true; &#125; &#125; return false; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"java栈","slug":"2021-09-25-java栈","date":"2021-09-25T05:40:27.000Z","updated":"2021-12-08T09:32:42.817Z","comments":false,"path":"2021/09/25/2021-09-25-java栈/","link":"","permalink":"http://cyc0819.top/2021/09/25/2021-09-25-java%E6%A0%88/","excerpt":"","text":"java栈栈是一个先进后出的数据结构，想要自己实现一个栈，要求这个栈具有push()，pop()——返回栈顶并出栈，peek()——返回栈顶不出栈，isEmpty()等方法。 1.1、手动实现一个栈的多种方式 采用数组来实现栈 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import java.util.Arrays;/** * @author George * @project testDemo * @package abc * @date 2021/9/25 19:59 * @since 1.0 */class Stack1&lt;T&gt; &#123; // 实现栈的数组 private Object[] stack; // 数组大小 private int size; Stack1()&#123; stack=new Object[10]; &#125; // 判断数组是否为空 public boolean isEmpty()&#123; if (size==0)&#123; return true; &#125;else&#123; return false; &#125; &#125; // 返回栈顶元素 public T peek()&#123; T t=null; if (size&gt;0)&#123; t= (T) stack[size-1]; &#125; return t; &#125; // 返回栈顶并出栈 public T pop()&#123; T t=peek(); if(size&gt;0)&#123; stack[size-1]=null; size--; &#125; return t; &#125; // 扩容 public void expandCapacity(int size)&#123; int len=stack.length; if (size&gt;len)&#123; size=size*3/2+1; stack= Arrays.copyOf(stack,size); &#125; &#125; public void push(T t)&#123; expandCapacity(size+1); stack[size]=t; size++; &#125;&#125;public class ArrayStack &#123; public static void main(String[] args) &#123; Stack1&lt;String&gt; stringStack1=new Stack1&lt;&gt;(); System.out.println(stringStack1.peek()); System.out.println(stringStack1.isEmpty()); stringStack1.push(&quot;java&quot;); stringStack1.push(&quot;chenyc2021@qq.com&quot;); stringStack1.push(&quot;gogogo&quot;); System.out.println(stringStack1.pop()); System.out.println(stringStack1.isEmpty()); System.out.println(stringStack1.peek()); &#125;&#125; 采用链表来实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677/** * @author George * @project testDemo * @package abc * @date 2021/9/26 0:49 * @since 1.0 */class Stack2&lt;T&gt; &#123; // 定义一个链表 class Node&lt;T&gt; &#123; private T t; private Node next; &#125; private Node&lt;T&gt; head; // 构造函数 Stack2() &#123; head = null; &#125; // 入栈 public void push(T t) &#123; if (t == null) &#123; throw new NullPointerException(&quot;参数不能为空&quot;); &#125; if (head == null) &#123; head = new Node&lt;T&gt;(); head.t = t; head.next = null; &#125; else &#123; Node&lt;T&gt; temp = head; head = new Node&lt;T&gt;(); head.t = t; head.next = temp; &#125; &#125; // 出栈 public T pop() &#123; T t = head.t; head = head.next; return t; &#125; // 栈顶元素 public T peek() &#123; T t = head.t; return t; &#125; //判断栈是否为空 public boolean isEmpty() &#123; if (head == null) &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125;public class LinkStack &#123; public static void main(String[] args) &#123; Stack2 stack = new Stack2(); System.out.println(stack.isEmpty()); stack.push(&quot;Java&quot;); stack.push(&quot;is&quot;); stack.push(&quot;beautiful&quot;); System.out.println(stack.peek()); System.out.println(stack.peek()); System.out.println(stack.pop()); System.out.println(stack.pop()); System.out.println(stack.isEmpty()); System.out.println(stack.pop()); System.out.println(stack.isEmpty()); &#125;&#125; 采用LinkedList实现栈 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 import java.util.LinkedList;/** * @author George * @project testDemo * @package abc * @date 2021/9/26 9:39 * @since 1.0 */class Stack3&lt;T&gt;&#123; // 构建一个linkedLIst集合 private LinkedList&lt;T&gt; ll=new LinkedList&lt;&gt;(); // 判断栈是否为空 public boolean isEmpty()&#123; return ll.isEmpty(); &#125; // 入栈 public void push(T t)&#123; ll.addFirst(t); &#125; //出栈 public T pop()&#123; return ll.removeFirst(); &#125; // 栈顶元素 public T peek()&#123; T t=null; if (!ll.isEmpty())&#123; t=ll.getFirst(); &#125; return t; &#125;&#125;public class LinkedStack &#123; public static void main(String[] args) &#123; Stack3&lt;String&gt; stringStack3=new Stack3&lt;&gt;(); System.out.println(stringStack3.isEmpty()); System.out.println(stringStack3.peek()); stringStack3.push(&quot;java&quot;); stringStack3.push(&quot;is&quot;); stringStack3.push(&quot;beautiful&quot;); System.out.println(stringStack3.peek()); System.out.println(stringStack3.pop()); System.out.println(stringStack3.isEmpty()); System.out.println(stringStack3.peek()); &#125;&#125; 1.2、栈的应用在java中，栈是一种很重要的数据结构，如以下的很多场景都应用到了栈 符号匹配 中缀表达式变为后缀表达式 计算后缀表达式 实现函数的嵌套调用 HTML和XML中的标签匹配 网页浏览器中以访问界面的历史记录 例如： 符号匹配在编写程序的过程中，我们经常会遇到诸如圆括号“()”与花括号“{}”，这些符号都必须是左右匹配的，这就是我们所说的符合匹配类型，当然符合不仅需要个数相等，而且需要先左后右的依次出现，否则就不符合匹配规则，如“)(”，明显是错误的匹配，而“()”才是正确的匹配。有时候符合如括号还会嵌套出现，如“9-(5+(5+1))”,而嵌套的匹配原则是一个右括号与其前面最近的一个括号匹配，事实上编译器帮我检查语法错误是也是执行一样的匹配原理，而这一系列操作都需要借助栈来完成，接下来我们使用栈来实现括号”()”是否匹配的检测。判断原则如下（str=”((5-3)*8-2)”）： a.设置str是一个表达式字符串，从左到右依次对字符串str中的每个字符char进行语法检测，如果char是，左括号则入栈，如果char是右括号则出栈(有一对匹配就可以去匹配一个左括号，因此可以出栈)，若此时出栈的字符char为左括号，则说明这一对括号匹配正常，如果此时栈为空或者出栈字符不为左括号，则表示缺少与char匹配的左括号，即目前不完整。 b.重复执行a操作，直到str检测结束，如果此时栈为空，则全部括号匹配，如果栈中还有左括号，是说明缺少右括号。 实现代码如下： 123456789101112131415161718192021222324252627282930313233public class CheckExpression &#123; public static String isValid(String expstr) &#123; //创建栈 LinkedStack&lt;String&gt; stack = new LinkedStack&lt;&gt;(); int i=0; while(i&lt;expstr.length()) &#123; char ch=expstr.charAt(i); i++; switch(ch) &#123; case &#x27;(&#x27;: stack.push(ch+&quot;&quot;);//左括号直接入栈 break; case &#x27;)&#x27;: if (stack.isEmpty() || !stack.pop().equals(&quot;(&quot;)) //遇见右括号左括号直接出栈 return &quot;(&quot;; &#125; &#125; //最后检测是否为空,为空则检测通过 if(stack.isEmpty()) return &quot;check pass!&quot;; else return &quot;check exception!&quot;; &#125; public static void main(String args[]) &#123; String expstr=&quot;((5-3)*8-2)&quot;; System.out.println(expstr+&quot; &quot;+isValid(expstr)); &#125;&#125;","categories":[{"name":"数据结构","slug":"数据结构","permalink":"http://cyc0819.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://cyc0819.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"准备阅读小米十年纪念《一往无前》","slug":"2021-08-27-准备阅读小米十年纪念《一往无前》","date":"2021-08-26T16:46:22.000Z","updated":"2021-12-08T10:34:53.458Z","comments":false,"path":"2021/08/27/2021-08-27-准备阅读小米十年纪念《一往无前》/","link":"","permalink":"http://cyc0819.top/2021/08/27/2021-08-27-%E5%87%86%E5%A4%87%E9%98%85%E8%AF%BB%E5%B0%8F%E7%B1%B3%E5%8D%81%E5%B9%B4%E7%BA%AA%E5%BF%B5%E3%80%8A%E4%B8%80%E5%BE%80%E6%97%A0%E5%89%8D%E3%80%8B/","excerpt":"","text":"准备阅读小米十年纪念《一往无前》作为一个不太资深的老米粉，自从小米发布新书《一往无前》以来一直想阅读一下，感受一下大厂发展的心路历程，但是一直都没有提上日程，而今天决定正式开始阅读此书，但是可能耗时会较长，现在这里做一个标记，阅读完毕务必完成一篇读后感。 2021.09.21 因为一直都在面试，所以阅读计划得往后推迟一点了。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"对SpringIOC的理解","slug":"2021-08-26-对SpringIOC的理解","date":"2021-08-26T01:45:01.000Z","updated":"2021-12-08T10:35:12.596Z","comments":false,"path":"2021/08/26/2021-08-26-对SpringIOC的理解/","link":"","permalink":"http://cyc0819.top/2021/08/26/2021-08-26-%E5%AF%B9SpringIOC%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"对SpringIOC的理解1、何为IOC​ IOC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，IOC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好IOC呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来分析一下 1.1 谁控制谁，控制什么​ 传统Java程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IOC是有专门一个容器来创建这些对象，即由IOC容器来控制对象的创建；谁控制谁？当然是IOC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等） 1.2 为何是反转，哪些方面反转了​ 有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。 1.3 图例说明传统程序设计下图，都是主动去创建相关对象然后再组合起来： 当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示： 2、IOC能做什么​ IOC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IOC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。 其实IOC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IOC/DI思想中，应用程序就变成被动的了，被动的等待IOC容器来创建并注入它所需要的资源了。 IOC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IOC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。 3、IOC和DI​ DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来分析一下： 谁依赖于谁：当然是应用程序依赖于IOC容器； 为什么需要依赖：应用程序需要IOC容器来提供对象需要的外部资源； 谁注入谁：很明显是IOC容器注入应用程序某个对象，应用程序依赖的对象； 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。 IOC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IOC而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。 4、对IOC和DI的理解4.1、IoC(控制反转) 首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。 那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。 4.2、DI(依赖注入) IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。 理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。 5、原文地址https://www.iteye.com/blog/jinnianshilongnian-1413846","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"}]},{"title":"最近一段时间的学习总结","slug":"2021-08-20-最近一段时间的学习总结","date":"2021-08-19T17:16:32.000Z","updated":"2021-12-10T04:44:18.207Z","comments":false,"path":"2021/08/20/2021-08-20-最近一段时间的学习总结/","link":"","permalink":"http://cyc0819.top/2021/08/20/2021-08-20-%E6%9C%80%E8%BF%91%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"","text":"最近一段时间的学习总结项目部分 完成了学生宿舍系统的答辩 成功将学生宿舍为系统部署到了服务器上 准备进行学生宿舍系统的小程序的设计，但是实在是没有时间 完成了国医堂小程序的开发(React+Taro+Taro UI) 完成了小程序API的开发(Vue+SpringBoot+MyBatis-Plus) 国医堂小程序后台开发完毕(VUE+SpringBoot+MyBatis-Plus+Element-UI) 准备进行中医药门户或者桂林医学院报修系统开发环境的搭建 框架部分 学习了SpringSecurity，并完成了Session以及Token两种情况下的应用Demo MyBatis-Plus逆向工程(代码生成器) Shiro的基本使用 入门Activiti(工作流) 准备学些RabbitMQ、 MyBatis-Plus逆向工程3.5.0版本之之前是setting模式，之后是building模式 入门了React以及Vue两个有名的前端框架的使用 ElementUI，LayUI，Bootstrap等UI的使用 基础知识 复习了下AOP思想，并准备使用到日志中 HashMap和HashTable的区别 服务器 手动将web项目部署到阿里云服务器上 复习了Linux的指令 备注看到同学面试京东所回答的问题，以及其他同学所总结的知识点，感觉自己和别人相比有很大的进步空间","categories":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"学习总结","slug":"随笔/学习总结","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"学习总结","slug":"学习总结","permalink":"http://cyc0819.top/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"}]},{"title":"shiro安全框架","slug":"2021-08-01-shiro安全框架","date":"2021-08-01T12:19:41.000Z","updated":"2021-12-08T10:35:27.747Z","comments":false,"path":"2021/08/01/2021-08-01-shiro安全框架/","link":"","permalink":"http://cyc0819.top/2021/08/01/2021-08-01-shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/","excerpt":"","text":"shiro安全框架1、简述shiro是apache公司所出品的开源安全框架其可以用于： 处理身份认证 授权 企业会话管理和加密 相对于Spring security来说更加简单，使用也更加灵活 在使用shiro的时候可以不依赖于任何容器，既可以在javaSE下使用，同样可以在JavaEE下使用 2、架构 使用用户的登录信息构建令牌12UsernamePasswordToken token = new UsernamePasswordToken(username, password); token可以理解为一个用户令牌，等于的过程可以理解为shiro检验用户令牌是否具有合法的身份以及相关的权限 执行登录 123SecurityUtils.setSecurityManager(securityManager); // 注入SecurityManagerSubject subject = SecurityUtils.getSubject(); // 获取Subject单例对象subject.login(token); // 执行登录 shiro中最核心的部分就是securityManger，它主要负责安全认证和授权。当我们在使用这个框架的时候，shiro已经将一切的操作封装成一个盒子了，我们在使用的时候可以把它当成一个黑盒来进行使用。SecurityUtils对象，本质上就是一个工厂类似Spring中的ApplicationContext。Subject，翻译过来就是项目的意思，他是一个需要通过shiro保护的一个抽象概念。通过1令牌和项目的登录关系，保证了我们的安全。 判断用户 这一步中的内容shiro无法帮我们进行实现，我们只有通过最原始的手段来实现登录用户的判断，就是查询数据库。 例如： 123456if (!token.getUsername().equals(name)) &#123; //shiro底层会抛出一个异常 return null;&#125;//判断密码return new SimpleAuthenticationInfo(&quot;&quot;, password, &quot;&quot;); 第一个if语句中首先会判断数据库中查到的name于输入的用户名2是否一致，如果不一致，则会抛出一个异常然后SimpleAuthenticationInfo中可以用于判断密码的正确性，同样是从数据库查出来的数据做对比。 3、实现Realm 创建一个Realm Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息，但是Realm并不止局限于数据的存取，其中还有很多认证授权校验相关的代码我们可以自定义一个MyRealm，用于我们的项目之中，但是前提是这个类必须继承于AuthorizingRealm父类，然后实现两个方法AuthorizationInfo doGetAuthorizationInfo以及AuthenticationInfo doGetAuthenticationInfoAuthenticationInfo代表了用户的角色信息集合，AuthorizationInfo代表了角色的权限信息集合。如此一来，当设计人员对项目中的某一个url路径设置了只允许某个角色或具有某种权限才可以访问的控制约束的时候，Shiro就可以通过以上两个对象来判断。 我们也可以简单看作：doGetAuthenticationInfo() 方法：用来验证当前登录的用户，获取认证信息。doGetAuthorizationInfo() 方法：为当前登录成功的用户授予权限和分配角色。 从数据库查询数据 在数据库中查询登陆人信息的时候，仅仅需要查询用户的id，这时还未涉及到密码，也就是说即使用户输入的密码不正确，照样可以查询出该用户。然后，将该用户的相关信息封装到authcInfo中并返回给Shiro接下来就该Shiro上场了，将封装的用户信息与用户的输入信息（用户名、密码）进行对比、校验（注意，这里对密码也要进行校验）。校验通过则允许用户登录，否则跳转到指定页面。 4、Shiro配置 在ShiroConfig中配置Realm 1234@Bean(name=&quot;MyRealm&quot;) public MyRealm myRealm() &#123; return new MyRealm(); &#125; 配置安全管理器SecurityManager 1234567@Bean(name=&quot;securityManager&quot;) public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;MyRealm&quot;) MyRealm myRealm) &#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); //关联Realm securityManager.setRealm(myRealm); return securityManager; &#125; 当我们配置安全管理器的时候，需要将前面的Realm添加进来，这样子才可以访问到Realm 配置Shiro过滤器 shiro中自带好了配置的过滤器，我们在使用之前需要将其进行导入 1234567891011121314151617181920ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();//设置安全管理器shiroFilterFactoryBean.setSecurityManager(securityManager);//添加Shiro内置过滤器/*Shiro内置过滤器，可以实现权限相关的拦截器常用的有：anon：无需认证就能访问authc：必须认证才能访问user：必须拥有 “记住我” 功能才能使用perms：拥有对某个资源的权限才能访问role： 拥有对某个角色权限才能访问*/LinkedHashMap&lt;String, String&gt; filterMap = new LinkedHashMap&lt;String,String&gt;();//这里我们要将不进行拦截的放在前面filterMap.put(&quot;/login&quot;, &quot;anon&quot;);filterMap.put(&quot;/*&quot;, &quot;authc&quot;);//最后设置验证失败的时候所跳转的界面shiroFilterFactoryBean.setLoginUrl(&quot;/toLogin&quot;); 此时当我们未登陆的时候，点击被拦截的模块，就会跳到我们所指定的网页，而没有拦截的网页则可以正常显示。","categories":[{"name":"shiro","slug":"shiro","permalink":"http://cyc0819.top/categories/shiro/"}],"tags":[{"name":"shiro","slug":"shiro","permalink":"http://cyc0819.top/tags/shiro/"}]},{"title":"springboot+mybatis整合支付宝支付","slug":"2021-07-22-springboot+mybatis整合支付宝支付","date":"2021-07-22T04:13:22.000Z","updated":"2021-12-08T09:27:41.547Z","comments":false,"path":"2021/07/22/2021-07-22-springboot+mybatis整合支付宝支付/","link":"","permalink":"http://cyc0819.top/2021/07/22/2021-07-22-springboot+mybatis%E6%95%B4%E5%90%88%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98/","excerpt":"","text":"springboot+mybatis整合支付宝支付准备支付宝沙箱环境 需要三个网站来准备支付宝的沙箱环境： 支付宝开放平台 开放平台-沙箱环境 miniU研发工作室 具体配置过程百度即可bean类12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485package cn.edu.guet.bean;/** * @author George * @project DormitorySystem * @package cn.edu.guet.bean * @date 2021/7/22 11:35 * @since 1.0 */public class AlipayBean &#123; /** * 商户订单号，必填 * */ private String out_trade_no; /** * 订单名称，必填 */ private String subject; /** * 付款金额，必填 * 根据支付宝接口协议，必须使用下划线 */ private String total_amount; /** * 商品描述，可空 */ private String body; /** * 超时时间参数 */ private String timeout_express= &quot;10m&quot;; /** * 产品编号 */ private String product_code= &quot;FAST_INSTANT_TRADE_PAY&quot;; public String getOut_trade_no() &#123; return out_trade_no; &#125; public void setOut_trade_no(String out_trade_no) &#123; this.out_trade_no = out_trade_no; &#125; public String getSubject() &#123; return subject; &#125; public void setSubject(String subject) &#123; this.subject = subject; &#125; public String getTotal_amount() &#123; return total_amount; &#125; public void setTotal_amount(String total_amount) &#123; this.total_amount = total_amount; &#125; public String getBody() &#123; return body; &#125; public void setBody(String body) &#123; this.body = body; &#125; public String getTimeout_express() &#123; return timeout_express; &#125; public void setTimeout_express(String timeout_express) &#123; this.timeout_express = timeout_express; &#125; public String getProduct_code() &#123; return product_code; &#125; public void setProduct_code(String product_code) &#123; this.product_code = product_code; &#125;&#125; alipayConfig类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960package cn.edu.guet.config;import java.io.FileWriter;import java.io.IOException;/** * @author George * @project DormitorySystem * @package cn.edu.guet.config * @date 2021/7/22 13:16 * @since 1.0 */public class AlipayConfig &#123;//↓↓↓↓↓↓↓↓↓↓请在这里配置您的基本信息↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ // 应用ID,您的APPID，收款账号既是您的APPID对应支付宝账号 public static String app_id = &quot;2021000117643373&quot;; // 商户私钥，您的PKCS8格式RSA2私钥 public static String merchant_private_key = &quot;&quot;; // 支付宝公钥,查看地址：https://openhome.alipay.com/platform/keyManage.htm 对应APPID下的支付宝公钥。 public static String alipay_public_key = &quot;&quot;; // 服务器异步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 public static String notify_url = &quot;http://localhost:8082&quot;; // 页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问 public static String return_url = &quot;http://localhost:8082&quot;; // 签名方式 public static String sign_type = &quot;RSA2&quot;; // 字符编码格式 public static String charset = &quot;utf-8&quot;; // 支付宝网关 public static String gatewayUrl = &quot;https://openapi.alipaydev.com/gateway.do&quot;; // 支付宝网关 public static String log_path = &quot;C:\\\\&quot;;//↑↑↑↑↑↑↑↑↑↑请在这里配置您的基本信息↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ /** * 写日志，方便测试（看网站需求，也可以改成把记录存入数据库） * @param sWord 要写入日志里的文本内容 */ public static void logResult(String sWord) &#123; FileWriter writer = null; try &#123; writer = new FileWriter(log_path + &quot;alipay_log_&quot; + System.currentTimeMillis()+&quot;.txt&quot;); writer.write(sWord); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; finally &#123; if (writer != null) &#123; try &#123; writer.close(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; &#125; &#125; &#125;&#125; controller控制器支付 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051@Controllerpublic class AlipayController &#123; @RequestMapping(&quot;/pay&quot;) @ResponseBody public void payController(HttpServletRequest request, HttpServletResponse response) throws IOException, AlipayApiException &#123; // 获取初始化的AliPayClient AlipayClient alipayClient = new DefaultAlipayClient( AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, &quot;json&quot;, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type); // 设置请求参数 AlipayTradePagePayRequest alipayRequest = new AlipayTradePagePayRequest(); alipayRequest.setReturnUrl(AlipayConfig.return_url); alipayRequest.setNotifyUrl(AlipayConfig.notify_url); //商户订单号，商户网站订单系统中唯一订单号，必填 String out_trade_no = new String(request.getParameter(&quot;WIDout_trade_no&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;); //付款金额，必填 String total_amount = new String(request.getParameter(&quot;WIDtotal_amount&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;); //订单名称，必填 String subject = new String(request.getParameter(&quot;WIDsubject&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;); //商品描述，可空 String body = new String(request.getParameter(&quot;WIDbody&quot;).getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;); alipayRequest.setBizContent(&quot;&#123;\\&quot;out_trade_no\\&quot;:\\&quot;&quot;+ out_trade_no +&quot;\\&quot;,&quot; + &quot;\\&quot;total_amount\\&quot;:\\&quot;&quot;+ total_amount +&quot;\\&quot;,&quot; + &quot;\\&quot;subject\\&quot;:\\&quot;&quot;+ subject +&quot;\\&quot;,&quot; + &quot;\\&quot;body\\&quot;:\\&quot;&quot;+ body +&quot;\\&quot;,&quot; + &quot;\\&quot;product_code\\&quot;:\\&quot;FAST_INSTANT_TRADE_PAY\\&quot;&#125;&quot;); //若想给BizContent增加其他可选请求参数，以增加自定义超时时间参数timeout_express来举例说明 //alipayRequest.setBizContent(&quot;&#123;\\&quot;out_trade_no\\&quot;:\\&quot;&quot;+ out_trade_no +&quot;\\&quot;,&quot; // + &quot;\\&quot;total_amount\\&quot;:\\&quot;&quot;+ total_amount +&quot;\\&quot;,&quot; // + &quot;\\&quot;subject\\&quot;:\\&quot;&quot;+ subject +&quot;\\&quot;,&quot; // + &quot;\\&quot;body\\&quot;:\\&quot;&quot;+ body +&quot;\\&quot;,&quot; // + &quot;\\&quot;timeout_express\\&quot;:\\&quot;10m\\&quot;,&quot; // + &quot;\\&quot;product_code\\&quot;:\\&quot;FAST_INSTANT_TRADE_PAY\\&quot;&#125;&quot;); //请求参数可查阅【电脑网站支付的API文档-alipay.trade.page.pay-请求参数】章节 //请求 String result = alipayClient.pageExecute(alipayRequest).getBody(); //输出 response.setContentType(&quot;text/html;charset=&quot;+AlipayConfig.charset); response.getWriter().write(result); response.getWriter().flush(); response.getWriter().close(); &#125;&#125;","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"},{"name":"MyBatis","slug":"java/SpringBoot/MyBatis","permalink":"http://cyc0819.top/categories/java/SpringBoot/MyBatis/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://cyc0819.top/tags/SpringBoot/"},{"name":"MyBatis","slug":"MyBatis","permalink":"http://cyc0819.top/tags/MyBatis/"}]},{"title":"SpringBoot将图片存储到数据库","slug":"2021-07-21-Springboot存储图片到数据库","date":"2021-07-21T12:19:41.000Z","updated":"2021-12-08T09:27:29.556Z","comments":false,"path":"2021/07/21/2021-07-21-Springboot存储图片到数据库/","link":"","permalink":"http://cyc0819.top/2021/07/21/2021-07-21-Springboot%E5%AD%98%E5%82%A8%E5%9B%BE%E7%89%87%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/","excerpt":"","text":"SpringBoot将图片存储到数据库存储方式将图片转化为blob的二进制格式，然后存储到数据库即可，从数据中取出时，将blob格式的二进制文字从数据库中取出，用Object的方式来获取，然后转化为图片的格式，即可在屏幕上显示 上传图片Controller层 12345678910111213@PostMapping(&quot;/add/image&quot;)@ResponseBodypublic String addImage(@RequestParam(&quot;file&quot;) MultipartFile file,@RequestParam(&quot;id&quot;) Integer id) throws Exception&#123; if(!file.isEmpty())&#123; BASE64Encoder encoder = new BASE64Encoder(); String image = encoder.encode(file.getBytes()); TestPo testPo = new TestPo(); testPo.setId(id); testPo.setImage(image); testService.addImage(testPo); &#125; return &quot;ok&quot;;&#125; Controoler层主要对上传的图片文件进行处理，当上传的图片不为空的时候，定义一个字符串加密算法，然后将文件的字节编码进行加密，再定义一个实体类对象，将id以及加密之后的文件发送给业务层。 Service层 1234public String addImage(TestPo testPo)&#123; testMapper.insertImage(testPo); return &quot;ok&quot;;&#125; 接受Controller的请求并返回对应的类型 Mapper接口 1234@Mapperpublic interface TestMapper &#123; void insertImage(TestPo testPo);&#125; Mapper.xml 123&lt;insert id = &quot;insertImage&quot; parameterType=&quot;cn.edu.guet.bean.TestPo&quot;&gt; insert into image(id,image) values(#&#123;id&#125;,#&#123;image&#125;)&lt;/insert&gt; 执行sql语句，进行文件的存储，存储为BLOB格式。 html页面 1234567891011121314&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form action=&quot;http://localhost:8081/add/image&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;id&quot; /&gt;&lt;br/&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; /&gt;&lt;br/&gt; &lt;input type=&quot;submit&quot; name=&quot;&quot; id=&quot;&quot; value=&quot;提交&quot; /&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 读取图片Controller层 12345@GetMapping(&quot;/get/image&quot;)@ResponseBodypublic void getImage(@RequestParam(&quot;id&quot;) Integer id, HttpServletResponse response) throws Exception&#123; testService.getImage(id,response);&#125; 主要是接收url请求，根据id给servce层发送请求 Service层 1234567891011121314151617181920212223public String getImage(Integer id, HttpServletResponse response)&#123; try &#123; TestPo testPo = testMapper.selectImageById(id); byte[] image = (byte[])testPo.getImage(); String value = new String(image,&quot;UTF-8&quot;); BASE64Decoder decoder = new BASE64Decoder(); byte[] bytes = decoder.decodeBuffer(value); for(int i=0;i&lt;bytes.length;i++)&#123; if(bytes[i]&lt;0)&#123; bytes[i]+=256; &#125; &#125; response.setContentType(&quot;image/jpeg&quot;); ServletOutputStream out = response.getOutputStream(); out.write(bytes); out.flush(); out.close(); &#125;catch (Exception e)&#123; e.printStackTrace(); &#125; return &quot;ok&quot;;&#125; service层对读取出来的二进制进行处理，用byte[]数据类型存储，然后将其转码成UTF-8的格式，此时我们可以得到想要的BASe64字节码，接着将其解码成为byte[]格式，只有这样才能生成图片，setContentType用于设置生成的图片的格式，然后通过流操作，将图片发送到Controller层，最后在前端显示出来 Maoopper接口 1234@Mapperpublic interface TestMapper &#123; TestPo selectImageById(Integer id);&#125; Mapper.xml 123&lt;select id=&quot;selectImageById&quot; parameterType=&quot;Integer&quot; resultType=&quot;cn.edu.guet.bean.TestPo&quot;&gt; select * from image where id = #&#123;id&#125;&lt;/select&gt; html界面 12345678910&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&quot;http://localhost:8081/get/image?id=2&quot; alt=&quot;Responsive image&quot;&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://cyc0819.top/tags/SpringBoot/"}]},{"title":"过滤器(Filter)在Web中的应用","slug":"2021-07-01-过滤器(Filter)在Web中的应用","date":"2021-07-01T13:17:51.000Z","updated":"2021-12-08T09:27:20.943Z","comments":false,"path":"2021/07/01/2021-07-01-过滤器(Filter)在Web中的应用/","link":"","permalink":"http://cyc0819.top/2021/07/01/2021-07-01-%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E5%9C%A8Web%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"Java Web之过滤器(Filter)过滤器(Filter)过滤器，从字面意思上理解，就是用于过滤作用的工具。在Java web中，过滤器的作用是对Web资源进行拦截，经过处理之后，再交给下一步进行处理；而下一步可以是一个新的过滤器，也可以是一个service","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"}]},{"title":"算法学习_罗马数字转整数","slug":"2021-06-28-算法学习_罗马数字转整数","date":"2021-06-28T06:08:30.000Z","updated":"2021-12-08T09:27:05.747Z","comments":false,"path":"2021/06/28/2021-06-28-算法学习_罗马数字转整数/","link":"","permalink":"http://cyc0819.top/2021/06/28/2021-06-28-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/","excerpt":"","text":"罗马数字转整数题目lettcode-13题难度：简单 解题思路对于每个罗马符号所对应的数值，我们可以将其用一个HashMap存起来，将其字符作为key，以及数值为相应的value 在方法中对输入的字符串的所有字符进行遍历，get到所对应的值，并拿到它的后一位数的值，如果当前符号的值大于后一位符号的值，则进行＋运算，否则-运算。 具体代码123456789101112131415161718192021222324//leetcode项目class Solution &#123; Map&lt;Character,Integer&gt; map=new HashMap&lt;Character,Integer&gt;(); public int romanToInt(String s) &#123; map.put(&#x27;I&#x27;,1); map.put(&#x27;V&#x27;,5); map.put(&#x27;X&#x27;,10); map.put(&#x27;L&#x27;,50); map.put(&#x27;C&#x27;,100); map.put(&#x27;D&#x27;,500); map.put(&#x27;M&#x27;,1000); int ans = 0; int n = s.length(); for (int i = 0; i &lt; n; ++i) &#123; int value = map.get(s.charAt(i)); if (i &lt; n - 1 &amp;&amp; value &lt; map.get(s.charAt(i + 1))) &#123; ans -= value; &#125; else &#123; ans += value; &#125; &#125; return ans; &#125;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"},{"name":"HashMap","slug":"算法/HashMap","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/HashMap/"}],"tags":[{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"HashMap","slug":"HashMap","permalink":"http://cyc0819.top/tags/HashMap/"}]},{"title":"记录博客主页的搭建(二)","slug":"2021-06-24-记录博客主页的搭建(二)","date":"2021-06-24T02:02:55.000Z","updated":"2021-12-08T10:26:14.634Z","comments":false,"path":"2021/06/24/2021-06-24-记录博客主页的搭建(二)/","link":"","permalink":"http://cyc0819.top/2021/06/24/2021-06-24-%E8%AE%B0%E5%BD%95%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%9A%84%E6%90%AD%E5%BB%BA(%E4%BA%8C)/","excerpt":"","text":"记录博客主页的搭建(二)完成上篇文章的所有步骤主题是个性化个人博客的很重要的一个模块，当然hexo默认也有一个主题，但是我们可以到hexo的主题商城中下载更多我们喜欢的主题。 选择想要的主题点击大图可以进行预览，点击名称就可以进入主题的GitHub仓库，就可以进行clone了 然后在本地clone主题的仓库，放到hexo目录的themes文件夹中，再去修改_config.yml文件，就可以应用这个主题了 将theme后面的名称改为刚才clone的文件夹名称，就可以应用主题了 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-aircloud 创建标签以及存档默认的主题是不带有标签和介绍的，这时候需要在博客根目录的source文件夹下建立tags文件夹和about文件夹。 注：建议不要直接新建文件，而是采用 hexo 的 hexo new page tags 和 hexo new page about 的方式新建文件，这样可以被 hexo 索引到。 创建好之后在两个文件夹的index.md中分别输入以下内容 1234---layout: &quot;tags&quot;title: &quot;Tags&quot;--- 123456---layout: &quot;about&quot;title: &quot;About&quot;date: 2016-04-21 04:48:33comments: true--- 再次打开主页就会看到生成了两个新的列表 更换头像以及网站logo在博客根目录的 source 文件夹下建立 img 文件夹*采用 hexo 的 hexo new page img * 然后并将头像文件命名为avatar.jpg，logo文件命名为favicon.ico 然后修改_config.yml文件，增加以下内容 1sidebar-avatar: img/avatar.jpg 就可以了 网站标题在 _config.yml 文件中，增加以下内容 1SEOTitle: George&#x27;blog 冒号后面修改成你想要的名字就可以了 签名比如最顶端的签名，我们同样可以自定义 只要在_config.yml文件，修改以下内容即可 1subtitle: 你想要的签名 搜索功能搜索功能同样是不自带的，我们在安装搜索功能之前，首先要安装一个插件在git中输入以下命令进行安装 1npm i hexo-generator-search --save 然后在_config.yml文件中增加以下内容即可 123search: path: search.json field: post 社交网络底部的社交网络我们可以自行修改，但是只能在官方限制的范围内进行修改编辑根目录的 _config.yml 文件，增加： 123456# SNS settings# 一些社交平台地址，支持以下几种：weibo_username: 5676314204zhihu_username: swaggy-chengithub_username: chenyicai0819twitter_username: George chan 还有一些其他的社交网络可以参考官方文档 赞赏功能我们同样可以在我们的博客中添加一个赞赏功能只要在img文件夹中增加收款码图片，并命名为donate.jpg然后在 _config.yml 文件中增加以下内容，即可在在每篇文章下面增加一个赞赏功能 123donate: img: img/donate.jpg content: 感谢鼓励 修改用户名只需修改 _config.yml 文件，中以下内容，即可修改用户名 1author: 你的用户名 完成主题更换至此，基本的冤死就已经设置完毕了，基本上只要修改 _config.yml 文件，就可以控制网站中所有的元素了，而官方的帮助文档也写的很清楚如何对各个模块进行设置 我的这篇文章只是针对我的设置进行了一个记录，所以需要更多资料的可以去参考官方的文档，基本上是写的非常明白了 部署到GitHub跟之前一样，完成修改之后要部署到github，只需要以下几行命令 123hexo clean //清除缓存文件db.json和已生成的静态文件publichexo g //生成网站静态文件到默认设置的public文件夹hexo d //部署网站到设定的仓库 部署完成之后稍等一会，就可以看到修改之后的内容了 相关链接官方文档 主题商城","categories":[{"name":"博客","slug":"博客","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"博客/Hexo","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://cyc0819.top/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://cyc0819.top/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"记录博客主页的搭建(一)","slug":"2021-06-24-记录博客主页的搭建(一)","date":"2021-06-23T17:01:05.000Z","updated":"2021-12-08T10:26:18.724Z","comments":false,"path":"2021/06/24/2021-06-24-记录博客主页的搭建(一)/","link":"","permalink":"http://cyc0819.top/2021/06/24/2021-06-24-%E8%AE%B0%E5%BD%95%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%9A%84%E6%90%AD%E5%BB%BA(%E4%B8%80)/","excerpt":"","text":"记录博客主页的搭建(一)1.心血来潮有一个自己的网站，是我心中一直存在的一个想法，因最近学业压力不是很大，碰巧看到阿里云的域名首年特惠只要一元，就顺便买了一个域名，准备着手搭建个人网站，在此之前，我对博客网站几乎是没有过了解，所以在查阅了一些资料之后，以Hexo+Github Page的方式进行我的网站的搭建，以下就是具体的过程。 2.搭建过程相关的搭建过程网上随便一找就有很多，我这里只是对我建站的过程进行记录，具有一定参考价值。 2.1 下载node.js以及git并安装在使用Hexo框架进行搭建网站之前，首先要下载安装node.js和git，以便于安装Hexo以及代码的管理。 具体的安装注意事项 Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） 对于中国大陆地区用户，可以前往官网或者淘宝Git for Windows镜像下载 git 安装包（仅针对Windows） 安装完毕以上两个软件之后就可以进行Hexo的安装了2.2 安装Hexo在想要安装Hexo的位置右键打开Git Bash Here通过命令行来进行安装，输入以下命令1npm install -g hexo-cli 点击回车即可进行安装，然后安装完成之后进行一下初始化12hexo initnpm install 分别输入以上两句并回车，就会生成初始的菜单，大概的目录是这样子的12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 下面是各个目录的具体功能： config.yml网站的配置信息，可以在此配置大部分的参数。后面发布到github上面时，有用到这个文件；package.json应用程序的信息source是网站中一下资源的文件夹，博客内容也都放在这里themes网站主题的放置的位置 其他更具体的介绍可以参考官方文档 2.3 预览Hexo博客此时就可以预览自己搭建的博客了，但是所有东西都是初始的，输入以下的命令即可 12npm install hexo-server --savehexo server 以上命令同样是在Git Bash Here中输入然后在浏览器网址栏输入localhost:4000如果以上项目能启动就说明成功了，接下来将项目搭建到GitHub上面 2.4 将项目部署到GitHub 在GitHub中新建一个仓库，然后命名为用户名.github.io，只有这样子GitHub才会将其设置为用户的博客 因为我已经有一个库了，所以显示错误 将本地搭建好的hexo发布到github上 首先输入以下代码安装一个插件 1npm install hexo-deployer-git --save 修改网站配置文件_config.yml,添加deploy信息 1234deploy: type: git repo: git@github.com:用户名/用户名.github.io.git branch: master(也就是想要上传的分支) 生成SSH key 在git中输入以下命令 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然后会提示输入passphrase（本步骤可以跳过），相当于设置一个密码，之后跟github进行操作时都会要求输入密码，避免误操作然后将新生成的key添加到ssh-agent中 1ssh-add ~/.ssh/id_rsa 就可以在上面的路径下找到ssh的文件了 将ssh添加到GitHub中 打开id_rsa.pub文件将一整串公钥拷贝下来打开GitHub的个人设置界面，按照以下图片的步骤进行添加ssh title随意，key填id_rsa.pub文件中内容，然后保存即可。至此，就成功将ssh添加到github中了 测试是否连接成功 输入以下命令 1ssh -T git@github.com 如果出现以下文字就说明连接成功了 1Hi wispyoureyes! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 上传静态文件 成功与GitHub建立连接之后，就可以生成静态文件上传到github中了 123hexo clean //清除缓存文件db.json和已生成的静态文件publichexo g //生成网站静态文件到默认设置的public文件夹hexo d //部署网站到设定的仓库 然后再网址栏输入GitHub仓库的名称就可以访问了 3.绑定域名 首先到阿里云或者其他的云服务商购买一个域名 然后进行域名解析 登陆阿里云控制台，选择域名选项，添加两条CNAME解析 然后在GitHub的仓库设置中，下滑找到Github Pages ，点击进去，在Custom domain里填入你的域名，然后点击Save，稍等一会就好了。 然后就可以通过你的域名来进入博客了 关于备案，如果要部署到国内的服务器上面需要进行备案，从哪里买的域名就从哪里备案GitHub属于国外的服务器，是不用进行备案的 4.相关链接生成ssh Hexo官方文档 阿里云 淘宝git for windows 镜像 淘宝node.js镜像","categories":[{"name":"博客","slug":"博客","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"博客/Hexo","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/Hexo/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://cyc0819.top/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://cyc0819.top/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"基于Swing的简易点餐系统","slug":"2021-06-21-基于Swing的简易点餐系统","date":"2021-06-21T08:58:12.000Z","updated":"2021-12-08T09:35:19.433Z","comments":false,"path":"2021/06/21/2021-06-21-基于Swing的简易点餐系统/","link":"","permalink":"http://cyc0819.top/2021/06/21/2021-06-21-%E5%9F%BA%E4%BA%8ESwing%E7%9A%84%E7%AE%80%E6%98%93%E7%82%B9%E9%A4%90%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"基于Swing的建议点餐系统1. 应用技术1Swing、JDBC、Oracle数据库、Java基础 2.项目功能12工作人员：菜品的增删改查、工作人员点餐、为顾客进行排号叫号、利润查询、结账。顾客：顾客点餐、查看积分、查看菜单、自助结账。 3.项目历程3.1 项目准备总所周知，Swing对于Java来说已经是一个不再使用的技术了，相对于微软的C#语言，Java的优势更在于Web端的应用，但是应教学的要求，主要是为了练习JDBC以及PL/SQL的使用，我们使用了Swing技术配合数据库使用，制作了一个简易的点餐系统，旨在熟悉一个项目的制作流程，从项目需求分析到项目开发到最后的维护发布，我作为小组长，带领了团队一共7位队员在老师的指导之下，完成了项目的开发。 3.2 项目开发背景据了解，学校周围部分餐馆仍处于人工点餐、手工记账的阶段，这样子不仅容易在点餐时出现错记误记的情况，在最后记录时大量的数据也会十分繁琐，计算机软件统一的处理方式可以将以上的过程全都自动化一站式地完成，大大提高了效率；除此之外，使用计算机系统还大大减少了成本。发展点餐系统，是一种必然趋势，可以说点餐系统的出现，只是用现在较为成熟的计算机技术去改造传统行业的一个小小例子。这样的系统，将会不断地出现，而且会有力地推动传统行业的不断发展。 3.3 项目开发在开始项目的开发之后，由于队员基础的参差不齐，所以在任务分配时对队员的能力分配了不同的任务，并针对队员能力进行了不同知识点的针对，由于是首次进行团队项目开发，并没有使用到GitHub进行协作开发，所以在最后整合代码时，碰到了较大的问题，jdk版本不统一，代码不能兼容等等问题，最后整合的代码也还有着大量的冗余，开发过程总体来说比较顺利，但是还是有很大的改进，在开发前进行数据库设计时，虽然说没有太多的表，但是对于项目小白的我们还是花费了一点时间。 3.4 项目源码1https://github.com/chenyicai0819/2020_java_study/tree/main/OrderSystemToSix","categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"Swing","slug":"java/Swing","permalink":"http://cyc0819.top/categories/java/Swing/"}],"tags":[{"name":"Swing","slug":"Swing","permalink":"http://cyc0819.top/tags/Swing/"}]},{"title":"我的第一条博客","slug":"2021-06-21-我的第一条博客","date":"2021-06-21T00:09:22.000Z","updated":"2021-12-08T09:26:29.215Z","comments":false,"path":"2021/06/21/2021-06-21-我的第一条博客/","link":"","permalink":"http://cyc0819.top/2021/06/21/2021-06-21-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"这是我的第一条博客1.初次接触 今天是2021年6月21日。我搭建了我的第一个个人博客网站，并发布了我的第一条个人博客，今后我会在上面发布一些自己的学习经历，个人感想等内容。","categories":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/categories/java/"},{"name":"SpringBoot","slug":"java/SpringBoot","permalink":"http://cyc0819.top/categories/java/SpringBoot/"},{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/"},{"name":"Vue","slug":"前端/Vue","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/Vue/"},{"name":"maven","slug":"java/maven","permalink":"http://cyc0819.top/categories/java/maven/"},{"name":"spring","slug":"java/spring","permalink":"http://cyc0819.top/categories/java/spring/"},{"name":"eCharts","slug":"前端/eCharts","permalink":"http://cyc0819.top/categories/%E5%89%8D%E7%AB%AF/eCharts/"},{"name":"SpringSecurity","slug":"java/SpringSecurity","permalink":"http://cyc0819.top/categories/java/SpringSecurity/"},{"name":"JWT","slug":"java/JWT","permalink":"http://cyc0819.top/categories/java/JWT/"},{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/"},{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/"},{"name":"消息队列","slug":"java/消息队列","permalink":"http://cyc0819.top/categories/java/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"Swagger","slug":"java/Swagger","permalink":"http://cyc0819.top/categories/java/Swagger/"},{"name":"SpringCloud","slug":"java/SpringCloud","permalink":"http://cyc0819.top/categories/java/SpringCloud/"},{"name":"redis","slug":"java/redis","permalink":"http://cyc0819.top/categories/java/redis/"},{"name":"数据结构","slug":"数据结构","permalink":"http://cyc0819.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习总结","slug":"随笔/学习总结","permalink":"http://cyc0819.top/categories/%E9%9A%8F%E7%AC%94/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"},{"name":"shiro","slug":"shiro","permalink":"http://cyc0819.top/categories/shiro/"},{"name":"MyBatis","slug":"java/SpringBoot/MyBatis","permalink":"http://cyc0819.top/categories/java/SpringBoot/MyBatis/"},{"name":"HashMap","slug":"算法/HashMap","permalink":"http://cyc0819.top/categories/%E7%AE%97%E6%B3%95/HashMap/"},{"name":"博客","slug":"博客","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/"},{"name":"Hexo","slug":"博客/Hexo","permalink":"http://cyc0819.top/categories/%E5%8D%9A%E5%AE%A2/Hexo/"},{"name":"Swing","slug":"java/Swing","permalink":"http://cyc0819.top/categories/java/Swing/"}],"tags":[{"name":"java","slug":"java","permalink":"http://cyc0819.top/tags/java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"http://cyc0819.top/tags/SpringBoot/"},{"name":"SpringBoot，Vue","slug":"SpringBoot，Vue","permalink":"http://cyc0819.top/tags/SpringBoot%EF%BC%8CVue/"},{"name":"maven","slug":"maven","permalink":"http://cyc0819.top/tags/maven/"},{"name":"spring","slug":"spring","permalink":"http://cyc0819.top/tags/spring/"},{"name":"前端","slug":"前端","permalink":"http://cyc0819.top/tags/%E5%89%8D%E7%AB%AF/"},{"name":"eCharts","slug":"eCharts","permalink":"http://cyc0819.top/tags/eCharts/"},{"name":"SpringSecurity","slug":"SpringSecurity","permalink":"http://cyc0819.top/tags/SpringSecurity/"},{"name":"JWT","slug":"JWT","permalink":"http://cyc0819.top/tags/JWT/"},{"name":"随笔","slug":"随笔","permalink":"http://cyc0819.top/tags/%E9%9A%8F%E7%AC%94/"},{"name":"算法","slug":"算法","permalink":"http://cyc0819.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"消息队列","slug":"消息队列","permalink":"http://cyc0819.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"},{"name":"Swagger","slug":"Swagger","permalink":"http://cyc0819.top/tags/Swagger/"},{"name":"SpringCloud","slug":"SpringCloud","permalink":"http://cyc0819.top/tags/SpringCloud/"},{"name":"redis","slug":"redis","permalink":"http://cyc0819.top/tags/redis/"},{"name":"数据结构","slug":"数据结构","permalink":"http://cyc0819.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"学习总结","slug":"学习总结","permalink":"http://cyc0819.top/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"},{"name":"shiro","slug":"shiro","permalink":"http://cyc0819.top/tags/shiro/"},{"name":"MyBatis","slug":"MyBatis","permalink":"http://cyc0819.top/tags/MyBatis/"},{"name":"HashMap","slug":"HashMap","permalink":"http://cyc0819.top/tags/HashMap/"},{"name":"Hexo","slug":"Hexo","permalink":"http://cyc0819.top/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://cyc0819.top/tags/%E8%AE%B0%E5%BD%95/"},{"name":"Swing","slug":"Swing","permalink":"http://cyc0819.top/tags/Swing/"}]}