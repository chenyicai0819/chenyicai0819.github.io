{"meta":{"title":"George's Blog","subtitle":"让我来给你讲讲他的传奇故事吧","description":"","author":"George Chan","url":"http://example.com","root":"/"},"pages":[{"title":"img","date":"2021-06-21T15:46:17.000Z","updated":"2021-06-21T15:46:17.510Z","comments":true,"path":"img/index.html","permalink":"http://example.com/img/index.html","excerpt":"","text":""},{"title":"留言版","date":"2021-10-01T11:16:28.000Z","updated":"2021-10-01T11:17:42.638Z","comments":true,"path":"info/index.html","permalink":"http://example.com/info/index.html","excerpt":"","text":""},{"title":"About","date":"2021-06-22T03:09:33.000Z","updated":"2021-10-01T16:43:56.187Z","comments":false,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"flag🚩将学到的东西都记录下来📌 个人资料🎫 一个大4️⃣的在校的暂未秃头🤵(以后可能也不秃头)的初级软件工程师💻(高端)来自桂林电子科技大学🏫(清华又称北京小桂电) 业余的java开发,业余的🏀运动员,职业的睡觉💤达人 想写出更多💯文章📄 联系📞我 我的📫： &#99;&#x68;&#101;&#110;&#121;&#105;&#x63;&#97;&#105;&#x30;&#x38;&#49;&#57;&#64;&#x66;&#111;&#x78;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d; 我的WeChatℹ：George_Chan0819 我的🐧🐧：2495842975"},{"title":"Tags","date":"2021-10-01T16:00:31.846Z","updated":"2021-10-01T16:00:31.846Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2021-10-01T17:10:25.776Z","updated":"2021-10-01T17:10:25.776Z","comments":false,"path":"photos/index.html","permalink":"http://example.com/photos/index.html","excerpt":"","text":""},{"title":"","date":"2021-09-30T03:08:15.422Z","updated":"2021-09-30T02:50:19.699Z","comments":true,"path":"photos/photos.json","permalink":"http://example.com/photos/photos.json","excerpt":"","text":"[{\"name\":\"photos\",\"children\":[\"1600.1600 cc.jpeg\",\"2208.2208 i6_12.jpg\",\"2208.2208 i6_template_0.jpg\",\"1242.813 IMG_20191219_012423.jpg\",\"968.961 IMG_20191219_012434.jpg\",\"971.960 IMG_20191219_012436.jpg\",\"971.960 IMG_20191219_012439.jpg\",\"1000.667 IMG_20191219_012506.jpg\",\"1200.800 IMG_20191219_012701.jpg\",\"1620.1080 mmexport1558356254403.bmp\",\"2560.1440 wall_ko8e24-1.jpg\",\"1080.718 微信图片_20190822224807 - 副本 (2).jpg\",\"1920.1080 微信图片_20190822224812.jpg\",\"1920.1080 微信图片_20190822224816.jpg\"]}]"},{"title":"","date":"2021-09-30T02:50:19.696Z","updated":"2021-09-30T02:50:19.696Z","comments":true,"path":"photos/photosInfo.json","permalink":"http://example.com/photos/photosInfo.json","excerpt":"","text":"[{\"dirName\":\"photos\",\"fileName\":\"cc.jpeg\",\"iconID\":\"1600.1600 cc.jpeg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"i6_12.jpg\",\"iconID\":\"2208.2208 i6_12.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"i6_template_0.jpg\",\"iconID\":\"2208.2208 i6_template_0.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012423.jpg\",\"iconID\":\"1242.813 IMG_20191219_012423.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012434.jpg\",\"iconID\":\"968.961 IMG_20191219_012434.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012436.jpg\",\"iconID\":\"971.960 IMG_20191219_012436.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012439.jpg\",\"iconID\":\"971.960 IMG_20191219_012439.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012506.jpg\",\"iconID\":\"1000.667 IMG_20191219_012506.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"IMG_20191219_012701.jpg\",\"iconID\":\"1200.800 IMG_20191219_012701.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"mmexport1558356254403.bmp\",\"iconID\":\"1620.1080 mmexport1558356254403.bmp\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"wall_ko8e24-1.jpg\",\"iconID\":\"2560.1440 wall_ko8e24-1.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224807 - 副本 (2).jpg\",\"iconID\":\"1080.718 微信图片_20190822224807 - 副本 (2).jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224812.jpg\",\"iconID\":\"1920.1080 微信图片_20190822224812.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}},{\"dirName\":\"photos\",\"fileName\":\"微信图片_20190822224816.jpg\",\"iconID\":\"1920.1080 微信图片_20190822224816.jpg\",\"extension\":{\"size\":64,\"offset\":[0,0]}}]"}],"posts":[{"title":"算法学习_设计hash集合、hash映射","slug":"2021-10-03-算法学习_设计hash集合、hash映射","date":"2021-10-03T14:21:21.000Z","updated":"2021-10-03T15:10:28.956Z","comments":false,"path":"2021/10/03/2021-10-03-算法学习_设计hash集合、hash映射/","link":"","permalink":"http://example.com/2021/10/03/2021-10-03-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1hash%E9%9B%86%E5%90%88%E3%80%81hash%E6%98%A0%E5%B0%84/","excerpt":"","text":"设计hash集合、hash映射题目1lettcode-705题难度：简单 解题思路既然说是一个HashSet，所以他就是一个不可重复的集合，就意味着在该集合中每个元素只能出现一次。 所以说我们就可以用boolean类型的数组来模拟出这样的一个集合 数组的索引就对应了set的key，数组所对应的布尔值就是set的value，当其为true1时就说明存在，否则就是不存在 具体实现方式如下 具体代码123456789101112131415161718192021222324class MyHashSet &#123; //创建一个boolean类型的数组 boolean[] map=null; public MyHashSet() &#123; map=new boolean[1000001]; &#125; public void add(int key) &#123; map[key]=true; &#125; public void remove(int key) &#123; map[key]=false; &#125; public boolean contains(int key) &#123; if (map[key]==true)&#123; return true; &#125;else &#123; return false; &#125; &#125;&#125; 题目2lettcode-706题难度：简单 解题思路从题目中我们可以看出来跟上一题差不多，无非是一个set一个map的差别 阅读题目要求我们可以知道对应的key和value 都是int 类型的，所以我们可以定义一个int类型的数组来存储数据 取值的时候如果取值为空就返回一个-1 ，所以我做了一个判断，判断是否有值 具体实现方式如下 具体代码12345678910111213141516171819202122232425class MyHashMap &#123; // 创建一个int类型的数组 Integer[] map=null; public MyHashMap() &#123; map=new Integer[1000001]; &#125; public void put(int key, int value) &#123; map[key]=value; &#125; public int get(int key) &#123; if (map[key]!=null)&#123; int value=map[key]; return value; &#125;else&#123; return -1; &#125; &#125; public void remove(int key) &#123; map[key]=null; &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"SpringCloud微服务入门","slug":"2021-10-03-SpringCloud微服务入门","date":"2021-10-03T05:44:20.000Z","updated":"2021-10-03T07:07:55.798Z","comments":false,"path":"2021/10/03/2021-10-03-SpringCloud微服务入门/","link":"","permalink":"http://example.com/2021/10/03/2021-10-03-SpringCloud%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%85%A5%E9%97%A8/","excerpt":"","text":"SpringCloud微服务入门1、微服务的发展历程1.1、单体结构简介：将业务的所有功能集中在一个项目中开发，打成一个包部署。我们之前所做的学生管理系统基本都是单体结构优点：结构简单、部署成本低缺点：耦合度高 1.2、分布式结构简介：根据业务功能对系统进行拆分，每个业务模块作为独立项目开发，称为一个服务。优点：降低服务耦合、有利于服务升级拓展分布式架构的要考虑的问题：服务拆分粒度如何？服务集群地址如何维护？服务之间如何实现远程调用？服务健康状态如何感知？ 1.3、微服务架构简介：微服务是一种经过良好架构设计的分布式架构方案。优点：拆分粒度更小、服务更独立、耦合度更低缺点：架构非常复杂，运维、监控、部署难度提高微服务架构的特征： 单一职责：微服务拆分粒度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发 面向服务：微服务对外暴露业务接口 自治：团队独立、技术独立、数据独立、部署独立 隔离性强：服务调用做好隔离、容错、降级，避免出现级联问题 2、使用SpringCloudSpringCloud并不是一个全新的框架，其实他是一个将其他开源的框架集合的一个大篮子得益于SpringBoot框架方便的使用，我们也能很轻松地在SpringBoot上整合SpriongCloud的模块以下是SpringBoot和SpringCloud的版本匹配表，如果不按照这个规则，就有可能出现很多奇怪的问题 2.1、服务拆分当我们使用微服务时，实际上就是相当于把原本在一起的模块拆分成一个一个的小的模块，所以我们在进行服务拆分时必须注意以下几点： 单一职责：不同微服务，不要重复开发相同业务 数据独立：不要访问其它微服务的数据库 面向服务：将自己的业务暴露为接口，供其它微服务调用 2.2、服务调用当我们成功拆分出两个服务的时候，在使用时，肯定会出现A调用B，B调用C的情况出现，而此时我们想到的第一个方法就是根据服务的IP地址和端口进行调用。 但是此时会出现一个问题，实际情况中我们一个服务肯定不只是只有一个地址，可能会有多个一样的服务，作为负载均衡。但是如果每个服务我们都需要通过IP+端口的方式来连接，那么当我们修改一个服务的端口时，就要相应地修改很多个调用他的端口的服务，显然是很麻烦的，而且也不能实现真正的负载均衡。所以我们需要一个注册中心来统一管理我们的所有服务。所以就有了eureka 2.3、eureka注册中心消费者该如何获取服务提供者具体信息？ 服务提供者启动时向eureka注册自己的信息 eureka保存这些信息 消费者根据服务名称向eureka拉取提供者信息 如果有多个服务提供者，消费者该如何选择？ 服务消费者利用负载均衡算法，从服务列表中挑选一个 消费者如何感知服务提供者健康状态？ 服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状态 eureka会更新记录服务列表信息，心跳不正常会被剔除 消费者就可以拉取到最新的信息 现在我们来创建一个eureka注册中心： 我们需要创建一个普通的maven项目，然后在其中引入依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;&lt;/dependency&gt; 在启动类上添加@EnableEurekaServer注解 然后创建一个配置文件Application.yml,在其中添加以下内容123456789server: port: 10086 #端口spring: application: name: eurekaserver #服务名称eureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka/ # eureka的地址，将自己注册到eureka中 以上就成功创建了一个eureka注册中心，运行打开端口，就可以看到我们创建好的注册中心 注册成功的服务会显示在Instances currently registered with Eureka处 接下来我们将客户端注册到注册中心去 我们在需要加入的服务中添加以下依赖：1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt; &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;&lt;/dependency&gt; 然后再配置文件中添加以下内容1234567spring: application: name: orderserviceeureka: client: service-url: defaultZone: http://127.0.0.1:10086/eureka/ 与上面一样，将自己注册到了注册中心中 2.4、eureka服务调用在成功将服务注册到eureka中之后，我们就可以使用服务名来替代端口地址对服务进行调用了 1String url = &quot;http://userservice/user/&quot; + order.getUserId(); 但这不是一个真实有效的地址，是不能直接进行访问的，只能通过eureka进行访问 3、负载均衡3.1、认识负载均衡以下是负载均衡的一个流程图（此流程图也解释了如何通过服务名调用对应的服务） 负载均衡简单来说就是我们有多个同名的服务，他们做的是一样的事情，我们希望所有的请求给他们所有人一起分担，而不是一个人抗下所有的请求，所以这个时候负载均衡就起到了作用，根据不同的规则，负载均衡可以以不同的策略对请求的服务进行管理，可以极大减小服务器的压力。 3.2、负载均衡策略以下就是负载均衡的策略规则 饥饿加载Ribbon默认是采用懒加载，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。而饥饿加载则会在项目启动时创建，降低第一次访问的耗时，通过下面配置开启饥饿加载： 在yml配置文件中加入以下内容，就可以开启饥饿加载模式： 1234ribbon: eager-load: enabled: true # 开启饥饿加载 clients: userservice # 指定对userservice这个服务饥饿加载","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"springcloud","slug":"springcloud","permalink":"http://example.com/tags/springcloud/"}]},{"title":"算法学习_栈实现队列、队列实现栈","slug":"2021-10-01-算法学习_栈实现队列、队列实现栈","date":"2021-10-01T03:22:43.000Z","updated":"2021-10-01T16:05:19.531Z","comments":false,"path":"2021/10/01/2021-10-01-算法学习_栈实现队列、队列实现栈/","link":"","permalink":"http://example.com/2021/10/01/2021-10-01-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E3%80%81%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/","excerpt":"","text":"栈实现队列、队列实现栈题目1、用栈来实现队列lettcode-232题难度：简单 1.1、 解题思路栈是一个先进后出的数据结构，而队列是一个先进先出的数据结构，所以我们想要用栈来实现队列，就必须要用到两个栈，第一个栈出栈到第二个栈中，第二个栈再进行出栈，就可以实现队列先进先出的功能。 具体代码如下 1.2、具体代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class MyQueue &#123; private Stack&lt;Integer&gt; a; private Stack&lt;Integer&gt; b; public MyQueue() &#123; a=new Stack&lt;&gt;(); b=new Stack&lt;&gt;(); &#125; /** * 入栈 * @param x */ public void push(int x) &#123; a.push(x); &#125; /** * 出栈 * @return */ public int pop() &#123; if(b.isEmpty())&#123; while (!a.isEmpty())&#123; b.push(a.pop()); &#125; &#125; return b.pop(); &#125; /** * 返回栈顶元素 * @return */ public int peek() &#123; if(b.isEmpty())&#123; while (!a.isEmpty())&#123; b.push(a.pop()); &#125; &#125; return b.peek(); &#125; /** * 判断栈空 * @return */ public boolean empty() &#123; return a.isEmpty()&amp;&amp;b.isEmpty(); &#125;&#125; 题目2、用队列来实现栈lettcode-225题难度：简单 2.1、解题思路与上一题相同，我们需要用两个队列来实现一个栈 利用队列中的基本方法们就可以实现栈的先进后出的操作 代码如下： 2.2、具体代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950class MyStack &#123; private Queue&lt;Integer&gt; a; private Queue&lt;Integer&gt; b; public MyStack() &#123; a=new LinkedList&lt;&gt;(); b=new LinkedList&lt;&gt;(); &#125; /** * 入栈 * @param x */ public void push(int x) &#123; a.offer(x); // 将b队列中元素全部转给a队列 while(!b.isEmpty()) &#123; a.offer(b.poll()); &#125; // 交换a和b,使得a队列没有在push()的时候始终为空队列 Queue temp = a; a = b; b = temp; &#125; /** * 出栈 * @return */ public int pop() &#123; return b.poll(); &#125; /** * 返回栈顶元素 * @return */ public int top() &#123; return b.peek(); &#125; /** * 判断栈是否为空 * @return */ public boolean empty() &#123; return b.isEmpty(); &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法学习_最近的请求次数","slug":"2021-10-01-算法学习_最近的请求次数","date":"2021-10-01T02:53:20.000Z","updated":"2021-10-01T16:05:22.021Z","comments":false,"path":"2021/10/01/2021-10-01-算法学习_最近的请求次数/","link":"","permalink":"http://example.com/2021/10/01/2021-10-01-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E6%9C%80%E8%BF%91%E7%9A%84%E8%AF%B7%E6%B1%82%E6%AC%A1%E6%95%B0/","excerpt":"","text":"最近的请求次数题目lettcode-933题难度：简单 解题思路从题目上来看，一时半会看不出来是什么意思。 其实所输入的数字t就是一个毫秒数，根据这个数来判断3000毫秒之前的数，如果小于3000毫秒之前的就删除小于的那个。 所以当我们输入3002时，3000-3000=2，而1小于2，所以1就会被删除。 所以说这个题是一个先进先出的方式，所以我们可以使用队列来实现。 具体实现方式如下 具体代码1234567891011121314151617181920class RecentCounter &#123; //构造一个队列，LinkedList的队列 Queue&lt;Integer&gt; queue; public RecentCounter() &#123; queue=new LinkedList&lt;&gt;(); &#125; public int ping(int t) &#123; //将输入的数值入队 queue.add(t); //判断栈顶元素是否小于t-3000 //如果小于t-3000，将其出队 while (queue.peek()&lt;t-3000)&#123; queue.poll(); &#125; //返回队列的长度 return queue.size(); &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Redis使用注解实现二级缓存","slug":"2021-09-29-Redis使用注解实现二级缓存","date":"2021-09-29T09:34:06.000Z","updated":"2021-10-01T16:03:41.055Z","comments":false,"path":"2021/09/29/2021-09-29-Redis使用注解实现二级缓存/","link":"","permalink":"http://example.com/2021/09/29/2021-09-29-Redis%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/","excerpt":"","text":"Redis使用注解实现二级缓存1、介绍上一篇文章中，我们实现二级缓存的方式是通过java代码判断Redis是否存在缓存，然后决定从何处取数据，但是这种方法在我们有大量的需要用到缓存的地方的时候，会产生大量的冗余代码，而且有大量的判断语句，让我们的代码不能够专注于业务上面，这样子是不太好的。 所以在Spring的3.1版本之后就引入了对注解的支持，我们可以通过在类上、方法上标记注解来实现二级缓存的存取 其三个注解分别为：Cacheable ，CacheEvict，CachePut 下面我会将三个注解分别展开进行简单解释 2、Cacheable注解 @Cacheable可以标记在一个方法上，也可以标记在一个类上。 对于一个支持缓存的方法，Spring会在其被调用后将其返回值缓存起来，以保证下次利用同样的参数来执行该方法时可以直接从缓存中获取结果，而不需要再次执行该方法。 Spring在缓存方法的返回值时是以键值对进行缓存的，值就是方法的返回结果。 至于键的话，Spring又支持两种策略，默认策略和自定义策略，这个稍后会进行说明。 需要注意的是当一个支持缓存的方法在对象内部被调用时是不会触发缓存功能的。 @Cacheable可以指定三个属性，value、key和condition。 2.1、value属性value属性是必须指定的，其表示当前方法的返回值是会被缓存在哪个Cache上的，对应Cache的名称。其可以是一个Cache也可以是多个Cache，当需要指定多个Cache时其是一个数组。如下例子所示： 123456@RequestMapping(&quot;selectForAll&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper::AllStudent&quot;)public List&lt;Student&gt; selectStudentForAll() &#123; List&lt;Student&gt; studentList = studentService.selectStudentForAll(); return studentList;&#125; 2.2、key属性 key属性是用来指定Spring缓存方法的返回结果时对应的key的。 该属性支持SpringEL表达式。当我们没有指定该属性时，Spring将使用默认策略生成key。 定义策略是指我们可以通过Spring的EL表达式来指定我们的key。这里的EL表达式可以使用方法参数及它们对应的属性。使用方法参数时我们可以直接使用“#参数名”或者“#p参数index”。如下例子所示：123456@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper&quot;, key = &quot;#sId&quot;)public Student selectStudentForOne(@PathVariable int sId) &#123; Student student = studentService.selectStudentForOne(sId); return student;&#125; 此时，如果我查询了一个sId为1800710318的学生那么上面的方法中最后缓存的键为：MYBATIS:com.chen.mysqlredisdemo.StudentMapper::1800710318 2.3、condition属性 condition属性可以用于指定缓存发生的条件。 有的时候我们可能并不希望缓存一个方法所有的返回结果，这时候通过condition属性可以实现这一功能。 condition属性默认为空，表示将缓存所有的调用情形。 其值是通过SpringEL表达式来指定的，当为true时表示进行缓存处理；当为false时表示不进行缓存处理，即每次调用该方法时该方法都会执行一次。如下例子所示：123456@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;)@Cacheable(value = &quot;MYBATIS:com.chen.mysqlredisdemo.StudentMapper&quot;, key = &quot;#sId&quot;,condition = &quot;#sId&gt;1800710301&quot;)public Student selectStudentForOne(@PathVariable int sId) &#123; Student student = studentService.selectStudentForOne(sId); return student;&#125; 上面的例子就表示当查询的sId大于1800710318的时候才会执行缓存的操作 3、CachePut注解 在支持Spring Cache的环境下，对于使用@Cacheable标注的方法，Spring在每次执行前都会检查Cache中是否存在相同key的缓存元素，如果存在就不再执行该方法，而是直接从缓存中获取结果进行返回，否则才会执行并将返回结果存入指定的缓存中。 @CachePut也可以声明一个方法支持缓存功能。 与@Cacheable不同的是使用@CachePut标注的方法在执行前不会去检查缓存中是否存在之前执行过的结果，而是每次都会执行该方法，并将执行结果以键值对的形式存入指定的缓存中。 @CachePut也可以标注在类上和方法上。使用@CachePut时我们可以指定的属性跟@Cacheable是一样的。 简而言之就是CachePut只会往缓存中写数据，不会从缓存中拿数据 4、CacheEvict注解 @CacheEvict是用来标注在需要清除缓存元素的方法或类上的。当标记在一个类上时表示其中所有的方法的执行都会触发缓存的清除操作。 @CacheEvict可以指定的属性有value、key、condition、allEntries和beforeInvocation。 其中value、key和condition的语义与@Cacheable对应的属性类似。即value表示清除操作是发生在哪些Cache上的（对应Cache的名称）；key表示需要清除的是哪个key，如未指定则会使用默认策略生成的key；condition表示清除操作发生的条件。 与前面不同的不同的是有了两个多出来的属性：allEntries和beforeInvocation 4.1、allEntries属性 allEntries是boolean类型，表示是否需要清除缓存中的所有元素。 默认为false，表示不需要。当指定了allEntries为true时，Spring Cache将忽略指定的key。 有的时候我们需要Cache一下清除所有的元素，这比一个一个清除元素更有效率。 4.2、beforeInvocation属性 清除操作默认是在对应方法成功执行之后触发的，即方法如果因为抛出异常而未能成功返回时也不会触发清除操作。 使用beforeInvocation可以改变触发清除操作的时间，当我们指定该属性值为true时，Spring会在调用该方法之前清除缓存中的指定元素。 5、Caching注解@Caching注解可以让我们在一个方法或者类上同时指定多个Spring Cache相关的注解。其拥有三个属性：cacheable、put和evict，分别用于指定@Cacheable、@CachePut和@CacheEvict。 其例子如下 1234 @Caching(cacheable = @Cacheable(&quot;users&quot;), evict = &#123; @CacheEvict(&quot;cache2&quot;), @CacheEvict(value = &quot;cache3&quot;, allEntries = true) &#125;)public User find(Integer id) &#123; returnnull;&#125; 上面的例子通过一个Caching注解，实现了三种注解同事的配置，相当于一个大集合 6、总结SpringBoot中大量使用了注解、替代了原有的配置文件。大大减少了冗余代码，方便地实现了注解中所设置好的功能。使得我们的代码简洁易懂。除了官方默认的注解，同时我们还可以自定义很多注解，极大方便了我们的使用。","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"Redis入门使用","slug":"2021-09-29-Redis的入门使用","date":"2021-09-28T17:01:06.000Z","updated":"2021-10-01T16:03:30.364Z","comments":false,"path":"2021/09/29/2021-09-29-Redis的入门使用/","link":"","permalink":"http://example.com/2021/09/29/2021-09-29-Redis%E7%9A%84%E5%85%A5%E9%97%A8%E4%BD%BF%E7%94%A8/","excerpt":"","text":"Redis入门使用1、Redis简介 简介Redis 是完全开源的，遵守 BSD 协议，是一个高性能的 key-value 数据库。Redis 与其他 key - value 缓存产品有以下三个特点： Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。 Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。 Redis支持数据的备份，即master-slave模式的数据备份。 优势 性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。 丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。 原子 – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。丰富的特性 – Redis还支持 publish/subscribe, 通知, key 过期等等特性。 2、Redis安装2.1、window安装下载地址：https://github.com/tporadowski/redis/releases。** 根据自己电脑是32位或者64位的下载相对应得版本，就可以进行安装使用 **解压文件夹之后进入文件夹得目录下打开cmd输入以下命令，就可以运行redisredis-server.exe redis.windows.conf重新打开一个cmd，输入以下命令就可以进行数据库操作redis-cli.exe -h 127.0.0.1 -p 6379 2.2、Linux安装下载地址：http://redis.io/download 下载最新稳定版本。在linux中对压缩包进行解压之后进入解压后的文件夹进行make操作 1234# wget http://download.redis.io/releases/redis-6.0.8.tar.gz# tar xzf redis-6.0.8.tar.gz# cd redis-6.0.8# make make之后，src目录下面就会出现一个redis-server的文件，可以用来启动Redis，如下 12# cd src# ./redis-server 除此之外，Redis还给我们提供了一个配置文件，可以修改Redis的配置文件，并运行，如下 12# cd src# ./redis-server ../redis.conf 2.3、Ubuntu apt 命令安装Ubuntu系统不像其他的linux系统，它可以通过命令来在线安装在 Ubuntu 系统安装 Redis 可以使用以下命令: 12# sudo apt update# sudo apt install redis-server 然后可以启动 1# redis-server 3、Redis的数据类型3.1、String类型字符串类型，是一种我们平常最常见到的一种数据类型之一我们使用set和get存取数据时，一般就是String的类型，如下 1234redis 127.0.0.1:6379&gt; SET name &quot;陈益财&quot;OKredis 127.0.0.1:6379&gt; GET name&quot;陈益财&quot; 其中，name就是key，”陈益财”就是所对应的值 3.2、Hash类型Redis hash 是一个键值(key=&gt;value)对集合。Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象例子如下： 123456redis 127.0.0.1:6379&gt; HMSET names name1 &quot;chenyicai&quot; name1 &quot;George&quot;&quot;OK&quot;redis 127.0.0.1:6379&gt; HGET names name1&quot;Hello&quot;redis 127.0.0.1:6379&gt; HGET names name1&quot;World&quot; 3.3、List类型Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。例子如下： 1234567891011redis 127.0.0.1:6379&gt; lpush chen redis(integer) 1redis 127.0.0.1:6379&gt; lpush chen mongodb(integer) 2redis 127.0.0.1:6379&gt; lpush chen rabbitmq(integer) 3redis 127.0.0.1:6379&gt; lrange chen 0 101) &quot;rabbitmq&quot;2) &quot;mongodb&quot;3) &quot;redis&quot;redis 127.0.0.1:6379&gt; 其中lpush表示存数据，而lrange表示取数据 3.4、set类型Redis 的 Set 是 string 类型的无序集合。集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。例子如下： 12345678910111213redis 127.0.0.1:6379&gt; sadd chen redis(integer) 1redis 127.0.0.1:6379&gt; sadd chen mongodb(integer) 1redis 127.0.0.1:6379&gt; sadd chen rabbitmq(integer) 1redis 127.0.0.1:6379&gt; sadd chen rabbitmq(integer) 0redis 127.0.0.1:6379&gt; smembers chen1) &quot;redis&quot;2) &quot;rabbitmq&quot;3) &quot;mongodb&quot; 其中sadd表示添加数据，smembers表示取出数据注意：以上实例中 rabbitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略 3.5、zset类型Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。例子·如下： 123456789101112redis 127.0.0.1:6379&gt; zadd chen 0 redis(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 mongodb(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 rabbitmq(integer) 1redis 127.0.0.1:6379&gt; zadd chen 0 rabbitmq(integer) 0redis 127.0.0.1:6379&gt; ZRANGEBYSCORE chen 0 10001) &quot;mongodb&quot;2) &quot;rabbitmq&quot;3) &quot;redis&quot; 其中zadd表示存数据，ZRANGEBYSCORE表示取数据且虽然存了两次相同的字符，但是也是只会保留一个 4、在java中使用Redis使用Redis更多的情况是在java环境下面使用，所以需要掌握如何在java中对Redis进行操作Redis官方给我们提供了很方便的工具来进行Redis的操作：Jedis 首先你需要下载驱动包 下载 jedis.jar，确保下载最新驱动包。 4.1、连接到Redis配置完成之后我们就可以连接到Redis了。例子如下： 12345678910111213import redis.clients.jedis.Jedis; public class RedisJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); // 如果 Redis 服务设置了密码，需要下面这行，没有就不需要 // jedis.auth(&quot;123456&quot;); System.out.println(&quot;连接成功&quot;); //查看服务是否运行 System.out.println(&quot;服务正在运行: &quot;+jedis.ping()); &#125;&#125; 如果是可以连接成功的，就会返回一个PONG表示回应 4.2、String类型的存储12345678910111213import redis.clients.jedis.Jedis; public class RedisStringJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); System.out.println(&quot;连接成功&quot;); //设置 redis 字符串数据 jedis.set(&quot;name&quot;, &quot;chenyicai&quot;); // 获取存储的数据并输出 System.out.println(&quot;redis 存储的字符串为: &quot;+ jedis.get(&quot;name&quot;)); &#125;&#125; 成功之后控制台就会显示name所对应的值：chenyicai 4.3、List类型的存储12345678910111213141516171819import java.util.List;import redis.clients.jedis.Jedis; public class RedisListJava &#123; public static void main(String[] args) &#123; //连接本地的 Redis 服务 Jedis jedis = new Jedis(&quot;localhost&quot;); System.out.println(&quot;连接成功&quot;); //存储数据到列表中 jedis.lpush(&quot;site-list&quot;, &quot;Baidu&quot;); jedis.lpush(&quot;site-list&quot;, &quot;Google&quot;); jedis.lpush(&quot;site-list&quot;, &quot;Taobao&quot;); // 获取存储的数据并输出 List&lt;String&gt; list = jedis.lrange(&quot;site-list&quot;, 0 ,2); for(int i=0; i&lt;list.size(); i++) &#123; System.out.println(&quot;列表项为: &quot;+list.get(i)); &#125; &#125;&#125; 成功之后控制台就会返回信息 123列表项为: Taobao列表项为: Google列表项为: Baidu 5、在SpringBoot中使用Redis一般在SpringBoot中使用Redis时我们会用来做Mysql数据库的二级缓存，这样子在我们获取数据的时候就不需要每次都到数据库进行查询，如果缓存中有数据就可以直接从缓存中拿，大大提高了查询的效率。 首先我们需要在maven中引入我们所需要的依赖 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt; 然后在yml配置文件中，配置Redis的相关配置文件 123456789101112spring: redis: database: 0 host: localhost port: 6379 password: timeout: 500 pool: max-active: 8 max-idle: 8 min-idle: 0 max-wait: -1 我们还需要一个Config类来处理数据的序列化，否则双方可能会出现乱码的情况 1234567891011121314151617181920212223242526272829303132333435363738@Configurationpublic class RedisConfig &#123; private RedisConnectionFactory redisConnectionFactory; public RedisConfig(RedisConnectionFactory redisConnectionFactory) &#123; this.redisConnectionFactory = redisConnectionFactory; &#125; /** * redisTemplate 序列化使用的jdkSerializeable, 存储二进制字节码, 所以自定义序列化类 * * @return */ @Bean public RedisTemplate&lt;Object, Object&gt; redisTemplate() &#123; RedisTemplate&lt;Object, Object&gt; redisTemplate = new RedisTemplate&lt;&gt;(); redisTemplate.setConnectionFactory(redisConnectionFactory); // 使用Jackson2JsonRedisSerialize 替换默认序列化 Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class); ObjectMapper objectMapper = new ObjectMapper(); objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY); objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL); jackson2JsonRedisSerializer.setObjectMapper(objectMapper); // 设置value的序列化规则和 key的序列化规则 redisTemplate.setKeySerializer(new StringRedisSerializer()); redisTemplate.setValueSerializer(jackson2JsonRedisSerializer); redisTemplate.setHashKeySerializer(new StringRedisSerializer()); redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer); redisTemplate.afterPropertiesSet(); return redisTemplate; &#125;&#125; 创建一个cache的实现类用于将查出来的数据添加到缓存中，并设置一些缓存的配置,里面包括了一些有关增删改的配置方法。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121public class MybatisRedisCache implements Cache &#123; private Object key; private String id; private final ReadWriteLock readWriteLock = new ReentrantReadWriteLock(); private RedisTemplate&lt;Object, Object&gt; redisTemplate; private final String COMMON_CACHE_KEY = &quot;MYBATIS:&quot;; /** * 默认缓存对象的缓存时间为 1 分钟 **/ private static final long EXPRIRE_TIME_IN_MINUT = 30; public MybatisRedisCache(String id) &#123; if (id == null) &#123; throw new IllegalArgumentException(&quot;缓存对象id是不能为空的&quot;); &#125; this.id = id; &#125; private RedisTemplate&lt;Object, Object&gt; getRedisTemplate() &#123; if (redisTemplate == null) &#123; redisTemplate = ApplicationContextHolder.getBean(&quot;redisTemplate&quot;); &#125; return redisTemplate; &#125; @Override public String getId() &#123; return id; &#125; @Override public void putObject(Object key, Object value) &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); //使用redisTemplate得到值操作对象 ValueOperations operation = redisTemplate.opsForValue(); //使用值操作对象operation设置缓存对象 operation.set(getKey(key), value, EXPRIRE_TIME_IN_MINUT, TimeUnit.MINUTES);// System.out.println(&quot;缓存对象保存成功&quot;); &#125; catch (Throwable t) &#123; System.err.println(&quot;缓存对象保存失败&quot; + t); &#125; &#125; public Object getKey() &#123; return key; &#125; public void setKey(Object key) &#123; this.key = key; &#125; @Override public Object getObject(Object key) &#123; try &#123; setKey(key); RedisTemplate redisTemplate = getRedisTemplate(); ValueOperations operations = redisTemplate.opsForValue(); Object result = operations.get(getKey(key));// System.out.println(&quot;获取缓存对象成功&quot;); return result; &#125; catch (Throwable t) &#123; System.err.println(&quot;缓存对象获取失败&quot; + t); return null; &#125; &#125; @Override public Object removeObject(Object key) &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); redisTemplate.delete(getKey(key));// System.out.println(&quot;删除缓存对象成功！&quot;+key); &#125; catch (Throwable t) &#123; System.err.println(&quot;删除缓存对象失败！&quot; + t); &#125; return null; &#125; @Override public void clear() &#123; try &#123; RedisTemplate redisTemplate = getRedisTemplate(); Set&lt;String&gt; keys = redisTemplate.keys(getKeys()); redisTemplate.delete(keys); System.out.println(&quot;出现新增、修改、删除操作，清空对应Mapper缓存======&gt;&quot; + keys.size()); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125; /** * 按照一定规则标识key */ private String getKey(Object key) &#123; String k=COMMON_CACHE_KEY + this.id + &quot;:&quot; + DigestUtils.md5DigestAsHex(String.valueOf(key).getBytes()); return k; &#125; /** * 所有key */ private String getKeys() &#123; return COMMON_CACHE_KEY + this.id + &quot;:*&quot;; &#125; @Override public int getSize() &#123; Long size = getRedisTemplate().boundHashOps(getId()).size(); return size == null ? 0 : size.intValue(); &#125; @Override public ReadWriteLock getReadWriteLock() &#123; return readWriteLock; &#125;&#125; 然后我们在数据库查询的mapper.xml上添加上以下的配置，表示开启了数据库的二级缓存 1&lt;cache type=&quot;com.chen.mysqlredisdemo.cache.MybatisRedisCache&quot;&gt;&lt;/cache&gt; 然后在Controller文件中注入刚才写好的方法 1234@AutowiredStringRedisTemplate stringRedisTemplate;@AutowiredRedisTemplate redisTemplate; 最后在方法中判断Redis中是否有缓存，如果有就从Redis中取数据，否则就到数据库进行查找 123456789101112131415@RequestMapping(&quot;/selectForOne/&#123;sId&#125;&quot;) public Student selectStudentForOne(@PathVariable int sId)&#123; String key = &quot;MYBATIS:&quot; + &quot;com.chen.mysqlredisdemo.StudentMapper:&quot;+sId; ValueOperations&lt;String, Student&gt; operations = redisTemplate.opsForValue(); boolean hasKey = redisTemplate.hasKey(key); if (hasKey) &#123; System.out.println(&quot;缓存输出&quot;); Student student = operations.get(key); return student; &#125;else &#123; Student student = studentService.selectStudentForOne(sId); operations.set(key, student);//把数据放入缓存 return student; &#125; &#125;","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"}]},{"title":"算法学习_设计有序流","slug":"2021-09-26-算法学习_设计有序流","date":"2021-09-26T13:47:00.000Z","updated":"2021-10-01T16:03:13.089Z","comments":false,"path":"2021/09/26/2021-09-26-算法学习_设计有序流/","link":"","permalink":"http://example.com/2021/09/26/2021-09-26-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1%E6%9C%89%E5%BA%8F%E6%B5%81/","excerpt":"","text":"设计有序流题目lettcode-1656题难度：简单 解题思路既然是一个有序流，那么我们就可以将其存储到一个数组中，然后通过数组下标对所在的值进行访问。所以我们首先创建一个长度为n+1的数组，将value的值存在其中。将下标指针的值设置为1，然后在执行时进行循环加1 接下来就是循环读取的过程：当我们在数组中插入一个数据的时候，就判断一个数组下标是否小于n，以及当前下标处的value值是否不为空，如果不为空我们就进入循环，将其存到一个新的集合中，并将其输出。如果为空的时候就不执行方法，继续往数组中添加value直到下标不小于n为止 具体代码1234567891011121314151617181920212223242526272829class OrderedStream &#123; private String[] arr; private int n; private int ptr; // 构造函数 public OrderedStream(int n) &#123; //因为数组的下标n从0开始，所以数组的长度为n+1 this.arr=new String[n+1]; this.n=n; this.ptr=1; &#125; public List&lt;String&gt; insert(int idKey, String value) &#123; //将value存到数组中 arr[idKey]=value; //创建一个新的数组 List&lt;String&gt; res=new ArrayList&lt;&gt;(); //循环读取arr数组，将其中的值写到res数组中 //当arr[]为null时，不进入循环 while (ptr&lt;=n&amp;&amp;arr[ptr]!=null)&#123; res.add(arr[ptr]); ptr++; &#125; return res; &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法学习_设计停车系统","slug":"2021-09-26-算法学习_设计停车系统","date":"2021-09-26T06:06:30.000Z","updated":"2021-10-01T16:03:08.988Z","comments":false,"path":"2021/09/26/2021-09-26-算法学习_设计停车系统/","link":"","permalink":"http://example.com/2021/09/26/2021-09-26-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E8%AE%BE%E8%AE%A1%E5%81%9C%E8%BD%A6%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"设计停车系统题目lettcode-1603题难度：简单 解题思路每种车都有每种车所对应的一个车位，而且不能停到其他车的车位上面去，所以说我们需要三个变量将每种车的车位数量存起来。然后在有新车进来时，判断车辆的类型，然后查找相应的停车位，如果有车位就返回一个true，相当于停车成功，然后该类型的车位减去一个，如果车位为0，则不允许停车，返回false 具体代码1234567891011121314151617181920212223242526272829303132class ParkingSystem &#123; int big; int medium; int small; // 构造函数 public ParkingSystem(int big, int medium, int small) &#123; this.big=big; this.medium=medium; this.small=small; &#125; public boolean addCar(int carType) &#123; if (carType==1)&#123; if (this.big&gt;0)&#123; this.big--; return true; &#125; &#125;else if (carType==2)&#123; if (this.medium&gt;0)&#123; this.medium--; return true; &#125; &#125;else if (carType==3)&#123; if (this.small&gt;0)&#123; this.small--; return true; &#125; &#125; return false; &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"java栈","slug":"2021-09-25-java栈","date":"2021-09-25T05:40:27.000Z","updated":"2021-10-01T16:03:05.711Z","comments":false,"path":"2021/09/25/2021-09-25-java栈/","link":"","permalink":"http://example.com/2021/09/25/2021-09-25-java%E6%A0%88/","excerpt":"","text":"java栈栈是一个先进后出的数据结构，想要自己实现一个栈，要求这个栈具有push()，pop()——返回栈顶并出栈，peek()——返回栈顶不出栈，isEmpty()等方法。 1.1、手动实现一个栈的多种方式 采用数组来实现栈 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import java.util.Arrays;/** * @author George * @project testDemo * @package abc * @date 2021/9/25 19:59 * @since 1.0 */class Stack1&lt;T&gt; &#123; // 实现栈的数组 private Object[] stack; // 数组大小 private int size; Stack1()&#123; stack=new Object[10]; &#125; // 判断数组是否为空 public boolean isEmpty()&#123; if (size==0)&#123; return true; &#125;else&#123; return false; &#125; &#125; // 返回栈顶元素 public T peek()&#123; T t=null; if (size&gt;0)&#123; t= (T) stack[size-1]; &#125; return t; &#125; // 返回栈顶并出栈 public T pop()&#123; T t=peek(); if(size&gt;0)&#123; stack[size-1]=null; size--; &#125; return t; &#125; // 扩容 public void expandCapacity(int size)&#123; int len=stack.length; if (size&gt;len)&#123; size=size*3/2+1; stack= Arrays.copyOf(stack,size); &#125; &#125; public void push(T t)&#123; expandCapacity(size+1); stack[size]=t; size++; &#125;&#125;public class ArrayStack &#123; public static void main(String[] args) &#123; Stack1&lt;String&gt; stringStack1=new Stack1&lt;&gt;(); System.out.println(stringStack1.peek()); System.out.println(stringStack1.isEmpty()); stringStack1.push(&quot;java&quot;); stringStack1.push(&quot;chenyc2021@qq.com&quot;); stringStack1.push(&quot;gogogo&quot;); System.out.println(stringStack1.pop()); System.out.println(stringStack1.isEmpty()); System.out.println(stringStack1.peek()); &#125;&#125; 采用链表来实现 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677/** * @author George * @project testDemo * @package abc * @date 2021/9/26 0:49 * @since 1.0 */class Stack2&lt;T&gt; &#123; // 定义一个链表 class Node&lt;T&gt; &#123; private T t; private Node next; &#125; private Node&lt;T&gt; head; // 构造函数 Stack2() &#123; head = null; &#125; // 入栈 public void push(T t) &#123; if (t == null) &#123; throw new NullPointerException(&quot;参数不能为空&quot;); &#125; if (head == null) &#123; head = new Node&lt;T&gt;(); head.t = t; head.next = null; &#125; else &#123; Node&lt;T&gt; temp = head; head = new Node&lt;T&gt;(); head.t = t; head.next = temp; &#125; &#125; // 出栈 public T pop() &#123; T t = head.t; head = head.next; return t; &#125; // 栈顶元素 public T peek() &#123; T t = head.t; return t; &#125; //判断栈是否为空 public boolean isEmpty() &#123; if (head == null) &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125;public class LinkStack &#123; public static void main(String[] args) &#123; Stack2 stack = new Stack2(); System.out.println(stack.isEmpty()); stack.push(&quot;Java&quot;); stack.push(&quot;is&quot;); stack.push(&quot;beautiful&quot;); System.out.println(stack.peek()); System.out.println(stack.peek()); System.out.println(stack.pop()); System.out.println(stack.pop()); System.out.println(stack.isEmpty()); System.out.println(stack.pop()); System.out.println(stack.isEmpty()); &#125;&#125; 采用LinkedList实现栈 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 import java.util.LinkedList;/** * @author George * @project testDemo * @package abc * @date 2021/9/26 9:39 * @since 1.0 */class Stack3&lt;T&gt;&#123; // 构建一个linkedLIst集合 private LinkedList&lt;T&gt; ll=new LinkedList&lt;&gt;(); // 判断栈是否为空 public boolean isEmpty()&#123; return ll.isEmpty(); &#125; // 入栈 public void push(T t)&#123; ll.addFirst(t); &#125; //出栈 public T pop()&#123; return ll.removeFirst(); &#125; // 栈顶元素 public T peek()&#123; T t=null; if (!ll.isEmpty())&#123; t=ll.getFirst(); &#125; return t; &#125;&#125;public class LinkedStack &#123; public static void main(String[] args) &#123; Stack3&lt;String&gt; stringStack3=new Stack3&lt;&gt;(); System.out.println(stringStack3.isEmpty()); System.out.println(stringStack3.peek()); stringStack3.push(&quot;java&quot;); stringStack3.push(&quot;is&quot;); stringStack3.push(&quot;beautiful&quot;); System.out.println(stringStack3.peek()); System.out.println(stringStack3.pop()); System.out.println(stringStack3.isEmpty()); System.out.println(stringStack3.peek()); &#125;&#125; 1.2、栈的应用在java中，栈是一种很重要的数据结构，如以下的很多场景都应用到了栈 符号匹配 中缀表达式变为后缀表达式 计算后缀表达式 实现函数的嵌套调用 HTML和XML中的标签匹配 网页浏览器中以访问界面的历史记录 例如： 符号匹配在编写程序的过程中，我们经常会遇到诸如圆括号“()”与花括号“{}”，这些符号都必须是左右匹配的，这就是我们所说的符合匹配类型，当然符合不仅需要个数相等，而且需要先左后右的依次出现，否则就不符合匹配规则，如“)(”，明显是错误的匹配，而“()”才是正确的匹配。有时候符合如括号还会嵌套出现，如“9-(5+(5+1))”,而嵌套的匹配原则是一个右括号与其前面最近的一个括号匹配，事实上编译器帮我检查语法错误是也是执行一样的匹配原理，而这一系列操作都需要借助栈来完成，接下来我们使用栈来实现括号”()”是否匹配的检测。判断原则如下（str=”((5-3)*8-2)”）： a.设置str是一个表达式字符串，从左到右依次对字符串str中的每个字符char进行语法检测，如果char是，左括号则入栈，如果char是右括号则出栈(有一对匹配就可以去匹配一个左括号，因此可以出栈)，若此时出栈的字符char为左括号，则说明这一对括号匹配正常，如果此时栈为空或者出栈字符不为左括号，则表示缺少与char匹配的左括号，即目前不完整。 b.重复执行a操作，直到str检测结束，如果此时栈为空，则全部括号匹配，如果栈中还有左括号，是说明缺少右括号。 实现代码如下： 123456789101112131415161718192021222324252627282930313233public class CheckExpression &#123; public static String isValid(String expstr) &#123; //创建栈 LinkedStack&lt;String&gt; stack = new LinkedStack&lt;&gt;(); int i=0; while(i&lt;expstr.length()) &#123; char ch=expstr.charAt(i); i++; switch(ch) &#123; case &#x27;(&#x27;: stack.push(ch+&quot;&quot;);//左括号直接入栈 break; case &#x27;)&#x27;: if (stack.isEmpty() || !stack.pop().equals(&quot;(&quot;)) //遇见右括号左括号直接出栈 return &quot;(&quot;; &#125; &#125; //最后检测是否为空,为空则检测通过 if(stack.isEmpty()) return &quot;check pass!&quot;; else return &quot;check exception!&quot;; &#125; public static void main(String args[]) &#123; String expstr=&quot;((5-3)*8-2)&quot;; System.out.println(expstr+&quot; &quot;+isValid(expstr)); &#125;&#125;","categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}]},{"title":"准备阅读小米十年纪念《一往无前》","slug":"2021-08-27-准备阅读小米十年纪念《一往无前》 - 副本 - 副本","date":"2021-08-26T16:46:22.000Z","updated":"2021-10-01T16:03:00.504Z","comments":false,"path":"2021/08/27/2021-08-27-准备阅读小米十年纪念《一往无前》 - 副本 - 副本/","link":"","permalink":"http://example.com/2021/08/27/2021-08-27-%E5%87%86%E5%A4%87%E9%98%85%E8%AF%BB%E5%B0%8F%E7%B1%B3%E5%8D%81%E5%B9%B4%E7%BA%AA%E5%BF%B5%E3%80%8A%E4%B8%80%E5%BE%80%E6%97%A0%E5%89%8D%E3%80%8B%20-%20%E5%89%AF%E6%9C%AC%20-%20%E5%89%AF%E6%9C%AC/","excerpt":"","text":"准备阅读小米十年纪念《一往无前》作为一个不太资深的老米粉，自从小米发布新书《一往无前》以来一直想阅读一下，感受一下大厂发展的心路历程，但是一直都没有提上日程，而今天决定正式开始阅读此书，但是可能耗时会较长，现在这里做一个标记，阅读完毕务必完成一篇读后感。 2021.09.21 因为一直都在面试，所以阅读计划得往后推迟一点了。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]},{"title":"对SpringIOC的理解","slug":"2021-08-26-对SpringIOC的理解","date":"2021-08-26T01:45:01.000Z","updated":"2021-10-01T16:02:45.849Z","comments":false,"path":"2021/08/26/2021-08-26-对SpringIOC的理解/","link":"","permalink":"http://example.com/2021/08/26/2021-08-26-%E5%AF%B9SpringIOC%E7%9A%84%E7%90%86%E8%A7%A3/","excerpt":"","text":"对SpringIOC的理解1、何为IOC​ IOC—Inversion of Control，即“控制反转”，不是什么技术，而是一种设计思想。在Java开发中，IOC意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。如何理解好IOC呢？理解好Ioc的关键是要明确“谁控制谁，控制什么，为何是反转（有反转就应该有正转了），哪些方面反转了”，那我们来分析一下 1.1 谁控制谁，控制什么​ 传统Java程序设计，我们直接在对象内部通过new进行创建对象，是程序主动去创建依赖对象；而IOC是有专门一个容器来创建这些对象，即由IOC容器来控制对象的创建；谁控制谁？当然是IOC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等） 1.2 为何是反转，哪些方面反转了​ 有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。 1.3 图例说明传统程序设计下图，都是主动去创建相关对象然后再组合起来： 当有了IoC/DI的容器后，在客户端类中不再主动去创建这些对象了，如下图所示： 2、IOC能做什么​ IOC 不是一种技术，只是一种思想，一个重要的面向对象编程的法则，它能指导我们如何设计出松耦合、更优良的程序。传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IOC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。 其实IOC对编程带来的最大改变不是从代码上，而是从思想上，发生了“主从换位”的变化。应用程序原本是老大，要获取什么资源都是主动出击，但是在IOC/DI思想中，应用程序就变成被动的了，被动的等待IOC容器来创建并注入它所需要的资源了。 IOC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IOC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。 3、IOC和DI​ DI—Dependency Injection，即“依赖注入”：组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。 理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来分析一下： 谁依赖于谁：当然是应用程序依赖于IOC容器； 为什么需要依赖：应用程序需要IOC容器来提供对象需要的外部资源； 谁注入谁：很明显是IOC容器注入应用程序某个对象，应用程序依赖的对象； 注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。 IOC和DI由什么关系呢？其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IOC而言，“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”。 4、对IOC和DI的理解4.1、IoC(控制反转) 首先想说说IoC（Inversion of Control，控制反转）。这是spring的核心，贯穿始终。所谓IoC，对于spring框架来说，就是由spring来负责控制对象的生命周期和对象间的关系。这是什么意思呢，举个简单的例子，我们是如何找女朋友的？常见的情况是，我们到处去看哪里有长得漂亮身材又好的mm，然后打听她们的兴趣爱好、qq号、电话号、ip号、iq号………，想办法认识她们，投其所好送其所要，然后嘿嘿……这个过程是复杂深奥的，我们必须自己设计和面对每个环节。传统的程序开发也是如此，在一个对象中，如果要使用另外的对象，就必须得到它（自己new一个，或者从JNDI中查询一个），使用完之后还要将对象销毁（比如Connection等），对象始终会和其他的接口或类藕合起来。 那么IoC是如何做的呢？有点像通过婚介找女朋友，在我和女朋友之间引入了一个第三者：婚姻介绍所。婚介管理了很多男男女女的资料，我可以向婚介提出一个列表，告诉它我想找个什么样的女朋友，比如长得像李嘉欣，身材像林熙雷，唱歌像周杰伦，速度像卡洛斯，技术像齐达内之类的，然后婚介就会按照我们的要求，提供一个mm，我们只需要去和她谈恋爱、结婚就行了。简单明了，如果婚介给我们的人选不符合要求，我们就会抛出异常。整个过程不再由我自己控制，而是有婚介这样一个类似容器的机构来控制。Spring所倡导的开发方式就是如此，所有的类都会在spring容器中登记，告诉spring你是个什么东西，你需要什么东西，然后spring会在系统运行到适当的时候，把你要的东西主动给你，同时也把你交给其他需要你的东西。所有的类的创建、销毁都由 spring来控制，也就是说控制对象生存周期的不再是引用它的对象，而是spring。对于某个具体的对象而言，以前是它控制其他对象，现在是所有对象都被spring控制，所以这叫控制反转。 4.2、DI(依赖注入) IoC的一个重点是在系统运行中，动态的向某个对象提供它所需要的其他对象。这一点是通过DI（Dependency Injection，依赖注入）来实现的。比如对象A需要操作数据库，以前我们总是要在A中自己编写代码来获得一个Connection对象，有了 spring我们就只需要告诉spring，A中需要一个Connection，至于这个Connection怎么构造，何时构造，A不需要知道。在系统运行时，spring会在适当的时候制造一个Connection，然后像打针一样，注射到A当中，这样就完成了对各个对象之间关系的控制。A需要依赖 Connection才能正常运行，而这个Connection是由spring注入到A中的，依赖注入的名字就这么来的。那么DI是如何实现的呢？ Java 1.3之后一个重要特征是反射（reflection），它允许程序在运行的时候动态的生成对象、执行对象的方法、改变对象的属性，spring就是通过反射来实现注入的。 理解了IoC和DI的概念后，一切都将变得简单明了，剩下的工作只是在spring的框架中堆积木而已。 5、原文地址https://www.iteye.com/blog/jinnianshilongnian-1413846","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"最近一段时间的学习总结","slug":"2021-08-20-最近一段时间的学习总结","date":"2021-08-19T17:16:32.000Z","updated":"2021-10-01T16:02:28.182Z","comments":false,"path":"2021/08/20/2021-08-20-最近一段时间的学习总结/","link":"","permalink":"http://example.com/2021/08/20/2021-08-20-%E6%9C%80%E8%BF%91%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E7%9A%84%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/","excerpt":"","text":"最近一段时间的学习总结项目部分 完成了学生宿舍系统的答辩 成功将学生宿舍为系统部署到了服务器上 准备进行学生宿舍系统的小程序的设计，但是实在是没有时间 完成了国医堂小程序的开发(React+Taro+Taro UI) 完成了小程序API的开发(Vue+SpringBoot+MyBatis-Plus) 国医堂小程序后台开发完毕(VUE+SpringBoot+MyBatis-Plus+Element-UI) 准备进行中医药门户或者桂林医学院报修系统开发环境的搭建 框架部分 学习了SpringSecurity，并完成了Session以及Token两种情况下的应用Demo MyBatis-Plus逆向工程(代码生成器) Shiro的基本使用 入门Activiti(工作流) 准备学些RabbitMQ、 MyBatis-Plus逆向工程3.5.0版本之之前是setting模式，之后是building模式 入门了React以及Vue两个有名的前端框架的使用 ElementUI，LayUI，Bootstrap等UI的使用 基础知识 复习了下AOP思想，并准备使用到日志中 HashMap和HashTable的区别 服务器 手动将web项目部署到阿里云服务器上 复习了Linux的指令 备注看到同学面试京东所回答的问题，以及其他同学所总结的知识点，感觉自己和别人相比有很大的进步空间","categories":[],"tags":[{"name":"学习总结","slug":"学习总结","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"}]},{"title":"shiro安全框架","slug":"2021-08-01-shiro安全框架","date":"2021-08-01T12:19:41.000Z","updated":"2021-10-01T16:02:30.173Z","comments":false,"path":"2021/08/01/2021-08-01-shiro安全框架/","link":"","permalink":"http://example.com/2021/08/01/2021-08-01-shiro%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6/","excerpt":"","text":"shiro安全框架1、简述shiro是apache公司所出品的开源安全框架其可以用于： 处理身份认证 授权 企业会话管理和加密 相对于Spring security来说更加简单，使用也更加灵活 在使用shiro的时候可以不依赖于任何容器，既可以在javaSE下使用，同样可以在JavaEE下使用 2、架构 使用用户的登录信息构建令牌12UsernamePasswordToken token = new UsernamePasswordToken(username, password); token可以理解为一个用户令牌，等于的过程可以理解为shiro检验用户令牌是否具有合法的身份以及相关的权限 执行登录 123SecurityUtils.setSecurityManager(securityManager); // 注入SecurityManagerSubject subject = SecurityUtils.getSubject(); // 获取Subject单例对象subject.login(token); // 执行登录 shiro中最核心的部分就是securityManger，它主要负责安全认证和授权。当我们在使用这个框架的时候，shiro已经将一切的操作封装成一个盒子了，我们在使用的时候可以把它当成一个黑盒来进行使用。SecurityUtils对象，本质上就是一个工厂类似Spring中的ApplicationContext。Subject，翻译过来就是项目的意思，他是一个需要通过shiro保护的一个抽象概念。通过1令牌和项目的登录关系，保证了我们的安全。 判断用户 这一步中的内容shiro无法帮我们进行实现，我们只有通过最原始的手段来实现登录用户的判断，就是查询数据库。 例如： 123456if (!token.getUsername().equals(name)) &#123; //shiro底层会抛出一个异常 return null;&#125;//判断密码return new SimpleAuthenticationInfo(&quot;&quot;, password, &quot;&quot;); 第一个if语句中首先会判断数据库中查到的name于输入的用户名2是否一致，如果不一致，则会抛出一个异常然后SimpleAuthenticationInfo中可以用于判断密码的正确性，同样是从数据库查出来的数据做对比。 3、实现Realm 创建一个Realm Realm即领域，相当于datasource数据源，securityManager进行安全认证需要通过Realm获取用户权限数据，比如：如果用户身份数据在数据库那么realm就需要从数据库获取用户身份信息，但是Realm并不止局限于数据的存取，其中还有很多认证授权校验相关的代码我们可以自定义一个MyRealm，用于我们的项目之中，但是前提是这个类必须继承于AuthorizingRealm父类，然后实现两个方法AuthorizationInfo doGetAuthorizationInfo以及AuthenticationInfo doGetAuthenticationInfoAuthenticationInfo代表了用户的角色信息集合，AuthorizationInfo代表了角色的权限信息集合。如此一来，当设计人员对项目中的某一个url路径设置了只允许某个角色或具有某种权限才可以访问的控制约束的时候，Shiro就可以通过以上两个对象来判断。 我们也可以简单看作：doGetAuthenticationInfo() 方法：用来验证当前登录的用户，获取认证信息。doGetAuthorizationInfo() 方法：为当前登录成功的用户授予权限和分配角色。 从数据库查询数据 在数据库中查询登陆人信息的时候，仅仅需要查询用户的id，这时还未涉及到密码，也就是说即使用户输入的密码不正确，照样可以查询出该用户。然后，将该用户的相关信息封装到authcInfo中并返回给Shiro接下来就该Shiro上场了，将封装的用户信息与用户的输入信息（用户名、密码）进行对比、校验（注意，这里对密码也要进行校验）。校验通过则允许用户登录，否则跳转到指定页面。 4、Shiro配置 在ShiroConfig中配置Realm 1234@Bean(name=&quot;MyRealm&quot;) public MyRealm myRealm() &#123; return new MyRealm(); &#125; 配置安全管理器SecurityManager 1234567@Bean(name=&quot;securityManager&quot;) public DefaultWebSecurityManager getDefaultWebSecurityManager(@Qualifier(&quot;MyRealm&quot;) MyRealm myRealm) &#123; DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager(); //关联Realm securityManager.setRealm(myRealm); return securityManager; &#125; 当我们配置安全管理器的时候，需要将前面的Realm添加进来，这样子才可以访问到Realm 配置Shiro过滤器 shiro中自带好了配置的过滤器，我们在使用之前需要将其进行导入 1234567891011121314151617181920ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();//设置安全管理器shiroFilterFactoryBean.setSecurityManager(securityManager);//添加Shiro内置过滤器/*Shiro内置过滤器，可以实现权限相关的拦截器常用的有：anon：无需认证就能访问authc：必须认证才能访问user：必须拥有 “记住我” 功能才能使用perms：拥有对某个资源的权限才能访问role： 拥有对某个角色权限才能访问*/LinkedHashMap&lt;String, String&gt; filterMap = new LinkedHashMap&lt;String,String&gt;();//这里我们要将不进行拦截的放在前面filterMap.put(&quot;/login&quot;, &quot;anon&quot;);filterMap.put(&quot;/*&quot;, &quot;authc&quot;);//最后设置验证失败的时候所跳转的界面shiroFilterFactoryBean.setLoginUrl(&quot;/toLogin&quot;); 此时当我们未登陆的时候，点击被拦截的模块，就会跳到我们所指定的网页，而没有拦截的网页则可以正常显示。","categories":[],"tags":[{"name":"shiro","slug":"shiro","permalink":"http://example.com/tags/shiro/"}]},{"title":"过滤器(Filter)在Web中的应用","slug":"2021-07-01-过滤器(Filter)在Web中的应用","date":"2021-07-01T13:17:51.000Z","updated":"2021-10-01T16:02:12.670Z","comments":false,"path":"2021/07/01/2021-07-01-过滤器(Filter)在Web中的应用/","link":"","permalink":"http://example.com/2021/07/01/2021-07-01-%E8%BF%87%E6%BB%A4%E5%99%A8(Filter)%E5%9C%A8Web%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/","excerpt":"","text":"Java Web之过滤器(Filter)过滤器(Filter)过滤器，从字面意思上理解，就是用于过滤作用的工具。在Java web中，过滤器的作用是对Web资源进行拦截，经过处理之后，再交给下一步进行处理；而下一步可以是一个新的过滤器，也可以是一个service","categories":[],"tags":[{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"}]},{"title":"算法学习_罗马数字转整数","slug":"2021-06-28-算法学习_罗马数字转整数","date":"2021-06-28T06:08:30.000Z","updated":"2021-10-01T16:01:22.347Z","comments":false,"path":"2021/06/28/2021-06-28-算法学习_罗马数字转整数/","link":"","permalink":"http://example.com/2021/06/28/2021-06-28-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0_%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/","excerpt":"","text":"罗马数字转整数题目lettcode-13题难度：简单 解题思路对于每个罗马符号所对应的数值，我们可以将其用一个HashMap存起来，将其字符作为key，以及数值为相应的value 在方法中对输入的字符串的所有字符进行遍历，get到所对应的值，并拿到它的后一位数的值，如果当前符号的值大于后一位符号的值，则进行＋运算，否则-运算。 具体代码123456789101112131415161718192021222324//leetcode项目class Solution &#123; Map&lt;Character,Integer&gt; map=new HashMap&lt;Character,Integer&gt;(); public int romanToInt(String s) &#123; map.put(&#x27;I&#x27;,1); map.put(&#x27;V&#x27;,5); map.put(&#x27;X&#x27;,10); map.put(&#x27;L&#x27;,50); map.put(&#x27;C&#x27;,100); map.put(&#x27;D&#x27;,500); map.put(&#x27;M&#x27;,1000); int ans = 0; int n = s.length(); for (int i = 0; i &lt; n; ++i) &#123; int value = map.get(s.charAt(i)); if (i &lt; n - 1 &amp;&amp; value &lt; map.get(s.charAt(i + 1))) &#123; ans -= value; &#125; else &#123; ans += value; &#125; &#125; return ans; &#125;&#125;","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"HashMap","slug":"HashMap","permalink":"http://example.com/tags/HashMap/"}]},{"title":"记录博客主页的搭建(二)","slug":"2021-06-24-记录博客主页的搭建(二)","date":"2021-06-24T02:02:55.000Z","updated":"2021-10-01T16:01:05.220Z","comments":false,"path":"2021/06/24/2021-06-24-记录博客主页的搭建(二)/","link":"","permalink":"http://example.com/2021/06/24/2021-06-24-%E8%AE%B0%E5%BD%95%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%9A%84%E6%90%AD%E5%BB%BA(%E4%BA%8C)/","excerpt":"","text":"记录博客主页的搭建(二)完成上篇文章的所有步骤主题是个性化个人博客的很重要的一个模块，当然hexo默认也有一个主题，但是我们可以到hexo的主题商城中下载更多我们喜欢的主题。 选择想要的主题点击大图可以进行预览，点击名称就可以进入主题的GitHub仓库，就可以进行clone了 然后在本地clone主题的仓库，放到hexo目录的themes文件夹中，再去修改_config.yml文件，就可以应用这个主题了 将theme后面的名称改为刚才clone的文件夹名称，就可以应用主题了 1234# Extensions## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: hexo-theme-aircloud 创建标签以及存档默认的主题是不带有标签和介绍的，这时候需要在博客根目录的source文件夹下建立tags文件夹和about文件夹。 注：建议不要直接新建文件，而是采用 hexo 的 hexo new page tags 和 hexo new page about 的方式新建文件，这样可以被 hexo 索引到。 创建好之后在两个文件夹的index.md中分别输入以下内容 1234---layout: &quot;tags&quot;title: &quot;Tags&quot;--- 123456---layout: &quot;about&quot;title: &quot;About&quot;date: 2016-04-21 04:48:33comments: true--- 再次打开主页就会看到生成了两个新的列表 更换头像以及网站logo在博客根目录的 source 文件夹下建立 img 文件夹*采用 hexo 的 hexo new page img * 然后并将头像文件命名为avatar.jpg，logo文件命名为favicon.ico 然后修改_config.yml文件，增加以下内容 1sidebar-avatar: img/avatar.jpg 就可以了 网站标题在 _config.yml 文件中，增加以下内容 1SEOTitle: George&#x27;blog 冒号后面修改成你想要的名字就可以了 签名比如最顶端的签名，我们同样可以自定义 只要在_config.yml文件，修改以下内容即可 1subtitle: 你想要的签名 搜索功能搜索功能同样是不自带的，我们在安装搜索功能之前，首先要安装一个插件在git中输入以下命令进行安装 1npm i hexo-generator-search --save 然后在_config.yml文件中增加以下内容即可 123search: path: search.json field: post 社交网络底部的社交网络我们可以自行修改，但是只能在官方限制的范围内进行修改编辑根目录的 _config.yml 文件，增加： 123456# SNS settings# 一些社交平台地址，支持以下几种：weibo_username: 5676314204zhihu_username: swaggy-chengithub_username: chenyicai0819twitter_username: George chan 还有一些其他的社交网络可以参考官方文档 赞赏功能我们同样可以在我们的博客中添加一个赞赏功能只要在img文件夹中增加收款码图片，并命名为donate.jpg然后在 _config.yml 文件中增加以下内容，即可在在每篇文章下面增加一个赞赏功能 123donate: img: img/donate.jpg content: 感谢鼓励 修改用户名只需修改 _config.yml 文件，中以下内容，即可修改用户名 1author: 你的用户名 完成主题更换至此，基本的冤死就已经设置完毕了，基本上只要修改 _config.yml 文件，就可以控制网站中所有的元素了，而官方的帮助文档也写的很清楚如何对各个模块进行设置 我的这篇文章只是针对我的设置进行了一个记录，所以需要更多资料的可以去参考官方的文档，基本上是写的非常明白了 部署到GitHub跟之前一样，完成修改之后要部署到github，只需要以下几行命令 123hexo clean //清除缓存文件db.json和已生成的静态文件publichexo g //生成网站静态文件到默认设置的public文件夹hexo d //部署网站到设定的仓库 部署完成之后稍等一会，就可以看到修改之后的内容了 相关链接官方文档 主题商城","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://example.com/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"记录博客主页的搭建(一)","slug":"2021-06-24-记录博客主页的搭建(一)","date":"2021-06-23T17:01:05.000Z","updated":"2021-10-01T16:01:11.070Z","comments":false,"path":"2021/06/24/2021-06-24-记录博客主页的搭建(一)/","link":"","permalink":"http://example.com/2021/06/24/2021-06-24-%E8%AE%B0%E5%BD%95%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A1%B5%E7%9A%84%E6%90%AD%E5%BB%BA(%E4%B8%80)/","excerpt":"","text":"记录博客主页的搭建(一)1.心血来潮有一个自己的网站，是我心中一直存在的一个想法，因最近学业压力不是很大，碰巧看到阿里云的域名首年特惠只要一元，就顺便买了一个域名，准备着手搭建个人网站，在此之前，我对博客网站几乎是没有过了解，所以在查阅了一些资料之后，以Hexo+Github Page的方式进行我的网站的搭建，以下就是具体的过程。 2.搭建过程相关的搭建过程网上随便一找就有很多，我这里只是对我建站的过程进行记录，具有一定参考价值。 2.1 下载node.js以及git并安装在使用Hexo框架进行搭建网站之前，首先要下载安装node.js和git，以便于安装Hexo以及代码的管理。 具体的安装注意事项 Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本 使用 Node.js 官方安装程序时，请确保勾选 Add to PATH 选项（默认已勾选） 对于中国大陆地区用户，可以前往官网或者淘宝Git for Windows镜像下载 git 安装包（仅针对Windows） 安装完毕以上两个软件之后就可以进行Hexo的安装了2.2 安装Hexo在想要安装Hexo的位置右键打开Git Bash Here通过命令行来进行安装，输入以下命令1npm install -g hexo-cli 点击回车即可进行安装，然后安装完成之后进行一下初始化12hexo initnpm install 分别输入以上两句并回车，就会生成初始的菜单，大概的目录是这样子的12345678.├── _config.yml├── package.json├── scaffolds├── source| ├── _drafts| └── _posts└── themes 下面是各个目录的具体功能： config.yml网站的配置信息，可以在此配置大部分的参数。后面发布到github上面时，有用到这个文件；package.json应用程序的信息source是网站中一下资源的文件夹，博客内容也都放在这里themes网站主题的放置的位置 其他更具体的介绍可以参考官方文档 2.3 预览Hexo博客此时就可以预览自己搭建的博客了，但是所有东西都是初始的，输入以下的命令即可 12npm install hexo-server --savehexo server 以上命令同样是在Git Bash Here中输入然后在浏览器网址栏输入localhost:4000如果以上项目能启动就说明成功了，接下来将项目搭建到GitHub上面 2.4 将项目部署到GitHub 在GitHub中新建一个仓库，然后命名为用户名.github.io，只有这样子GitHub才会将其设置为用户的博客 因为我已经有一个库了，所以显示错误 将本地搭建好的hexo发布到github上 首先输入以下代码安装一个插件 1npm install hexo-deployer-git --save 修改网站配置文件_config.yml,添加deploy信息 1234deploy: type: git repo: git@github.com:用户名/用户名.github.io.git branch: master(也就是想要上传的分支) 生成SSH key 在git中输入以下命令 1ssh-keygen -t rsa -C &quot;your_email@example.com&quot; 然后会提示输入passphrase（本步骤可以跳过），相当于设置一个密码，之后跟github进行操作时都会要求输入密码，避免误操作然后将新生成的key添加到ssh-agent中 1ssh-add ~/.ssh/id_rsa 就可以在上面的路径下找到ssh的文件了 将ssh添加到GitHub中 打开id_rsa.pub文件将一整串公钥拷贝下来打开GitHub的个人设置界面，按照以下图片的步骤进行添加ssh title随意，key填id_rsa.pub文件中内容，然后保存即可。至此，就成功将ssh添加到github中了 测试是否连接成功 输入以下命令 1ssh -T git@github.com 如果出现以下文字就说明连接成功了 1Hi wispyoureyes! You&#x27;ve successfully authenticated, but GitHub does not provide shell access. 上传静态文件 成功与GitHub建立连接之后，就可以生成静态文件上传到github中了 123hexo clean //清除缓存文件db.json和已生成的静态文件publichexo g //生成网站静态文件到默认设置的public文件夹hexo d //部署网站到设定的仓库 然后再网址栏输入GitHub仓库的名称就可以访问了 3.绑定域名 首先到阿里云或者其他的云服务商购买一个域名 然后进行域名解析 登陆阿里云控制台，选择域名选项，添加两条CNAME解析 然后在GitHub的仓库设置中，下滑找到Github Pages ，点击进去，在Custom domain里填入你的域名，然后点击Save，稍等一会就好了。 然后就可以通过你的域名来进入博客了 关于备案，如果要部署到国内的服务器上面需要进行备案，从哪里买的域名就从哪里备案GitHub属于国外的服务器，是不用进行备案的 4.相关链接生成ssh Hexo官方文档 阿里云 淘宝git for windows 镜像 淘宝node.js镜像","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://example.com/tags/%E8%AE%B0%E5%BD%95/"}]},{"title":"基于Swing的简易点餐系统","slug":"2021-06-21-基于Swing的简易点餐系统","date":"2021-06-21T08:58:12.000Z","updated":"2021-10-01T16:01:42.500Z","comments":false,"path":"2021/06/21/2021-06-21-基于Swing的简易点餐系统/","link":"","permalink":"http://example.com/2021/06/21/2021-06-21-%E5%9F%BA%E4%BA%8ESwing%E7%9A%84%E7%AE%80%E6%98%93%E7%82%B9%E9%A4%90%E7%B3%BB%E7%BB%9F/","excerpt":"","text":"基于Swing的建议点餐系统1. 应用技术1Swing、JDBC、Oracle数据库、Java基础 2.项目功能12工作人员：菜品的增删改查、工作人员点餐、为顾客进行排号叫号、利润查询、结账。顾客：顾客点餐、查看积分、查看菜单、自助结账。 3.项目历程3.1 项目准备总所周知，Swing对于Java来说已经是一个不再使用的技术了，相对于微软的C#语言，Java的优势更在于Web端的应用，但是应教学的要求，主要是为了练习JDBC以及PL/SQL的使用，我们使用了Swing技术配合数据库使用，制作了一个简易的点餐系统，旨在熟悉一个项目的制作流程，从项目需求分析到项目开发到最后的维护发布，我作为小组长，带领了团队一共7位队员在老师的指导之下，完成了项目的开发。 3.2 项目开发背景据了解，学校周围部分餐馆仍处于人工点餐、手工记账的阶段，这样子不仅容易在点餐时出现错记误记的情况，在最后记录时大量的数据也会十分繁琐，计算机软件统一的处理方式可以将以上的过程全都自动化一站式地完成，大大提高了效率；除此之外，使用计算机系统还大大减少了成本。发展点餐系统，是一种必然趋势，可以说点餐系统的出现，只是用现在较为成熟的计算机技术去改造传统行业的一个小小例子。这样的系统，将会不断地出现，而且会有力地推动传统行业的不断发展。 3.3 项目开发在开始项目的开发之后，由于队员基础的参差不齐，所以在任务分配时对队员的能力分配了不同的任务，并针对队员能力进行了不同知识点的针对，由于是首次进行团队项目开发，并没有使用到GitHub进行协作开发，所以在最后整合代码时，碰到了较大的问题，jdk版本不统一，代码不能兼容等等问题，最后整合的代码也还有着大量的冗余，开发过程总体来说比较顺利，但是还是有很大的改进，在开发前进行数据库设计时，虽然说没有太多的表，但是对于项目小白的我们还是花费了一点时间。 3.4 项目源码1https://github.com/chenyicai0819/2020_java_study/tree/main/OrderSystemToSix","categories":[],"tags":[{"name":"Swing","slug":"Swing","permalink":"http://example.com/tags/Swing/"}]},{"title":"我的第一条博客","slug":"2021-06-21-我的第一条博客","date":"2021-06-21T00:09:22.000Z","updated":"2021-10-01T16:01:55.726Z","comments":false,"path":"2021/06/21/2021-06-21-我的第一条博客/","link":"","permalink":"http://example.com/2021/06/21/2021-06-21-%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"这是我的第一条博客1.初次接触 今天是2021年6月21日。我搭建了我的第一个个人博客网站，并发布了我的第一条个人博客，今后我会在上面发布一些自己的学习经历，个人感想等内容。","categories":[],"tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]}],"categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"http://example.com/tags/%E7%AE%97%E6%B3%95/"},{"name":"java","slug":"java","permalink":"http://example.com/tags/java/"},{"name":"springcloud","slug":"springcloud","permalink":"http://example.com/tags/springcloud/"},{"name":"redis","slug":"redis","permalink":"http://example.com/tags/redis/"},{"name":"数据结构","slug":"数据结构","permalink":"http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"},{"name":"学习总结","slug":"学习总结","permalink":"http://example.com/tags/%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"},{"name":"shiro","slug":"shiro","permalink":"http://example.com/tags/shiro/"},{"name":"HashMap","slug":"HashMap","permalink":"http://example.com/tags/HashMap/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"记录","slug":"记录","permalink":"http://example.com/tags/%E8%AE%B0%E5%BD%95/"},{"name":"Swing","slug":"Swing","permalink":"http://example.com/tags/Swing/"}]}